(window["webpackJsonp_N_E"] = window["webpackJsonp_N_E"] || []).push([[1],{

/***/ "./components/SnarkPackChart/index.js":
/*!********************************************!*\
  !*** ./components/SnarkPackChart/index.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray */ \"./node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react_chartjs_2__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-chartjs-2 */ \"./node_modules/react-chartjs-2/dist/index.modern.js\");\n/* harmony import */ var lodash_round__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash/round */ \"./node_modules/lodash/round.js\");\n/* harmony import */ var lodash_round__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash_round__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var lodash_map__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash/map */ \"./node_modules/lodash/map.js\");\n/* harmony import */ var lodash_map__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(lodash_map__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var lodash_max__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash/max */ \"./node_modules/lodash/max.js\");\n/* harmony import */ var lodash_max__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(lodash_max__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utils */ \"./utils/index.js\");\n/* harmony import */ var _hooks_useScreenSizeOnResize_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../hooks/useScreenSizeOnResize.js */ \"./hooks/useScreenSizeOnResize.js\");\n/* harmony import */ var _hooks_useGenerateChartImage_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../hooks/useGenerateChartImage.js */ \"./hooks/useGenerateChartImage.js\");\n/* harmony import */ var _data_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./data.js */ \"./components/SnarkPackChart/data.js\");\n\n\n\nvar _jsxFileName = \"/Users/brunoazevedo/programming/Subvisual/snarks_for_the_world/components/SnarkPackChart/index.js\",\n    _this = undefined,\n    _s = $RefreshSig$();\n\n\n\n\n\n\n\n\n\n\nvar colors = {\n  snarkPack: \"#FEC942\",\n  batched: \"#4DFEA9\",\n  time: \"#00ccff\",\n  size: \"#FB39FF\"\n};\n\nvar dataset = function dataset(label, axis) {\n  return {\n    fill: false,\n    pointRadius: 5,\n    pointBorderWidth: 2,\n    label: \"\".concat(label, \" - \").concat(axis),\n    data: lodash_map__WEBPACK_IMPORTED_MODULE_5___default()(label === \"snarkPack\" ? _data_js__WEBPACK_IMPORTED_MODULE_10__[\"snarkPackData\"] : _data_js__WEBPACK_IMPORTED_MODULE_10__[\"batchedData\"], axis),\n    backgroundColor: colors[label],\n    borderColor: colors[label],\n    pointStyle: axis === \"time\" ? \"circle\" : \"rect\",\n    pointBackgroundColor: colors[axis],\n    pointBorderColor: colors[label],\n    yAxisID: axis === \"time\" ? \"y\" : \"y1\"\n  };\n};\n\nvar maxSize = lodash_max__WEBPACK_IMPORTED_MODULE_6___default()(lodash_map__WEBPACK_IMPORTED_MODULE_5___default()([].concat(Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_data_js__WEBPACK_IMPORTED_MODULE_10__[\"snarkPackData\"]), Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_data_js__WEBPACK_IMPORTED_MODULE_10__[\"batchedData\"])), \"size\"));\n\nvar SnarkPackChart = function SnarkPackChart() {\n  _s();\n\n  var below834 = Object(_hooks_useScreenSizeOnResize_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(\"834px\");\n\n  var _useGenerateChartImag = Object(_hooks_useGenerateChartImage_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(),\n      ref = _useGenerateChartImag.ref,\n      GENERATE_CHART_IMAGE = _useGenerateChartImag.GENERATE_CHART_IMAGE,\n      printBase64Image = _useGenerateChartImag.printBase64Image;\n\n  printBase64Image(\"snarkPack - \".concat(below834 ? \"below 834px\" : \"above 834px\"));\n  var data = {\n    labels: lodash_map__WEBPACK_IMPORTED_MODULE_5___default()(_data_js__WEBPACK_IMPORTED_MODULE_10__[\"snarkPackData\"], \"proofs\").map(_utils__WEBPACK_IMPORTED_MODULE_7__[\"numberWithCommas\"]),\n    datasets: [dataset(\"snarkPack\", \"time\"), dataset(\"snarkPack\", \"size\"), dataset(\"batched\", \"time\"), dataset(\"batched\", \"size\")]\n  };\n  var options = {\n    animation: !GENERATE_CHART_IMAGE,\n    animations: {\n      x: {\n        from: 0,\n        duration: 1000,\n        easing: \"easeOutQuint\"\n      }\n    },\n    maintainAspectRatio: false,\n    interaction: {\n      intersect: false,\n      mode: \"index\"\n    },\n    layout: {\n      padding: {\n        top: below834 ? 40 : 0,\n        left: below834 ? -50 : -15,\n        right: below834 ? -50 : -15,\n        bottom: -20\n      }\n    },\n    elements: {\n      line: {\n        borderWidth: 1\n      }\n    },\n    scales: {\n      x: {\n        ticks: {\n          padding: 16,\n          font: {\n            size: 16\n          }\n        },\n        grid: {\n          lineWidth: 0,\n          tickLength: 20\n        }\n      },\n      y: {\n        position: \"left\",\n        type: \"linear\",\n        display: true,\n        ticks: {\n          padding: below834 ? -10 : 20,\n          mirror: below834,\n          labelOffset: below834 ? -20 : 0,\n          font: {\n            size: 16\n          },\n          callback: function callback(value) {\n            return \"\".concat(Object(_utils__WEBPACK_IMPORTED_MODULE_7__[\"numberWithCommas\"])(value), \"ms\");\n          },\n          color: colors.time\n        },\n        grid: {\n          drawBorder: false,\n          color: \"rgba(201, 201, 201, 0.5)\"\n        }\n      },\n      y1: {\n        position: \"right\",\n        type: \"linear\",\n        display: true,\n        ticks: {\n          stepSize: maxSize / 7,\n          padding: below834 ? 0 : 20,\n          mirror: below834,\n          labelOffset: below834 ? -20 : 0,\n          font: {\n            size: 16\n          },\n          callback: function callback(value) {\n            return \"\".concat(Object(_utils__WEBPACK_IMPORTED_MODULE_7__[\"numberWithCommas\"])(lodash_round__WEBPACK_IMPORTED_MODULE_4___default()(value / 1000, 0)), \"kB\");\n          },\n          color: colors.size\n        },\n        grid: {\n          drawOnChartArea: false,\n          drawBorder: false\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        display: false\n      },\n      tooltip: {\n        usePointStyle: true\n      }\n    }\n  };\n  return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(\"div\", {\n    style: {\n      position: \"relative\",\n      height: 452,\n      width: \"100%\"\n    },\n    children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(react_chartjs_2__WEBPACK_IMPORTED_MODULE_3__[\"Line\"], {\n      data: data,\n      options: options,\n      ref: ref\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(SnarkPackChart, \"EqtkUuNCGOZgc5z0uJGKC/jUaEQ=\", false, function () {\n  return [_hooks_useScreenSizeOnResize_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"], _hooks_useGenerateChartImage_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"]];\n});\n\n_c = SnarkPackChart;\n/* harmony default export */ __webpack_exports__[\"default\"] = (SnarkPackChart);\n\nvar _c;\n\n$RefreshReg$(_c, \"SnarkPackChart\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/next/dist/compiled/webpack/harmony-module.js */ \"./node_modules/next/dist/compiled/webpack/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/SnarkPackChart/index.js\n");

/***/ }),

/***/ "./hooks/useGenerateChartImage.js":
/*!****************************************!*\
  !*** ./hooks/useGenerateChartImage.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return useGenerateChartImage; });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\nvar _s = $RefreshSig$();\n\n\nvar GENERATE_CHART_IMAGE = !!JSON.parse(\"0\" || false);\nfunction useGenerateChartImage() {\n  _s();\n\n  var ref = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])();\n  return {\n    ref: ref,\n    GENERATE_CHART_IMAGE: GENERATE_CHART_IMAGE,\n    printBase64Image: function printBase64Image(label) {\n      if (GENERATE_CHART_IMAGE) {\n        var _ref$current;\n\n        var dataUrl = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.toBase64Image(\"image/png\", 1.0);\n        /* eslint-disable no-console */\n\n        console.groupCollapsed(label);\n        console.log(dataUrl);\n        console.groupEnd();\n        /* eslint-enable no-console */\n      }\n    }\n  };\n}\n\n_s(useGenerateChartImage, \"QMBuJFIdzLIeqBcFwhMf246mjOM=\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/next/dist/compiled/webpack/harmony-module.js */ \"./node_modules/next/dist/compiled/webpack/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vaG9va3MvdXNlR2VuZXJhdGVDaGFydEltYWdlLmpzP2I0ODIiXSwibmFtZXMiOlsiR0VORVJBVEVfQ0hBUlRfSU1BR0UiLCJKU09OIiwicGFyc2UiLCJwcm9jZXNzIiwidXNlR2VuZXJhdGVDaGFydEltYWdlIiwicmVmIiwidXNlUmVmIiwicHJpbnRCYXNlNjRJbWFnZSIsImxhYmVsIiwiZGF0YVVybCIsImN1cnJlbnQiLCJ0b0Jhc2U2NEltYWdlIiwiY29uc29sZSIsImdyb3VwQ29sbGFwc2VkIiwibG9nIiwiZ3JvdXBFbmQiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBRUEsSUFBTUEsb0JBQW9CLEdBQUcsQ0FBQyxDQUFDQyxJQUFJLENBQUNDLEtBQUwsQ0FDN0JDLEdBQUEsSUFBZ0QsS0FEbkIsQ0FBL0I7QUFJZSxTQUFTQyxxQkFBVCxHQUFpQztBQUFBOztBQUM5QyxNQUFNQyxHQUFHLEdBQUdDLG9EQUFNLEVBQWxCO0FBRUEsU0FBTztBQUNMRCxPQUFHLEVBQUhBLEdBREs7QUFFTEwsd0JBQW9CLEVBQXBCQSxvQkFGSztBQUdMTyxvQkFISyw0QkFHWUMsS0FIWixFQUdtQjtBQUN0QixVQUFJUixvQkFBSixFQUEwQjtBQUFBOztBQUN4QixZQUFNUyxPQUFPLG1CQUFHSixHQUFHLENBQUNLLE9BQVAsaURBQUcsYUFBYUMsYUFBYixDQUEyQixXQUEzQixFQUF3QyxHQUF4QyxDQUFoQjtBQUVBOztBQUNBQyxlQUFPLENBQUNDLGNBQVIsQ0FBdUJMLEtBQXZCO0FBQ0FJLGVBQU8sQ0FBQ0UsR0FBUixDQUFZTCxPQUFaO0FBQ0FHLGVBQU8sQ0FBQ0csUUFBUjtBQUNBO0FBQ0Q7QUFDRjtBQWJJLEdBQVA7QUFlRDs7R0FsQnVCWCxxQiIsImZpbGUiOiIuL2hvb2tzL3VzZUdlbmVyYXRlQ2hhcnRJbWFnZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xuXG5jb25zdCBHRU5FUkFURV9DSEFSVF9JTUFHRSA9ICEhSlNPTi5wYXJzZShcbiAgcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfR0VORVJBVEVfQ0hBUlRfSU1BR0UgfHwgXCIwXCJcbik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUdlbmVyYXRlQ2hhcnRJbWFnZSgpIHtcbiAgY29uc3QgcmVmID0gdXNlUmVmKCk7XG5cbiAgcmV0dXJuIHtcbiAgICByZWYsXG4gICAgR0VORVJBVEVfQ0hBUlRfSU1BR0UsXG4gICAgcHJpbnRCYXNlNjRJbWFnZShsYWJlbCkge1xuICAgICAgaWYgKEdFTkVSQVRFX0NIQVJUX0lNQUdFKSB7XG4gICAgICAgIGNvbnN0IGRhdGFVcmwgPSByZWYuY3VycmVudD8udG9CYXNlNjRJbWFnZShcImltYWdlL3BuZ1wiLCAxLjApO1xuXG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgICAgICAgY29uc29sZS5ncm91cENvbGxhcHNlZChsYWJlbCk7XG4gICAgICAgIGNvbnNvbGUubG9nKGRhdGFVcmwpO1xuICAgICAgICBjb25zb2xlLmdyb3VwRW5kKCk7XG4gICAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tY29uc29sZSAqL1xuICAgICAgfVxuICAgIH0sXG4gIH07XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./hooks/useGenerateChartImage.js\n");

/***/ }),

/***/ "./node_modules/chart.js/auto/auto.esm.js":
/*!************************************************!*\
  !*** ./node_modules/chart.js/auto/auto.esm.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray */ \"./node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\");\n/* harmony import */ var _dist_chart_esm__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dist/chart.esm */ \"./node_modules/chart.js/dist/chart.esm.js\");\n\n\n_dist_chart_esm__WEBPACK_IMPORTED_MODULE_1__[\"Chart\"].register.apply(_dist_chart_esm__WEBPACK_IMPORTED_MODULE_1__[\"Chart\"], Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_dist_chart_esm__WEBPACK_IMPORTED_MODULE_1__[\"registerables\"]));\n/* harmony default export */ __webpack_exports__[\"default\"] = (_dist_chart_esm__WEBPACK_IMPORTED_MODULE_1__[\"Chart\"]);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL2F1dG8vYXV0by5lc20uanM/ZDU0OSJdLCJuYW1lcyI6WyJDaGFydCIsInJlZ2lzdGVyIiwicmVnaXN0ZXJhYmxlcyJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBRUFBLHFEQUFLLENBQUNDLFFBQU4sT0FBQUQscURBQUssNExBQWFFLDZEQUFiLEVBQUw7QUFFZUYsb0hBQWYiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvYXV0by9hdXRvLmVzbS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q2hhcnQsIHJlZ2lzdGVyYWJsZXN9IGZyb20gJy4uL2Rpc3QvY2hhcnQuZXNtJztcblxuQ2hhcnQucmVnaXN0ZXIoLi4ucmVnaXN0ZXJhYmxlcyk7XG5cbmV4cG9ydCBkZWZhdWx0IENoYXJ0O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/chart.js/auto/auto.esm.js\n");

/***/ }),

/***/ "./node_modules/chart.js/dist/chart.esm.js":
/*!*************************************************!*\
  !*** ./node_modules/chart.js/dist/chart.esm.js ***!
  \*************************************************/
/*! exports provided: defaults, Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, DatasetController, Decimation, DomPlatform, DoughnutController, Element, Filler, Interaction, Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, Ticks, TimeScale, TimeSeriesScale, Title, Tooltip, _adapters, animator, controllers, elements, layouts, plugins, registerables, registry, scales */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Animation\", function() { return Animation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Animations\", function() { return Animations; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ArcElement\", function() { return ArcElement; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BarController\", function() { return BarController; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BarElement\", function() { return BarElement; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BasePlatform\", function() { return BasePlatform; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BasicPlatform\", function() { return BasicPlatform; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BubbleController\", function() { return BubbleController; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CategoryScale\", function() { return CategoryScale; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Chart\", function() { return Chart; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DatasetController\", function() { return DatasetController; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Decimation\", function() { return plugin_decimation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DomPlatform\", function() { return DomPlatform; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DoughnutController\", function() { return DoughnutController; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Element\", function() { return Element; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Filler\", function() { return plugin_filler; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Interaction\", function() { return Interaction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Legend\", function() { return plugin_legend; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LineController\", function() { return LineController; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LineElement\", function() { return LineElement; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LinearScale\", function() { return LinearScale; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LogarithmicScale\", function() { return LogarithmicScale; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PieController\", function() { return PieController; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PointElement\", function() { return PointElement; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PolarAreaController\", function() { return PolarAreaController; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RadarController\", function() { return RadarController; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RadialLinearScale\", function() { return RadialLinearScale; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Scale\", function() { return Scale; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ScatterController\", function() { return ScatterController; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Ticks\", function() { return Ticks; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TimeScale\", function() { return TimeScale; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TimeSeriesScale\", function() { return TimeSeriesScale; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Title\", function() { return plugin_title; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Tooltip\", function() { return plugin_tooltip; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"_adapters\", function() { return adapters; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"animator\", function() { return animator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"controllers\", function() { return controllers; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"elements\", function() { return elements; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"layouts\", function() { return layouts; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"plugins\", function() { return plugins; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"registerables\", function() { return registerables; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"registry\", function() { return registry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scales\", function() { return scales; });\n/* harmony import */ var _Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/esm/assertThisInitialized */ \"./node_modules/next/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\");\n/* harmony import */ var _Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/esm/get */ \"./node_modules/next/node_modules/@babel/runtime/helpers/esm/get.js\");\n/* harmony import */ var _Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/esm/inherits */ \"./node_modules/next/node_modules/@babel/runtime/helpers/esm/inherits.js\");\n/* harmony import */ var _Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn */ \"./node_modules/next/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\");\n/* harmony import */ var _Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/esm/getPrototypeOf */ \"./node_modules/next/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\");\n/* harmony import */ var _Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray */ \"./node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\");\n/* harmony import */ var _Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty */ \"./node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray */ \"./node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\");\n/* harmony import */ var _Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck */ \"./node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass */ \"./node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./chunks/helpers.segment.js */ \"./node_modules/chart.js/dist/chunks/helpers.segment.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"defaults\", function() { return _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"d\"]; });\n\n\n\n\n\n\n\n\n\n\n\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/*!\n * Chart.js v3.3.2\n * https://www.chartjs.org\n * (c) 2021 Chart.js Contributors\n * Released under the MIT License\n */\n\n\n\nvar Animator = /*#__PURE__*/function () {\n  function Animator() {\n    Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this, Animator);\n\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(Animator, [{\n    key: \"_notify\",\n    value: function _notify(chart, anims, date, type) {\n      var callbacks = anims.listeners[type];\n      var numSteps = anims.duration;\n      callbacks.forEach(function (fn) {\n        return fn({\n          chart: chart,\n          initial: anims.initial,\n          numSteps: numSteps,\n          currentStep: Math.min(date - anims.start, numSteps)\n        });\n      });\n    }\n  }, {\n    key: \"_refresh\",\n    value: function _refresh() {\n      var me = this;\n\n      if (me._request) {\n        return;\n      }\n\n      me._running = true;\n      me._request = _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"r\"].call(window, function () {\n        me._update();\n\n        me._request = null;\n\n        if (me._running) {\n          me._refresh();\n        }\n      });\n    }\n  }, {\n    key: \"_update\",\n    value: function _update() {\n      var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();\n      var me = this;\n      var remaining = 0;\n\n      me._charts.forEach(function (anims, chart) {\n        if (!anims.running || !anims.items.length) {\n          return;\n        }\n\n        var items = anims.items;\n        var i = items.length - 1;\n        var draw = false;\n        var item;\n\n        for (; i >= 0; --i) {\n          item = items[i];\n\n          if (item._active) {\n            if (item._total > anims.duration) {\n              anims.duration = item._total;\n            }\n\n            item.tick(date);\n            draw = true;\n          } else {\n            items[i] = items[items.length - 1];\n            items.pop();\n          }\n        }\n\n        if (draw) {\n          chart.draw();\n\n          me._notify(chart, anims, date, 'progress');\n        }\n\n        if (!items.length) {\n          anims.running = false;\n\n          me._notify(chart, anims, date, 'complete');\n\n          anims.initial = false;\n        }\n\n        remaining += items.length;\n      });\n\n      me._lastDate = date;\n\n      if (remaining === 0) {\n        me._running = false;\n      }\n    }\n  }, {\n    key: \"_getAnims\",\n    value: function _getAnims(chart) {\n      var charts = this._charts;\n      var anims = charts.get(chart);\n\n      if (!anims) {\n        anims = {\n          running: false,\n          initial: true,\n          items: [],\n          listeners: {\n            complete: [],\n            progress: []\n          }\n        };\n        charts.set(chart, anims);\n      }\n\n      return anims;\n    }\n  }, {\n    key: \"listen\",\n    value: function listen(chart, event, cb) {\n      this._getAnims(chart).listeners[event].push(cb);\n    }\n  }, {\n    key: \"add\",\n    value: function add(chart, items) {\n      var _this$_getAnims$items;\n\n      if (!items || !items.length) {\n        return;\n      }\n\n      (_this$_getAnims$items = this._getAnims(chart).items).push.apply(_this$_getAnims$items, Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(items));\n    }\n  }, {\n    key: \"has\",\n    value: function has(chart) {\n      return this._getAnims(chart).items.length > 0;\n    }\n  }, {\n    key: \"start\",\n    value: function start(chart) {\n      var anims = this._charts.get(chart);\n\n      if (!anims) {\n        return;\n      }\n\n      anims.running = true;\n      anims.start = Date.now();\n      anims.duration = anims.items.reduce(function (acc, cur) {\n        return Math.max(acc, cur._duration);\n      }, 0);\n\n      this._refresh();\n    }\n  }, {\n    key: \"running\",\n    value: function running(chart) {\n      if (!this._running) {\n        return false;\n      }\n\n      var anims = this._charts.get(chart);\n\n      if (!anims || !anims.running || !anims.items.length) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop(chart) {\n      var anims = this._charts.get(chart);\n\n      if (!anims || !anims.items.length) {\n        return;\n      }\n\n      var items = anims.items;\n      var i = items.length - 1;\n\n      for (; i >= 0; --i) {\n        items[i].cancel();\n      }\n\n      anims.items = [];\n\n      this._notify(chart, anims, Date.now(), 'complete');\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(chart) {\n      return this._charts[\"delete\"](chart);\n    }\n  }]);\n\n  return Animator;\n}();\n\nvar animator = new Animator();\nvar transparent = 'transparent';\nvar interpolators = {\n  \"boolean\": function boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  color: function color(from, to, factor) {\n    var c0 = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"c\"])(from || transparent);\n\n    var c1 = c0.valid && Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"c\"])(to || transparent);\n\n    return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n  },\n  number: function number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\n\nvar Animation = /*#__PURE__*/function () {\n  function Animation(cfg, target, prop, to) {\n    Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this, Animation);\n\n    var currentValue = target[prop];\n    to = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"a\"])([cfg.to, to, currentValue, cfg.from]);\n    var from = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"a\"])([cfg.from, currentValue, to]);\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"e\"][cfg.easing] || _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"e\"].linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(Animation, [{\n    key: \"active\",\n    value: function active() {\n      return this._active;\n    }\n  }, {\n    key: \"update\",\n    value: function update(cfg, to, date) {\n      var me = this;\n\n      if (me._active) {\n        me._notify(false);\n\n        var currentValue = me._target[me._prop];\n        var elapsed = date - me._start;\n        var remain = me._duration - elapsed;\n        me._start = date;\n        me._duration = Math.floor(Math.max(remain, cfg.duration));\n        me._total += elapsed;\n        me._loop = !!cfg.loop;\n        me._to = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"a\"])([cfg.to, to, currentValue, cfg.from]);\n        me._from = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"a\"])([cfg.from, currentValue, to]);\n      }\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      var me = this;\n\n      if (me._active) {\n        me.tick(Date.now());\n        me._active = false;\n\n        me._notify(false);\n      }\n    }\n  }, {\n    key: \"tick\",\n    value: function tick(date) {\n      var me = this;\n      var elapsed = date - me._start;\n      var duration = me._duration;\n      var prop = me._prop;\n      var from = me._from;\n      var loop = me._loop;\n      var to = me._to;\n      var factor;\n      me._active = from !== to && (loop || elapsed < duration);\n\n      if (!me._active) {\n        me._target[prop] = to;\n\n        me._notify(true);\n\n        return;\n      }\n\n      if (elapsed < 0) {\n        me._target[prop] = from;\n        return;\n      }\n\n      factor = elapsed / duration % 2;\n      factor = loop && factor > 1 ? 2 - factor : factor;\n      factor = me._easing(Math.min(1, Math.max(0, factor)));\n      me._target[prop] = me._fn(from, to, factor);\n    }\n  }, {\n    key: \"wait\",\n    value: function wait() {\n      var promises = this._promises || (this._promises = []);\n      return new Promise(function (res, rej) {\n        promises.push({\n          res: res,\n          rej: rej\n        });\n      });\n    }\n  }, {\n    key: \"_notify\",\n    value: function _notify(resolved) {\n      var method = resolved ? 'res' : 'rej';\n      var promises = this._promises || [];\n\n      for (var i = 0; i < promises.length; i++) {\n        promises[i][method]();\n      }\n    }\n  }]);\n\n  return Animation;\n}();\n\nvar numbers = ['x', 'y', 'borderWidth', 'radius', 'tension'];\nvar colors = ['color', 'borderColor', 'backgroundColor'];\n_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"d\"].set('animation', {\n  delay: undefined,\n  duration: 1000,\n  easing: 'easeOutQuart',\n  fn: undefined,\n  from: undefined,\n  loop: undefined,\n  to: undefined,\n  type: undefined\n});\nvar animationOptions = Object.keys(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"d\"].animation);\n_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"d\"].describe('animation', {\n  _fallback: false,\n  _indexable: false,\n  _scriptable: function _scriptable(name) {\n    return name !== 'onProgress' && name !== 'onComplete' && name !== 'fn';\n  }\n});\n_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"d\"].set('animations', {\n  colors: {\n    type: 'color',\n    properties: colors\n  },\n  numbers: {\n    type: 'number',\n    properties: numbers\n  }\n});\n_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"d\"].describe('animations', {\n  _fallback: 'animation'\n});\n_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"d\"].set('transitions', {\n  active: {\n    animation: {\n      duration: 400\n    }\n  },\n  resize: {\n    animation: {\n      duration: 0\n    }\n  },\n  show: {\n    animations: {\n      colors: {\n        from: 'transparent'\n      },\n      visible: {\n        type: 'boolean',\n        duration: 0\n      }\n    }\n  },\n  hide: {\n    animations: {\n      colors: {\n        to: 'transparent'\n      },\n      visible: {\n        type: 'boolean',\n        easing: 'linear',\n        fn: function fn(v) {\n          return v | 0;\n        }\n      }\n    }\n  }\n});\n\nvar Animations = /*#__PURE__*/function () {\n  function Animations(chart, config) {\n    Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this, Animations);\n\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(Animations, [{\n    key: \"configure\",\n    value: function configure(config) {\n      if (!Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"i\"])(config)) {\n        return;\n      }\n\n      var animatedProps = this._properties;\n      Object.getOwnPropertyNames(config).forEach(function (key) {\n        var cfg = config[key];\n\n        if (!Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"i\"])(cfg)) {\n          return;\n        }\n\n        var resolved = {};\n\n        var _iterator = _createForOfIteratorHelper(animationOptions),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var option = _step.value;\n            resolved[option] = cfg[option];\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"b\"])(cfg.properties) && cfg.properties || [key]).forEach(function (prop) {\n          if (prop === key || !animatedProps.has(prop)) {\n            animatedProps.set(prop, resolved);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"_animateOptions\",\n    value: function _animateOptions(target, values) {\n      var newOptions = values.options;\n      var options = resolveTargetOptions(target, newOptions);\n\n      if (!options) {\n        return [];\n      }\n\n      var animations = this._createAnimations(options, newOptions);\n\n      if (newOptions.$shared) {\n        awaitAll(target.options.$animations, newOptions).then(function () {\n          target.options = newOptions;\n        }, function () {});\n      }\n\n      return animations;\n    }\n  }, {\n    key: \"_createAnimations\",\n    value: function _createAnimations(target, values) {\n      var animatedProps = this._properties;\n      var animations = [];\n      var running = target.$animations || (target.$animations = {});\n      var props = Object.keys(values);\n      var date = Date.now();\n      var i;\n\n      for (i = props.length - 1; i >= 0; --i) {\n        var prop = props[i];\n\n        if (prop.charAt(0) === '$') {\n          continue;\n        }\n\n        if (prop === 'options') {\n          animations.push.apply(animations, Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(this._animateOptions(target, values)));\n          continue;\n        }\n\n        var value = values[prop];\n        var animation = running[prop];\n        var cfg = animatedProps.get(prop);\n\n        if (animation) {\n          if (cfg && animation.active()) {\n            animation.update(cfg, value, date);\n            continue;\n          } else {\n            animation.cancel();\n          }\n        }\n\n        if (!cfg || !cfg.duration) {\n          target[prop] = value;\n          continue;\n        }\n\n        running[prop] = animation = new Animation(cfg, target, prop, value);\n        animations.push(animation);\n      }\n\n      return animations;\n    }\n  }, {\n    key: \"update\",\n    value: function update(target, values) {\n      if (this._properties.size === 0) {\n        Object.assign(target, values);\n        return;\n      }\n\n      var animations = this._createAnimations(target, values);\n\n      if (animations.length) {\n        animator.add(this._chart, animations);\n        return true;\n      }\n    }\n  }]);\n\n  return Animations;\n}();\n\nfunction awaitAll(animations, properties) {\n  var running = [];\n  var keys = Object.keys(properties);\n\n  for (var i = 0; i < keys.length; i++) {\n    var anim = animations[keys[i]];\n\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n\n  return Promise.all(running);\n}\n\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n\n  var options = target.options;\n\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n\n  if (options.$shared) {\n    target.options = options = Object.assign({}, options, {\n      $shared: false,\n      $animations: {}\n    });\n  }\n\n  return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n  var opts = scale && scale.options || {};\n  var reverse = opts.reverse;\n  var min = opts.min === undefined ? allowedOverflow : 0;\n  var max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\n\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n\n  var x = scaleClip(xScale, allowedOverflow);\n  var y = scaleClip(yScale, allowedOverflow);\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\n\nfunction toClip(value) {\n  var t, r, b, l;\n\n  if (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"i\"])(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l\n  };\n}\n\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  var keys = [];\n\n  var metasets = chart._getSortedDatasetMetas(filterVisible);\n\n  var i, ilen;\n\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n\n  return keys;\n}\n\nfunction _applyStack(stack, value, dsIndex, options) {\n  var keys = stack.keys;\n  var singleMode = options.mode === 'single';\n  var i, ilen, datasetIndex, otherValue;\n\n  if (value === null) {\n    return;\n  }\n\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n\n    if (datasetIndex === dsIndex) {\n      if (options.all) {\n        continue;\n      }\n\n      break;\n    }\n\n    otherValue = stack.values[datasetIndex];\n\n    if (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"g\"])(otherValue) && (singleMode || value === 0 || Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"s\"])(value) === Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"s\"])(otherValue))) {\n      value += otherValue;\n    }\n  }\n\n  return value;\n}\n\nfunction convertObjectDataToArray(data) {\n  var keys = Object.keys(data);\n  var adata = new Array(keys.length);\n  var i, ilen, key;\n\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      x: key,\n      y: data[key]\n    };\n  }\n\n  return adata;\n}\n\nfunction isStacked(scale, meta) {\n  var stacked = scale && scale.options.stacked;\n  return stacked || stacked === undefined && meta.stack !== undefined;\n}\n\nfunction getStackKey(indexScale, valueScale, meta) {\n  return \"\".concat(indexScale.id, \".\").concat(valueScale.id, \".\").concat(meta.stack || meta.type);\n}\n\nfunction getUserBounds(scale) {\n  var _scale$getUserBounds = scale.getUserBounds(),\n      min = _scale$getUserBounds.min,\n      max = _scale$getUserBounds.max,\n      minDefined = _scale$getUserBounds.minDefined,\n      maxDefined = _scale$getUserBounds.maxDefined;\n\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\n\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  var subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\n\nfunction getLastIndexInStack(stack, vScale, positive) {\n  var _iterator2 = _createForOfIteratorHelper(vScale.getMatchingVisibleMetas('bar').reverse()),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var meta = _step2.value;\n      var value = stack[meta.index];\n\n      if (positive && value > 0 || !positive && value < 0) {\n        return meta.index;\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return null;\n}\n\nfunction updateStacks(controller, parsed) {\n  var chart = controller.chart,\n      meta = controller._cachedMeta;\n  var stacks = chart._stacks || (chart._stacks = {});\n  var iScale = meta.iScale,\n      vScale = meta.vScale,\n      datasetIndex = meta.index;\n  var iAxis = iScale.axis;\n  var vAxis = vScale.axis;\n  var key = getStackKey(iScale, vScale, meta);\n  var ilen = parsed.length;\n  var stack;\n\n  for (var i = 0; i < ilen; ++i) {\n    var item = parsed[i];\n    var index = item[iAxis],\n        value = item[vAxis];\n    var itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n    stack._top = getLastIndexInStack(stack, vScale, true);\n    stack._bottom = getLastIndexInStack(stack, vScale, false);\n  }\n}\n\nfunction getFirstScaleId(chart, axis) {\n  var scales = chart.scales;\n  return Object.keys(scales).filter(function (key) {\n    return scales[key].axis === axis;\n  }).shift();\n}\n\nfunction createDatasetContext(parent, index) {\n  return Object.assign(Object.create(parent), {\n    active: false,\n    dataset: undefined,\n    datasetIndex: index,\n    index: index,\n    mode: 'default',\n    type: 'dataset'\n  });\n}\n\nfunction createDataContext(parent, index, element) {\n  return Object.assign(Object.create(parent), {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element: element,\n    index: index,\n    mode: 'default',\n    type: 'data'\n  });\n}\n\nfunction clearStacks(meta, items) {\n  var axis = meta.vScale && meta.vScale.axis;\n\n  if (!axis) {\n    return;\n  }\n\n  items = items || meta._parsed;\n\n  var _iterator3 = _createForOfIteratorHelper(items),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var parsed = _step3.value;\n      var stacks = parsed._stacks;\n\n      if (!stacks || stacks[axis] === undefined || stacks[axis][meta.index] === undefined) {\n        return;\n      }\n\n      delete stacks[axis][meta.index];\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n}\n\nvar isDirectUpdateMode = function isDirectUpdateMode(mode) {\n  return mode === 'reset' || mode === 'none';\n};\n\nvar cloneIfNotShared = function cloneIfNotShared(cached, shared) {\n  return shared ? cached : Object.assign({}, cached);\n};\n\nvar DatasetController = /*#__PURE__*/function () {\n  function DatasetController(chart, datasetIndex) {\n    Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this, DatasetController);\n\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.initialize();\n  }\n\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(DatasetController, [{\n    key: \"initialize\",\n    value: function initialize() {\n      var me = this;\n      var meta = me._cachedMeta;\n      me.configure();\n      me.linkScales();\n      meta._stacked = isStacked(meta.vScale, meta);\n      me.addElements();\n    }\n  }, {\n    key: \"updateIndex\",\n    value: function updateIndex(datasetIndex) {\n      if (this.index !== datasetIndex) {\n        clearStacks(this._cachedMeta);\n      }\n\n      this.index = datasetIndex;\n    }\n  }, {\n    key: \"linkScales\",\n    value: function linkScales() {\n      var me = this;\n      var chart = me.chart;\n      var meta = me._cachedMeta;\n      var dataset = me.getDataset();\n\n      var chooseId = function chooseId(axis, x, y, r) {\n        return axis === 'x' ? x : axis === 'r' ? r : y;\n      };\n\n      var xid = meta.xAxisID = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"v\"])(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n      var yid = meta.yAxisID = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"v\"])(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n      var rid = meta.rAxisID = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"v\"])(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n      var indexAxis = meta.indexAxis;\n      var iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n      var vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n      meta.xScale = me.getScaleForId(xid);\n      meta.yScale = me.getScaleForId(yid);\n      meta.rScale = me.getScaleForId(rid);\n      meta.iScale = me.getScaleForId(iid);\n      meta.vScale = me.getScaleForId(vid);\n    }\n  }, {\n    key: \"getDataset\",\n    value: function getDataset() {\n      return this.chart.data.datasets[this.index];\n    }\n  }, {\n    key: \"getMeta\",\n    value: function getMeta() {\n      return this.chart.getDatasetMeta(this.index);\n    }\n  }, {\n    key: \"getScaleForId\",\n    value: function getScaleForId(scaleID) {\n      return this.chart.scales[scaleID];\n    }\n  }, {\n    key: \"_getOtherScale\",\n    value: function _getOtherScale(scale) {\n      var meta = this._cachedMeta;\n      return scale === meta.iScale ? meta.vScale : meta.iScale;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this._update('reset');\n    }\n  }, {\n    key: \"_destroy\",\n    value: function _destroy() {\n      var meta = this._cachedMeta;\n\n      if (this._data) {\n        Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"u\"])(this._data, this);\n      }\n\n      if (meta._stacked) {\n        clearStacks(meta);\n      }\n    }\n  }, {\n    key: \"_dataCheck\",\n    value: function _dataCheck() {\n      var me = this;\n      var dataset = me.getDataset();\n      var data = dataset.data || (dataset.data = []);\n      var _data = me._data;\n\n      if (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"i\"])(data)) {\n        me._data = convertObjectDataToArray(data);\n      } else if (_data !== data) {\n        if (_data) {\n          Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"u\"])(_data, me);\n          var meta = me._cachedMeta;\n          clearStacks(meta);\n          meta._parsed = [];\n        }\n\n        if (data && Object.isExtensible(data)) {\n          Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"l\"])(data, me);\n        }\n\n        me._syncList = [];\n        me._data = data;\n      }\n    }\n  }, {\n    key: \"addElements\",\n    value: function addElements() {\n      var me = this;\n      var meta = me._cachedMeta;\n\n      me._dataCheck();\n\n      if (me.datasetElementType) {\n        meta.dataset = new me.datasetElementType();\n      }\n    }\n  }, {\n    key: \"buildOrUpdateElements\",\n    value: function buildOrUpdateElements(resetNewElements) {\n      var me = this;\n      var meta = me._cachedMeta;\n      var dataset = me.getDataset();\n      var stackChanged = false;\n\n      me._dataCheck();\n\n      var oldStacked = meta._stacked;\n      meta._stacked = isStacked(meta.vScale, meta);\n\n      if (meta.stack !== dataset.stack) {\n        stackChanged = true;\n        clearStacks(meta);\n        meta.stack = dataset.stack;\n      }\n\n      me._resyncElements(resetNewElements);\n\n      if (stackChanged || oldStacked !== meta._stacked) {\n        updateStacks(me, meta._parsed);\n      }\n    }\n  }, {\n    key: \"configure\",\n    value: function configure() {\n      var me = this;\n      var config = me.chart.config;\n      var scopeKeys = config.datasetScopeKeys(me._type);\n      var scopes = config.getOptionScopes(me.getDataset(), scopeKeys, true);\n      me.options = config.createResolver(scopes, me.getContext());\n      me._parsing = me.options.parsing;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(start, count) {\n      var me = this;\n      var meta = me._cachedMeta,\n          data = me._data;\n      var iScale = meta.iScale,\n          _stacked = meta._stacked;\n      var iAxis = iScale.axis;\n      var sorted = start === 0 && count === data.length ? true : meta._sorted;\n      var prev = start > 0 && meta._parsed[start - 1];\n      var i, cur, parsed;\n\n      if (me._parsing === false) {\n        meta._parsed = data;\n        meta._sorted = true;\n        parsed = data;\n      } else {\n        if (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"b\"])(data[start])) {\n          parsed = me.parseArrayData(meta, data, start, count);\n        } else if (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"i\"])(data[start])) {\n          parsed = me.parseObjectData(meta, data, start, count);\n        } else {\n          parsed = me.parsePrimitiveData(meta, data, start, count);\n        }\n\n        var isNotInOrderComparedToPrev = function isNotInOrderComparedToPrev() {\n          return cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n        };\n\n        for (i = 0; i < count; ++i) {\n          meta._parsed[i + start] = cur = parsed[i];\n\n          if (sorted) {\n            if (isNotInOrderComparedToPrev()) {\n              sorted = false;\n            }\n\n            prev = cur;\n          }\n        }\n\n        meta._sorted = sorted;\n      }\n\n      if (_stacked) {\n        updateStacks(me, parsed);\n      }\n    }\n  }, {\n    key: \"parsePrimitiveData\",\n    value: function parsePrimitiveData(meta, data, start, count) {\n      var iScale = meta.iScale,\n          vScale = meta.vScale;\n      var iAxis = iScale.axis;\n      var vAxis = vScale.axis;\n      var labels = iScale.getLabels();\n      var singleScale = iScale === vScale;\n      var parsed = new Array(count);\n      var i, ilen, index;\n\n      for (i = 0, ilen = count; i < ilen; ++i) {\n        var _parsed$i;\n\n        index = i + start;\n        parsed[i] = (_parsed$i = {}, Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(_parsed$i, iAxis, singleScale || iScale.parse(labels[index], index)), Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(_parsed$i, vAxis, vScale.parse(data[index], index)), _parsed$i);\n      }\n\n      return parsed;\n    }\n  }, {\n    key: \"parseArrayData\",\n    value: function parseArrayData(meta, data, start, count) {\n      var xScale = meta.xScale,\n          yScale = meta.yScale;\n      var parsed = new Array(count);\n      var i, ilen, index, item;\n\n      for (i = 0, ilen = count; i < ilen; ++i) {\n        index = i + start;\n        item = data[index];\n        parsed[i] = {\n          x: xScale.parse(item[0], index),\n          y: yScale.parse(item[1], index)\n        };\n      }\n\n      return parsed;\n    }\n  }, {\n    key: \"parseObjectData\",\n    value: function parseObjectData(meta, data, start, count) {\n      var xScale = meta.xScale,\n          yScale = meta.yScale;\n      var _this$_parsing = this._parsing,\n          _this$_parsing$xAxisK = _this$_parsing.xAxisKey,\n          xAxisKey = _this$_parsing$xAxisK === void 0 ? 'x' : _this$_parsing$xAxisK,\n          _this$_parsing$yAxisK = _this$_parsing.yAxisKey,\n          yAxisKey = _this$_parsing$yAxisK === void 0 ? 'y' : _this$_parsing$yAxisK;\n      var parsed = new Array(count);\n      var i, ilen, index, item;\n\n      for (i = 0, ilen = count; i < ilen; ++i) {\n        index = i + start;\n        item = data[index];\n        parsed[i] = {\n          x: xScale.parse(Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"f\"])(item, xAxisKey), index),\n          y: yScale.parse(Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"f\"])(item, yAxisKey), index)\n        };\n      }\n\n      return parsed;\n    }\n  }, {\n    key: \"getParsed\",\n    value: function getParsed(index) {\n      return this._cachedMeta._parsed[index];\n    }\n  }, {\n    key: \"getDataElement\",\n    value: function getDataElement(index) {\n      return this._cachedMeta.data[index];\n    }\n  }, {\n    key: \"applyStack\",\n    value: function applyStack(scale, parsed, mode) {\n      var chart = this.chart;\n      var meta = this._cachedMeta;\n      var value = parsed[scale.axis];\n      var stack = {\n        keys: getSortedDatasetIndices(chart, true),\n        values: parsed._stacks[scale.axis]\n      };\n      return _applyStack(stack, value, meta.index, {\n        mode: mode\n      });\n    }\n  }, {\n    key: \"updateRangeFromParsed\",\n    value: function updateRangeFromParsed(range, scale, parsed, stack) {\n      var parsedValue = parsed[scale.axis];\n      var value = parsedValue === null ? NaN : parsedValue;\n      var values = stack && parsed._stacks[scale.axis];\n\n      if (stack && values) {\n        stack.values = values;\n        range.min = Math.min(range.min, value);\n        range.max = Math.max(range.max, value);\n        value = _applyStack(stack, parsedValue, this._cachedMeta.index, {\n          all: true\n        });\n      }\n\n      range.min = Math.min(range.min, value);\n      range.max = Math.max(range.max, value);\n    }\n  }, {\n    key: \"getMinMax\",\n    value: function getMinMax(scale, canStack) {\n      var me = this;\n      var meta = me._cachedMeta;\n      var _parsed = meta._parsed;\n      var sorted = meta._sorted && scale === meta.iScale;\n      var ilen = _parsed.length;\n\n      var otherScale = me._getOtherScale(scale);\n\n      var stack = canStack && meta._stacked && {\n        keys: getSortedDatasetIndices(me.chart, true),\n        values: null\n      };\n      var range = {\n        min: Number.POSITIVE_INFINITY,\n        max: Number.NEGATIVE_INFINITY\n      };\n\n      var _getUserBounds = getUserBounds(otherScale),\n          otherMin = _getUserBounds.min,\n          otherMax = _getUserBounds.max;\n\n      var i, value, parsed, otherValue;\n\n      function _skip() {\n        parsed = _parsed[i];\n        value = parsed[scale.axis];\n        otherValue = parsed[otherScale.axis];\n        return !Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"g\"])(value) || otherMin > otherValue || otherMax < otherValue;\n      }\n\n      for (i = 0; i < ilen; ++i) {\n        if (_skip()) {\n          continue;\n        }\n\n        me.updateRangeFromParsed(range, scale, parsed, stack);\n\n        if (sorted) {\n          break;\n        }\n      }\n\n      if (sorted) {\n        for (i = ilen - 1; i >= 0; --i) {\n          if (_skip()) {\n            continue;\n          }\n\n          me.updateRangeFromParsed(range, scale, parsed, stack);\n          break;\n        }\n      }\n\n      return range;\n    }\n  }, {\n    key: \"getAllParsedValues\",\n    value: function getAllParsedValues(scale) {\n      var parsed = this._cachedMeta._parsed;\n      var values = [];\n      var i, ilen, value;\n\n      for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n        value = parsed[i][scale.axis];\n\n        if (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"g\"])(value)) {\n          values.push(value);\n        }\n      }\n\n      return values;\n    }\n  }, {\n    key: \"getMaxOverflow\",\n    value: function getMaxOverflow() {\n      return false;\n    }\n  }, {\n    key: \"getLabelAndValue\",\n    value: function getLabelAndValue(index) {\n      var me = this;\n      var meta = me._cachedMeta;\n      var iScale = meta.iScale;\n      var vScale = meta.vScale;\n      var parsed = me.getParsed(index);\n      return {\n        label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n        value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n      };\n    }\n  }, {\n    key: \"_update\",\n    value: function _update(mode) {\n      var me = this;\n      var meta = me._cachedMeta;\n      me.configure();\n      me._cachedDataOpts = {};\n      me.update(mode || 'default');\n      meta._clip = toClip(Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"v\"])(me.options.clip, defaultClip(meta.xScale, meta.yScale, me.getMaxOverflow())));\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {}\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var me = this;\n      var ctx = me._ctx;\n      var chart = me.chart;\n      var meta = me._cachedMeta;\n      var elements = meta.data || [];\n      var area = chart.chartArea;\n      var active = [];\n      var start = me._drawStart || 0;\n      var count = me._drawCount || elements.length - start;\n      var i;\n\n      if (meta.dataset) {\n        meta.dataset.draw(ctx, area, start, count);\n      }\n\n      for (i = start; i < start + count; ++i) {\n        var element = elements[i];\n\n        if (element.active) {\n          active.push(element);\n        } else {\n          element.draw(ctx, area);\n        }\n      }\n\n      for (i = 0; i < active.length; ++i) {\n        active[i].draw(ctx, area);\n      }\n    }\n  }, {\n    key: \"getStyle\",\n    value: function getStyle(index, active) {\n      var mode = active ? 'active' : 'default';\n      return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext(index, active, mode) {\n      var me = this;\n      var dataset = me.getDataset();\n      var context;\n\n      if (index >= 0 && index < me._cachedMeta.data.length) {\n        var element = me._cachedMeta.data[index];\n        context = element.$context || (element.$context = createDataContext(me.getContext(), index, element));\n        context.parsed = me.getParsed(index);\n        context.raw = dataset.data[index];\n        context.index = context.dataIndex = index;\n      } else {\n        context = me.$context || (me.$context = createDatasetContext(me.chart.getContext(), me.index));\n        context.dataset = dataset;\n        context.index = context.datasetIndex = me.index;\n      }\n\n      context.active = !!active;\n      context.mode = mode;\n      return context;\n    }\n  }, {\n    key: \"resolveDatasetElementOptions\",\n    value: function resolveDatasetElementOptions(mode) {\n      return this._resolveElementOptions(this.datasetElementType.id, mode);\n    }\n  }, {\n    key: \"resolveDataElementOptions\",\n    value: function resolveDataElementOptions(index, mode) {\n      return this._resolveElementOptions(this.dataElementType.id, mode, index);\n    }\n  }, {\n    key: \"_resolveElementOptions\",\n    value: function _resolveElementOptions(elementType) {\n      var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';\n      var index = arguments.length > 2 ? arguments[2] : undefined;\n      var me = this;\n      var active = mode === 'active';\n      var cache = me._cachedDataOpts;\n      var cacheKey = elementType + '-' + mode;\n      var cached = cache[cacheKey];\n      var sharing = me.enableOptionSharing && Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"h\"])(index);\n\n      if (cached) {\n        return cloneIfNotShared(cached, sharing);\n      }\n\n      var config = me.chart.config;\n      var scopeKeys = config.datasetElementScopeKeys(me._type, elementType);\n      var prefixes = active ? [\"\".concat(elementType, \"Hover\"), 'hover', elementType, ''] : [elementType, ''];\n      var scopes = config.getOptionScopes(me.getDataset(), scopeKeys);\n      var names = Object.keys(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"d\"].elements[elementType]);\n\n      var context = function context() {\n        return me.getContext(index, active);\n      };\n\n      var values = config.resolveNamedOptions(scopes, names, context, prefixes);\n\n      if (values.$shared) {\n        values.$shared = sharing;\n        cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n      }\n\n      return values;\n    }\n  }, {\n    key: \"_resolveAnimations\",\n    value: function _resolveAnimations(index, transition, active) {\n      var me = this;\n      var chart = me.chart;\n      var cache = me._cachedDataOpts;\n      var cacheKey = \"animation-\".concat(transition);\n      var cached = cache[cacheKey];\n\n      if (cached) {\n        return cached;\n      }\n\n      var options;\n\n      if (chart.options.animation !== false) {\n        var config = me.chart.config;\n        var scopeKeys = config.datasetAnimationScopeKeys(me._type, transition);\n        var scopes = config.getOptionScopes(me.getDataset(), scopeKeys);\n        options = config.createResolver(scopes, me.getContext(index, active, transition));\n      }\n\n      var animations = new Animations(chart, options && options.animations);\n\n      if (options && options._cacheable) {\n        cache[cacheKey] = Object.freeze(animations);\n      }\n\n      return animations;\n    }\n  }, {\n    key: \"getSharedOptions\",\n    value: function getSharedOptions(options) {\n      if (!options.$shared) {\n        return;\n      }\n\n      return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n    }\n  }, {\n    key: \"includeOptions\",\n    value: function includeOptions(mode, sharedOptions) {\n      return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n    }\n  }, {\n    key: \"updateElement\",\n    value: function updateElement(element, index, properties, mode) {\n      if (isDirectUpdateMode(mode)) {\n        Object.assign(element, properties);\n      } else {\n        this._resolveAnimations(index, mode).update(element, properties);\n      }\n    }\n  }, {\n    key: \"updateSharedOptions\",\n    value: function updateSharedOptions(sharedOptions, mode, newOptions) {\n      if (sharedOptions && !isDirectUpdateMode(mode)) {\n        this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n      }\n    }\n  }, {\n    key: \"_setStyle\",\n    value: function _setStyle(element, index, mode, active) {\n      element.active = active;\n      var options = this.getStyle(index, active);\n\n      this._resolveAnimations(index, mode, active).update(element, {\n        options: !active && this.getSharedOptions(options) || options\n      });\n    }\n  }, {\n    key: \"removeHoverStyle\",\n    value: function removeHoverStyle(element, datasetIndex, index) {\n      this._setStyle(element, index, 'active', false);\n    }\n  }, {\n    key: \"setHoverStyle\",\n    value: function setHoverStyle(element, datasetIndex, index) {\n      this._setStyle(element, index, 'active', true);\n    }\n  }, {\n    key: \"_removeDatasetHoverStyle\",\n    value: function _removeDatasetHoverStyle() {\n      var element = this._cachedMeta.dataset;\n\n      if (element) {\n        this._setStyle(element, undefined, 'active', false);\n      }\n    }\n  }, {\n    key: \"_setDatasetHoverStyle\",\n    value: function _setDatasetHoverStyle() {\n      var element = this._cachedMeta.dataset;\n\n      if (element) {\n        this._setStyle(element, undefined, 'active', true);\n      }\n    }\n  }, {\n    key: \"_resyncElements\",\n    value: function _resyncElements(resetNewElements) {\n      var me = this;\n      var data = me._data;\n      var elements = me._cachedMeta.data;\n\n      var _iterator4 = _createForOfIteratorHelper(me._syncList),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _step4$value = Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(_step4.value, 3),\n              method = _step4$value[0],\n              arg1 = _step4$value[1],\n              arg2 = _step4$value[2];\n\n          me[method](arg1, arg2);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      me._syncList = [];\n      var numMeta = elements.length;\n      var numData = data.length;\n      var count = Math.min(numData, numMeta);\n\n      if (count) {\n        me.parse(0, count);\n      }\n\n      if (numData > numMeta) {\n        me._insertElements(numMeta, numData - numMeta, resetNewElements);\n      } else if (numData < numMeta) {\n        me._removeElements(numData, numMeta - numData);\n      }\n    }\n  }, {\n    key: \"_insertElements\",\n    value: function _insertElements(start, count) {\n      var resetNewElements = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var me = this;\n      var meta = me._cachedMeta;\n      var data = meta.data;\n      var end = start + count;\n      var i;\n\n      var move = function move(arr) {\n        arr.length += count;\n\n        for (i = arr.length - 1; i >= end; i--) {\n          arr[i] = arr[i - count];\n        }\n      };\n\n      move(data);\n\n      for (i = start; i < end; ++i) {\n        data[i] = new me.dataElementType();\n      }\n\n      if (me._parsing) {\n        move(meta._parsed);\n      }\n\n      me.parse(start, count);\n\n      if (resetNewElements) {\n        me.updateElements(data, start, count, 'reset');\n      }\n    }\n  }, {\n    key: \"updateElements\",\n    value: function updateElements(element, start, count, mode) {}\n  }, {\n    key: \"_removeElements\",\n    value: function _removeElements(start, count) {\n      var me = this;\n      var meta = me._cachedMeta;\n\n      if (me._parsing) {\n        var removed = meta._parsed.splice(start, count);\n\n        if (meta._stacked) {\n          clearStacks(meta, removed);\n        }\n      }\n\n      meta.data.splice(start, count);\n    }\n  }, {\n    key: \"_onDataPush\",\n    value: function _onDataPush() {\n      var count = arguments.length;\n\n      this._syncList.push(['_insertElements', this.getDataset().data.length - count, count]);\n    }\n  }, {\n    key: \"_onDataPop\",\n    value: function _onDataPop() {\n      this._syncList.push(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n    }\n  }, {\n    key: \"_onDataShift\",\n    value: function _onDataShift() {\n      this._syncList.push(['_removeElements', 0, 1]);\n    }\n  }, {\n    key: \"_onDataSplice\",\n    value: function _onDataSplice(start, count) {\n      this._syncList.push(['_removeElements', start, count]);\n\n      this._syncList.push(['_insertElements', start, arguments.length - 2]);\n    }\n  }, {\n    key: \"_onDataUnshift\",\n    value: function _onDataUnshift() {\n      this._syncList.push(['_insertElements', 0, arguments.length]);\n    }\n  }]);\n\n  return DatasetController;\n}();\n\nDatasetController.defaults = {};\nDatasetController.prototype.datasetElementType = null;\nDatasetController.prototype.dataElementType = null;\n\nfunction getAllScaleValues(scale) {\n  if (!scale._cache.$bar) {\n    var metas = scale.getMatchingVisibleMetas('bar');\n    var values = [];\n\n    for (var i = 0, ilen = metas.length; i < ilen; i++) {\n      values = values.concat(metas[i].controller.getAllParsedValues(scale));\n    }\n\n    scale._cache.$bar = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"_\"])(values.sort(function (a, b) {\n      return a - b;\n    }));\n  }\n\n  return scale._cache.$bar;\n}\n\nfunction computeMinSampleSize(scale) {\n  var values = getAllScaleValues(scale);\n  var min = scale._length;\n  var i, ilen, curr, prev;\n\n  var updateMinAndPrev = function updateMinAndPrev() {\n    if (curr === 32767 || curr === -32768) {\n      return;\n    }\n\n    if (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"h\"])(prev)) {\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n\n    prev = curr;\n  };\n\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n\n  prev = undefined;\n\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n\n  return min;\n}\n\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  var thickness = options.barThickness;\n  var size, ratio;\n\n  if (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"j\"])(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n\n  return {\n    chunk: size / stackCount,\n    ratio: ratio,\n    start: ruler.pixels[index] - size / 2\n  };\n}\n\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  var pixels = ruler.pixels;\n  var curr = pixels[index];\n  var prev = index > 0 ? pixels[index - 1] : null;\n  var next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  var percent = options.categoryPercentage;\n\n  if (prev === null) {\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n\n  if (next === null) {\n    next = curr + curr - prev;\n  }\n\n  var start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  var size = Math.abs(next - prev) / 2 * percent;\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start: start\n  };\n}\n\nfunction parseFloatBar(entry, item, vScale, i) {\n  var startValue = vScale.parse(entry[0], i);\n  var endValue = vScale.parse(entry[1], i);\n  var min = Math.min(startValue, endValue);\n  var max = Math.max(startValue, endValue);\n  var barStart = min;\n  var barEnd = max;\n\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n\n  item[vScale.axis] = barEnd;\n  item._custom = {\n    barStart: barStart,\n    barEnd: barEnd,\n    start: startValue,\n    end: endValue,\n    min: min,\n    max: max\n  };\n}\n\nfunction parseValue(entry, item, vScale, i) {\n  if (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"b\"])(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n\n  return item;\n}\n\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  var iScale = meta.iScale;\n  var vScale = meta.vScale;\n  var labels = iScale.getLabels();\n  var singleScale = iScale === vScale;\n  var parsed = [];\n  var i, ilen, item, entry;\n\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n\n  return parsed;\n}\n\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\n\nvar BarController = /*#__PURE__*/function (_DatasetController) {\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(BarController, _DatasetController);\n\n  var _super = _createSuper(BarController);\n\n  function BarController() {\n    Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this, BarController);\n\n    return _super.apply(this, arguments);\n  }\n\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(BarController, [{\n    key: \"parsePrimitiveData\",\n    value: function parsePrimitiveData(meta, data, start, count) {\n      return parseArrayOrPrimitive(meta, data, start, count);\n    }\n  }, {\n    key: \"parseArrayData\",\n    value: function parseArrayData(meta, data, start, count) {\n      return parseArrayOrPrimitive(meta, data, start, count);\n    }\n  }, {\n    key: \"parseObjectData\",\n    value: function parseObjectData(meta, data, start, count) {\n      var iScale = meta.iScale,\n          vScale = meta.vScale;\n      var _this$_parsing2 = this._parsing,\n          _this$_parsing2$xAxis = _this$_parsing2.xAxisKey,\n          xAxisKey = _this$_parsing2$xAxis === void 0 ? 'x' : _this$_parsing2$xAxis,\n          _this$_parsing2$yAxis = _this$_parsing2.yAxisKey,\n          yAxisKey = _this$_parsing2$yAxis === void 0 ? 'y' : _this$_parsing2$yAxis;\n      var iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n      var vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n      var parsed = [];\n      var i, ilen, item, obj;\n\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        obj = data[i];\n        item = {};\n        item[iScale.axis] = iScale.parse(Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"f\"])(obj, iAxisKey), i);\n        parsed.push(parseValue(Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"f\"])(obj, vAxisKey), item, vScale, i));\n      }\n\n      return parsed;\n    }\n  }, {\n    key: \"updateRangeFromParsed\",\n    value: function updateRangeFromParsed(range, scale, parsed, stack) {\n      Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(BarController.prototype), \"updateRangeFromParsed\", this).call(this, range, scale, parsed, stack);\n\n      var custom = parsed._custom;\n\n      if (custom && scale === this._cachedMeta.vScale) {\n        range.min = Math.min(range.min, custom.min);\n        range.max = Math.max(range.max, custom.max);\n      }\n    }\n  }, {\n    key: \"getLabelAndValue\",\n    value: function getLabelAndValue(index) {\n      var me = this;\n      var meta = me._cachedMeta;\n      var iScale = meta.iScale,\n          vScale = meta.vScale;\n      var parsed = me.getParsed(index);\n      var custom = parsed._custom;\n      var value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n      return {\n        label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n        value: value\n      };\n    }\n  }, {\n    key: \"initialize\",\n    value: function initialize() {\n      var me = this;\n      me.enableOptionSharing = true;\n\n      Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(BarController.prototype), \"initialize\", this).call(this);\n\n      var meta = me._cachedMeta;\n      meta.stack = me.getDataset().stack;\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {\n      var me = this;\n      var meta = me._cachedMeta;\n      me.updateElements(meta.data, 0, meta.data.length, mode);\n    }\n  }, {\n    key: \"updateElements\",\n    value: function updateElements(bars, start, count, mode) {\n      var me = this;\n      var reset = mode === 'reset';\n      var vScale = me._cachedMeta.vScale;\n      var base = vScale.getBasePixel();\n      var horizontal = vScale.isHorizontal();\n\n      var ruler = me._getRuler();\n\n      var firstOpts = me.resolveDataElementOptions(start, mode);\n      var sharedOptions = me.getSharedOptions(firstOpts);\n      var includeOptions = me.includeOptions(mode, sharedOptions);\n      me.updateSharedOptions(sharedOptions, mode, firstOpts);\n\n      for (var i = start; i < start + count; i++) {\n        var parsed = me.getParsed(i);\n        var vpixels = reset || Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"j\"])(parsed[vScale.axis]) ? {\n          base: base,\n          head: base\n        } : me._calculateBarValuePixels(i);\n\n        var ipixels = me._calculateBarIndexPixels(i, ruler);\n\n        var stack = (parsed._stacks || {})[vScale.axis];\n        var properties = {\n          horizontal: horizontal,\n          base: vpixels.base,\n          enableBorderRadius: !stack || isFloatBar(parsed._custom) || me.index === stack._top || me.index === stack._bottom,\n          x: horizontal ? vpixels.head : ipixels.center,\n          y: horizontal ? ipixels.center : vpixels.head,\n          height: horizontal ? ipixels.size : undefined,\n          width: horizontal ? undefined : ipixels.size\n        };\n\n        if (includeOptions) {\n          properties.options = sharedOptions || me.resolveDataElementOptions(i, mode);\n        }\n\n        me.updateElement(bars[i], i, properties, mode);\n      }\n    }\n  }, {\n    key: \"_getStacks\",\n    value: function _getStacks(last, dataIndex) {\n      var me = this;\n      var meta = me._cachedMeta;\n      var iScale = meta.iScale;\n      var metasets = iScale.getMatchingVisibleMetas(me._type);\n      var stacked = iScale.options.stacked;\n      var ilen = metasets.length;\n      var stacks = [];\n      var i, item;\n\n      for (i = 0; i < ilen; ++i) {\n        item = metasets[i];\n\n        if (typeof dataIndex !== 'undefined') {\n          var val = item.controller.getParsed(dataIndex)[item.controller._cachedMeta.vScale.axis];\n\n          if (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"j\"])(val) || isNaN(val)) {\n            continue;\n          }\n        }\n\n        if (stacked === false || stacks.indexOf(item.stack) === -1 || stacked === undefined && item.stack === undefined) {\n          stacks.push(item.stack);\n        }\n\n        if (item.index === last) {\n          break;\n        }\n      }\n\n      if (!stacks.length) {\n        stacks.push(undefined);\n      }\n\n      return stacks;\n    }\n  }, {\n    key: \"_getStackCount\",\n    value: function _getStackCount(index) {\n      return this._getStacks(undefined, index).length;\n    }\n  }, {\n    key: \"_getStackIndex\",\n    value: function _getStackIndex(datasetIndex, name, dataIndex) {\n      var stacks = this._getStacks(datasetIndex, dataIndex);\n\n      var index = name !== undefined ? stacks.indexOf(name) : -1;\n      return index === -1 ? stacks.length - 1 : index;\n    }\n  }, {\n    key: \"_getRuler\",\n    value: function _getRuler() {\n      var me = this;\n      var opts = me.options;\n      var meta = me._cachedMeta;\n      var iScale = meta.iScale;\n      var pixels = [];\n      var i, ilen;\n\n      for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n        pixels.push(iScale.getPixelForValue(me.getParsed(i)[iScale.axis], i));\n      }\n\n      var barThickness = opts.barThickness;\n      var min = barThickness || computeMinSampleSize(iScale);\n      return {\n        min: min,\n        pixels: pixels,\n        start: iScale._startPixel,\n        end: iScale._endPixel,\n        stackCount: me._getStackCount(),\n        scale: iScale,\n        grouped: opts.grouped,\n        ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n      };\n    }\n  }, {\n    key: \"_calculateBarValuePixels\",\n    value: function _calculateBarValuePixels(index) {\n      var me = this;\n      var _me$_cachedMeta = me._cachedMeta,\n          vScale = _me$_cachedMeta.vScale,\n          _stacked = _me$_cachedMeta._stacked;\n      var _me$options = me.options,\n          baseValue = _me$options.base,\n          minBarLength = _me$options.minBarLength;\n      var parsed = me.getParsed(index);\n      var custom = parsed._custom;\n      var floating = isFloatBar(custom);\n      var value = parsed[vScale.axis];\n      var start = 0;\n      var length = _stacked ? me.applyStack(vScale, parsed, _stacked) : value;\n      var head, size;\n\n      if (length !== value) {\n        start = length - value;\n        length = value;\n      }\n\n      if (floating) {\n        value = custom.barStart;\n        length = custom.barEnd - custom.barStart;\n\n        if (value !== 0 && Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"s\"])(value) !== Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"s\"])(custom.barEnd)) {\n          start = 0;\n        }\n\n        start += value;\n      }\n\n      var startValue = !Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"j\"])(baseValue) && !floating ? baseValue : start;\n      var base = vScale.getPixelForValue(startValue);\n\n      if (this.chart.getDataVisibility(index)) {\n        head = vScale.getPixelForValue(start + length);\n      } else {\n        head = base;\n      }\n\n      size = head - base;\n\n      if (minBarLength !== undefined && Math.abs(size) < minBarLength) {\n        size = size < 0 ? -minBarLength : minBarLength;\n\n        if (value === 0) {\n          base -= size / 2;\n        }\n\n        head = base + size;\n      }\n\n      var actualBase = baseValue || 0;\n\n      if (base === vScale.getPixelForValue(actualBase)) {\n        var halfGrid = vScale.getLineWidthForValue(actualBase) / 2;\n\n        if (size > 0) {\n          base += halfGrid;\n          size -= halfGrid;\n        } else if (size < 0) {\n          base -= halfGrid;\n          size += halfGrid;\n        }\n      }\n\n      return {\n        size: size,\n        base: base,\n        head: head,\n        center: head + size / 2\n      };\n    }\n  }, {\n    key: \"_calculateBarIndexPixels\",\n    value: function _calculateBarIndexPixels(index, ruler) {\n      var me = this;\n      var scale = ruler.scale;\n      var options = me.options;\n      var skipNull = options.skipNull;\n      var maxBarThickness = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"v\"])(options.maxBarThickness, Infinity);\n      var center, size;\n\n      if (ruler.grouped) {\n        var stackCount = skipNull ? me._getStackCount(index) : ruler.stackCount;\n        var range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n\n        var stackIndex = me._getStackIndex(me.index, me._cachedMeta.stack, skipNull ? index : undefined);\n\n        center = range.start + range.chunk * stackIndex + range.chunk / 2;\n        size = Math.min(maxBarThickness, range.chunk * range.ratio);\n      } else {\n        center = scale.getPixelForValue(me.getParsed(index)[scale.axis], index);\n        size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n      }\n\n      return {\n        base: center - size / 2,\n        head: center + size / 2,\n        center: center,\n        size: size\n      };\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var me = this;\n      var chart = me.chart;\n      var meta = me._cachedMeta;\n      var vScale = meta.vScale;\n      var rects = meta.data;\n      var ilen = rects.length;\n      var i = 0;\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"k\"])(chart.ctx, chart.chartArea);\n\n      for (; i < ilen; ++i) {\n        if (me.getParsed(i)[vScale.axis] !== null) {\n          rects[i].draw(me._ctx);\n        }\n      }\n\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"m\"])(chart.ctx);\n    }\n  }]);\n\n  return BarController;\n}(DatasetController);\n\nBarController.id = 'bar';\nBarController.defaults = {\n  datasetElementType: false,\n  dataElementType: 'bar',\n  categoryPercentage: 0.8,\n  barPercentage: 0.9,\n  grouped: true,\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'base', 'width', 'height']\n    }\n  }\n};\nBarController.overrides = {\n  interaction: {\n    mode: 'index'\n  },\n  scales: {\n    _index_: {\n      type: 'category',\n      offset: true,\n      grid: {\n        offset: true\n      }\n    },\n    _value_: {\n      type: 'linear',\n      beginAtZero: true\n    }\n  }\n};\n\nvar BubbleController = /*#__PURE__*/function (_DatasetController2) {\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(BubbleController, _DatasetController2);\n\n  var _super2 = _createSuper(BubbleController);\n\n  function BubbleController() {\n    Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this, BubbleController);\n\n    return _super2.apply(this, arguments);\n  }\n\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(BubbleController, [{\n    key: \"initialize\",\n    value: function initialize() {\n      this.enableOptionSharing = true;\n\n      Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(BubbleController.prototype), \"initialize\", this).call(this);\n    }\n  }, {\n    key: \"parseObjectData\",\n    value: function parseObjectData(meta, data, start, count) {\n      var xScale = meta.xScale,\n          yScale = meta.yScale;\n      var _this$_parsing3 = this._parsing,\n          _this$_parsing3$xAxis = _this$_parsing3.xAxisKey,\n          xAxisKey = _this$_parsing3$xAxis === void 0 ? 'x' : _this$_parsing3$xAxis,\n          _this$_parsing3$yAxis = _this$_parsing3.yAxisKey,\n          yAxisKey = _this$_parsing3$yAxis === void 0 ? 'y' : _this$_parsing3$yAxis;\n      var parsed = [];\n      var i, ilen, item;\n\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        item = data[i];\n        parsed.push({\n          x: xScale.parse(Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"f\"])(item, xAxisKey), i),\n          y: yScale.parse(Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"f\"])(item, yAxisKey), i),\n          _custom: item && item.r && +item.r\n        });\n      }\n\n      return parsed;\n    }\n  }, {\n    key: \"getMaxOverflow\",\n    value: function getMaxOverflow() {\n      var _this$_cachedMeta = this._cachedMeta,\n          data = _this$_cachedMeta.data,\n          _parsed = _this$_cachedMeta._parsed;\n      var max = 0;\n\n      for (var i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size() / 2, _parsed[i]._custom);\n      }\n\n      return max > 0 && max;\n    }\n  }, {\n    key: \"getLabelAndValue\",\n    value: function getLabelAndValue(index) {\n      var me = this;\n      var meta = me._cachedMeta;\n      var xScale = meta.xScale,\n          yScale = meta.yScale;\n      var parsed = me.getParsed(index);\n      var x = xScale.getLabelForValue(parsed.x);\n      var y = yScale.getLabelForValue(parsed.y);\n      var r = parsed._custom;\n      return {\n        label: meta.label,\n        value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n      };\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {\n      var me = this;\n      var points = me._cachedMeta.data;\n      me.updateElements(points, 0, points.length, mode);\n    }\n  }, {\n    key: \"updateElements\",\n    value: function updateElements(points, start, count, mode) {\n      var me = this;\n      var reset = mode === 'reset';\n      var _me$_cachedMeta2 = me._cachedMeta,\n          iScale = _me$_cachedMeta2.iScale,\n          vScale = _me$_cachedMeta2.vScale;\n      var firstOpts = me.resolveDataElementOptions(start, mode);\n      var sharedOptions = me.getSharedOptions(firstOpts);\n      var includeOptions = me.includeOptions(mode, sharedOptions);\n      var iAxis = iScale.axis;\n      var vAxis = vScale.axis;\n\n      for (var i = start; i < start + count; i++) {\n        var point = points[i];\n        var parsed = !reset && me.getParsed(i);\n        var properties = {};\n        var iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n        var vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n        properties.skip = isNaN(iPixel) || isNaN(vPixel);\n\n        if (includeOptions) {\n          properties.options = me.resolveDataElementOptions(i, mode);\n\n          if (reset) {\n            properties.options.radius = 0;\n          }\n        }\n\n        me.updateElement(point, i, properties, mode);\n      }\n\n      me.updateSharedOptions(sharedOptions, mode, firstOpts);\n    }\n  }, {\n    key: \"resolveDataElementOptions\",\n    value: function resolveDataElementOptions(index, mode) {\n      var parsed = this.getParsed(index);\n\n      var values = Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(BubbleController.prototype), \"resolveDataElementOptions\", this).call(this, index, mode);\n\n      if (values.$shared) {\n        values = Object.assign({}, values, {\n          $shared: false\n        });\n      }\n\n      var radius = values.radius;\n\n      if (mode !== 'active') {\n        values.radius = 0;\n      }\n\n      values.radius += Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"v\"])(parsed && parsed._custom, radius);\n      return values;\n    }\n  }]);\n\n  return BubbleController;\n}(DatasetController);\n\nBubbleController.id = 'bubble';\nBubbleController.defaults = {\n  datasetElementType: false,\n  dataElementType: 'point',\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'borderWidth', 'radius']\n    }\n  }\n};\nBubbleController.overrides = {\n  scales: {\n    x: {\n      type: 'linear'\n    },\n    y: {\n      type: 'linear'\n    }\n  },\n  plugins: {\n    tooltip: {\n      callbacks: {\n        title: function title() {\n          return '';\n        }\n      }\n    }\n  }\n};\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  var ratioX = 1;\n  var ratioY = 1;\n  var offsetX = 0;\n  var offsetY = 0;\n\n  if (circumference < _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"T\"]) {\n    var startAngle = rotation;\n    var endAngle = startAngle + circumference;\n    var startX = Math.cos(startAngle);\n    var startY = Math.sin(startAngle);\n    var endX = Math.cos(endAngle);\n    var endY = Math.sin(endAngle);\n\n    var calcMax = function calcMax(angle, a, b) {\n      return Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"q\"])(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    };\n\n    var calcMin = function calcMin(angle, a, b) {\n      return Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"q\"])(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    };\n\n    var maxX = calcMax(0, startX, endX);\n    var maxY = calcMax(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"H\"], startY, endY);\n    var minX = calcMin(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"P\"], startX, endX);\n    var minY = calcMin(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"P\"] + _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"H\"], startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n\n  return {\n    ratioX: ratioX,\n    ratioY: ratioY,\n    offsetX: offsetX,\n    offsetY: offsetY\n  };\n}\n\nvar DoughnutController = /*#__PURE__*/function (_DatasetController3) {\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(DoughnutController, _DatasetController3);\n\n  var _super3 = _createSuper(DoughnutController);\n\n  function DoughnutController(chart, datasetIndex) {\n    var _this;\n\n    Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this, DoughnutController);\n\n    _this = _super3.call(this, chart, datasetIndex);\n    _this.enableOptionSharing = true;\n    _this.innerRadius = undefined;\n    _this.outerRadius = undefined;\n    _this.offsetX = undefined;\n    _this.offsetY = undefined;\n    return _this;\n  }\n\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(DoughnutController, [{\n    key: \"linkScales\",\n    value: function linkScales() {}\n  }, {\n    key: \"parse\",\n    value: function parse(start, count) {\n      var data = this.getDataset().data;\n      var meta = this._cachedMeta;\n      var i, ilen;\n\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = +data[i];\n      }\n    }\n  }, {\n    key: \"_getRotation\",\n    value: function _getRotation() {\n      return Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"t\"])(this.options.rotation - 90);\n    }\n  }, {\n    key: \"_getCircumference\",\n    value: function _getCircumference() {\n      return Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"t\"])(this.options.circumference);\n    }\n  }, {\n    key: \"_getRotationExtents\",\n    value: function _getRotationExtents() {\n      var min = _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"T\"];\n      var max = -_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"T\"];\n      var me = this;\n\n      for (var i = 0; i < me.chart.data.datasets.length; ++i) {\n        if (me.chart.isDatasetVisible(i)) {\n          var controller = me.chart.getDatasetMeta(i).controller;\n\n          var rotation = controller._getRotation();\n\n          var circumference = controller._getCircumference();\n\n          min = Math.min(min, rotation);\n          max = Math.max(max, rotation + circumference);\n        }\n      }\n\n      return {\n        rotation: min,\n        circumference: max - min\n      };\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {\n      var me = this;\n      var chart = me.chart;\n      var chartArea = chart.chartArea;\n      var meta = me._cachedMeta;\n      var arcs = meta.data;\n      var spacing = me.getMaxBorderWidth() + me.getMaxOffset(arcs);\n      var maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n      var cutout = Math.min(Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"n\"])(me.options.cutout, maxSize), 1);\n\n      var chartWeight = me._getRingWeight(me.index);\n\n      var _me$_getRotationExten = me._getRotationExtents(),\n          circumference = _me$_getRotationExten.circumference,\n          rotation = _me$_getRotationExten.rotation;\n\n      var _getRatioAndOffset = getRatioAndOffset(rotation, circumference, cutout),\n          ratioX = _getRatioAndOffset.ratioX,\n          ratioY = _getRatioAndOffset.ratioY,\n          offsetX = _getRatioAndOffset.offsetX,\n          offsetY = _getRatioAndOffset.offsetY;\n\n      var maxWidth = (chartArea.width - spacing) / ratioX;\n      var maxHeight = (chartArea.height - spacing) / ratioY;\n      var maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n      var outerRadius = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"o\"])(me.options.radius, maxRadius);\n      var innerRadius = Math.max(outerRadius * cutout, 0);\n\n      var radiusLength = (outerRadius - innerRadius) / me._getVisibleDatasetWeightTotal();\n\n      me.offsetX = offsetX * outerRadius;\n      me.offsetY = offsetY * outerRadius;\n      meta.total = me.calculateTotal();\n      me.outerRadius = outerRadius - radiusLength * me._getRingWeightOffset(me.index);\n      me.innerRadius = Math.max(me.outerRadius - radiusLength * chartWeight, 0);\n      me.updateElements(arcs, 0, arcs.length, mode);\n    }\n  }, {\n    key: \"_circumference\",\n    value: function _circumference(i, reset) {\n      var me = this;\n      var opts = me.options;\n      var meta = me._cachedMeta;\n\n      var circumference = me._getCircumference();\n\n      if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null) {\n        return 0;\n      }\n\n      return me.calculateCircumference(meta._parsed[i] * circumference / _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"T\"]);\n    }\n  }, {\n    key: \"updateElements\",\n    value: function updateElements(arcs, start, count, mode) {\n      var me = this;\n      var reset = mode === 'reset';\n      var chart = me.chart;\n      var chartArea = chart.chartArea;\n      var opts = chart.options;\n      var animationOpts = opts.animation;\n      var centerX = (chartArea.left + chartArea.right) / 2;\n      var centerY = (chartArea.top + chartArea.bottom) / 2;\n      var animateScale = reset && animationOpts.animateScale;\n      var innerRadius = animateScale ? 0 : me.innerRadius;\n      var outerRadius = animateScale ? 0 : me.outerRadius;\n      var firstOpts = me.resolveDataElementOptions(start, mode);\n      var sharedOptions = me.getSharedOptions(firstOpts);\n      var includeOptions = me.includeOptions(mode, sharedOptions);\n\n      var startAngle = me._getRotation();\n\n      var i;\n\n      for (i = 0; i < start; ++i) {\n        startAngle += me._circumference(i, reset);\n      }\n\n      for (i = start; i < start + count; ++i) {\n        var circumference = me._circumference(i, reset);\n\n        var arc = arcs[i];\n        var properties = {\n          x: centerX + me.offsetX,\n          y: centerY + me.offsetY,\n          startAngle: startAngle,\n          endAngle: startAngle + circumference,\n          circumference: circumference,\n          outerRadius: outerRadius,\n          innerRadius: innerRadius\n        };\n\n        if (includeOptions) {\n          properties.options = sharedOptions || me.resolveDataElementOptions(i, mode);\n        }\n\n        startAngle += circumference;\n        me.updateElement(arc, i, properties, mode);\n      }\n\n      me.updateSharedOptions(sharedOptions, mode, firstOpts);\n    }\n  }, {\n    key: \"calculateTotal\",\n    value: function calculateTotal() {\n      var meta = this._cachedMeta;\n      var metaData = meta.data;\n      var total = 0;\n      var i;\n\n      for (i = 0; i < metaData.length; i++) {\n        var value = meta._parsed[i];\n\n        if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i)) {\n          total += Math.abs(value);\n        }\n      }\n\n      return total;\n    }\n  }, {\n    key: \"calculateCircumference\",\n    value: function calculateCircumference(value) {\n      var total = this._cachedMeta.total;\n\n      if (total > 0 && !isNaN(value)) {\n        return _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"T\"] * (Math.abs(value) / total);\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"getLabelAndValue\",\n    value: function getLabelAndValue(index) {\n      var me = this;\n      var meta = me._cachedMeta;\n      var chart = me.chart;\n      var labels = chart.data.labels || [];\n      var value = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"p\"])(meta._parsed[index], chart.options.locale);\n      return {\n        label: labels[index] || '',\n        value: value\n      };\n    }\n  }, {\n    key: \"getMaxBorderWidth\",\n    value: function getMaxBorderWidth(arcs) {\n      var me = this;\n      var max = 0;\n      var chart = me.chart;\n      var i, ilen, meta, controller, options;\n\n      if (!arcs) {\n        for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n          if (chart.isDatasetVisible(i)) {\n            meta = chart.getDatasetMeta(i);\n            arcs = meta.data;\n            controller = meta.controller;\n\n            if (controller !== me) {\n              controller.configure();\n            }\n\n            break;\n          }\n        }\n      }\n\n      if (!arcs) {\n        return 0;\n      }\n\n      for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n        options = controller.resolveDataElementOptions(i);\n\n        if (options.borderAlign !== 'inner') {\n          max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n        }\n      }\n\n      return max;\n    }\n  }, {\n    key: \"getMaxOffset\",\n    value: function getMaxOffset(arcs) {\n      var max = 0;\n\n      for (var i = 0, ilen = arcs.length; i < ilen; ++i) {\n        var options = this.resolveDataElementOptions(i);\n        max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n      }\n\n      return max;\n    }\n  }, {\n    key: \"_getRingWeightOffset\",\n    value: function _getRingWeightOffset(datasetIndex) {\n      var ringWeightOffset = 0;\n\n      for (var i = 0; i < datasetIndex; ++i) {\n        if (this.chart.isDatasetVisible(i)) {\n          ringWeightOffset += this._getRingWeight(i);\n        }\n      }\n\n      return ringWeightOffset;\n    }\n  }, {\n    key: \"_getRingWeight\",\n    value: function _getRingWeight(datasetIndex) {\n      return Math.max(Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"v\"])(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n    }\n  }, {\n    key: \"_getVisibleDatasetWeightTotal\",\n    value: function _getVisibleDatasetWeightTotal() {\n      return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n    }\n  }]);\n\n  return DoughnutController;\n}(DatasetController);\n\nDoughnutController.id = 'doughnut';\nDoughnutController.defaults = {\n  datasetElementType: false,\n  dataElementType: 'arc',\n  animation: {\n    animateRotate: true,\n    animateScale: false\n  },\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth']\n    }\n  },\n  cutout: '50%',\n  rotation: 0,\n  circumference: 360,\n  radius: '100%',\n  indexAxis: 'r'\n};\nDoughnutController.overrides = {\n  aspectRatio: 1,\n  plugins: {\n    legend: {\n      labels: {\n        generateLabels: function generateLabels(chart) {\n          var data = chart.data;\n\n          if (data.labels.length && data.datasets.length) {\n            return data.labels.map(function (label, i) {\n              var meta = chart.getDatasetMeta(0);\n              var style = meta.controller.getStyle(i);\n              return {\n                text: label,\n                fillStyle: style.backgroundColor,\n                strokeStyle: style.borderColor,\n                lineWidth: style.borderWidth,\n                hidden: !chart.getDataVisibility(i),\n                index: i\n              };\n            });\n          }\n\n          return [];\n        }\n      },\n      onClick: function onClick(e, legendItem, legend) {\n        legend.chart.toggleDataVisibility(legendItem.index);\n        legend.chart.update();\n      }\n    },\n    tooltip: {\n      callbacks: {\n        title: function title() {\n          return '';\n        },\n        label: function label(tooltipItem) {\n          var dataLabel = tooltipItem.label;\n          var value = ': ' + tooltipItem.formattedValue;\n\n          if (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"b\"])(dataLabel)) {\n            dataLabel = dataLabel.slice();\n            dataLabel[0] += value;\n          } else {\n            dataLabel += value;\n          }\n\n          return dataLabel;\n        }\n      }\n    }\n  }\n};\n\nvar LineController = /*#__PURE__*/function (_DatasetController4) {\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(LineController, _DatasetController4);\n\n  var _super4 = _createSuper(LineController);\n\n  function LineController() {\n    Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this, LineController);\n\n    return _super4.apply(this, arguments);\n  }\n\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(LineController, [{\n    key: \"initialize\",\n    value: function initialize() {\n      this.enableOptionSharing = true;\n\n      Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(LineController.prototype), \"initialize\", this).call(this);\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {\n      var me = this;\n      var meta = me._cachedMeta;\n      var line = meta.dataset,\n          _meta$data = meta.data,\n          points = _meta$data === void 0 ? [] : _meta$data,\n          _dataset = meta._dataset;\n      var animationsDisabled = me.chart._animationsDisabled;\n\n      var _getStartAndCountOfVi = getStartAndCountOfVisiblePoints(meta, points, animationsDisabled),\n          start = _getStartAndCountOfVi.start,\n          count = _getStartAndCountOfVi.count;\n\n      me._drawStart = start;\n      me._drawCount = count;\n\n      if (scaleRangesChanged(meta)) {\n        start = 0;\n        count = points.length;\n      }\n\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n      var options = me.resolveDatasetElementOptions(mode);\n\n      if (!me.options.showLine) {\n        options.borderWidth = 0;\n      }\n\n      options.segment = me.options.segment;\n      me.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options: options\n      }, mode);\n      me.updateElements(points, start, count, mode);\n    }\n  }, {\n    key: \"updateElements\",\n    value: function updateElements(points, start, count, mode) {\n      var me = this;\n      var reset = mode === 'reset';\n      var _me$_cachedMeta3 = me._cachedMeta,\n          iScale = _me$_cachedMeta3.iScale,\n          vScale = _me$_cachedMeta3.vScale,\n          _stacked = _me$_cachedMeta3._stacked;\n      var firstOpts = me.resolveDataElementOptions(start, mode);\n      var sharedOptions = me.getSharedOptions(firstOpts);\n      var includeOptions = me.includeOptions(mode, sharedOptions);\n      var iAxis = iScale.axis;\n      var vAxis = vScale.axis;\n      var spanGaps = me.options.spanGaps;\n      var maxGapLength = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"w\"])(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n      var directUpdate = me.chart._animationsDisabled || reset || mode === 'none';\n      var prevParsed = start > 0 && me.getParsed(start - 1);\n\n      for (var i = start; i < start + count; ++i) {\n        var point = points[i];\n        var parsed = me.getParsed(i);\n        var properties = directUpdate ? point : {};\n        var nullData = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"j\"])(parsed[vAxis]);\n        var iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n        var vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? me.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n        properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n        properties.stop = i > 0 && parsed[iAxis] - prevParsed[iAxis] > maxGapLength;\n        properties.parsed = parsed;\n\n        if (includeOptions) {\n          properties.options = sharedOptions || me.resolveDataElementOptions(i, mode);\n        }\n\n        if (!directUpdate) {\n          me.updateElement(point, i, properties, mode);\n        }\n\n        prevParsed = parsed;\n      }\n\n      me.updateSharedOptions(sharedOptions, mode, firstOpts);\n    }\n  }, {\n    key: \"getMaxOverflow\",\n    value: function getMaxOverflow() {\n      var me = this;\n      var meta = me._cachedMeta;\n      var dataset = meta.dataset;\n      var border = dataset.options && dataset.options.borderWidth || 0;\n      var data = meta.data || [];\n\n      if (!data.length) {\n        return border;\n      }\n\n      var firstPoint = data[0].size(me.resolveDataElementOptions(0));\n      var lastPoint = data[data.length - 1].size(me.resolveDataElementOptions(data.length - 1));\n      return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var meta = this._cachedMeta;\n      meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n\n      Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(LineController.prototype), \"draw\", this).call(this);\n    }\n  }]);\n\n  return LineController;\n}(DatasetController);\n\nLineController.id = 'line';\nLineController.defaults = {\n  datasetElementType: 'line',\n  dataElementType: 'point',\n  showLine: true,\n  spanGaps: false\n};\nLineController.overrides = {\n  scales: {\n    _index_: {\n      type: 'category'\n    },\n    _value_: {\n      type: 'linear'\n    }\n  }\n};\n\nfunction getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {\n  var pointCount = points.length;\n  var start = 0;\n  var count = pointCount;\n\n  if (meta._sorted) {\n    var iScale = meta.iScale,\n        _parsed = meta._parsed;\n    var axis = iScale.axis;\n\n    var _iScale$getUserBounds = iScale.getUserBounds(),\n        min = _iScale$getUserBounds.min,\n        max = _iScale$getUserBounds.max,\n        minDefined = _iScale$getUserBounds.minDefined,\n        maxDefined = _iScale$getUserBounds.maxDefined;\n\n    if (minDefined) {\n      start = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"x\"])(Math.min(Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"y\"])(_parsed, iScale.axis, min).lo, animationsDisabled ? pointCount : Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"y\"])(points, axis, iScale.getPixelForValue(min)).lo), 0, pointCount - 1);\n    }\n\n    if (maxDefined) {\n      count = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"x\"])(Math.max(Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"y\"])(_parsed, iScale.axis, max).hi + 1, animationsDisabled ? 0 : Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"y\"])(points, axis, iScale.getPixelForValue(max)).hi + 1), start, pointCount) - start;\n    } else {\n      count = pointCount - start;\n    }\n  }\n\n  return {\n    start: start,\n    count: count\n  };\n}\n\nfunction scaleRangesChanged(meta) {\n  var xScale = meta.xScale,\n      yScale = meta.yScale,\n      _scaleRanges = meta._scaleRanges;\n  var newRanges = {\n    xmin: xScale.min,\n    xmax: xScale.max,\n    ymin: yScale.min,\n    ymax: yScale.max\n  };\n\n  if (!_scaleRanges) {\n    meta._scaleRanges = newRanges;\n    return true;\n  }\n\n  var changed = _scaleRanges.xmin !== xScale.min || _scaleRanges.xmax !== xScale.max || _scaleRanges.ymin !== yScale.min || _scaleRanges.ymax !== yScale.max;\n  Object.assign(_scaleRanges, newRanges);\n  return changed;\n}\n\nvar PolarAreaController = /*#__PURE__*/function (_DatasetController5) {\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(PolarAreaController, _DatasetController5);\n\n  var _super5 = _createSuper(PolarAreaController);\n\n  function PolarAreaController(chart, datasetIndex) {\n    var _this2;\n\n    Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this, PolarAreaController);\n\n    _this2 = _super5.call(this, chart, datasetIndex);\n    _this2.innerRadius = undefined;\n    _this2.outerRadius = undefined;\n    return _this2;\n  }\n\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(PolarAreaController, [{\n    key: \"getLabelAndValue\",\n    value: function getLabelAndValue(index) {\n      var me = this;\n      var meta = me._cachedMeta;\n      var chart = me.chart;\n      var labels = chart.data.labels || [];\n      var value = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"p\"])(meta._parsed[index].r, chart.options.locale);\n      return {\n        label: labels[index] || '',\n        value: value\n      };\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {\n      var arcs = this._cachedMeta.data;\n\n      this._updateRadius();\n\n      this.updateElements(arcs, 0, arcs.length, mode);\n    }\n  }, {\n    key: \"_updateRadius\",\n    value: function _updateRadius() {\n      var me = this;\n      var chart = me.chart;\n      var chartArea = chart.chartArea;\n      var opts = chart.options;\n      var minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n      var outerRadius = Math.max(minSize / 2, 0);\n      var innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n      var radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n      me.outerRadius = outerRadius - radiusLength * me.index;\n      me.innerRadius = me.outerRadius - radiusLength;\n    }\n  }, {\n    key: \"updateElements\",\n    value: function updateElements(arcs, start, count, mode) {\n      var me = this;\n      var reset = mode === 'reset';\n      var chart = me.chart;\n      var dataset = me.getDataset();\n      var opts = chart.options;\n      var animationOpts = opts.animation;\n      var scale = me._cachedMeta.rScale;\n      var centerX = scale.xCenter;\n      var centerY = scale.yCenter;\n      var datasetStartAngle = scale.getIndexAngle(0) - 0.5 * _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"P\"];\n      var angle = datasetStartAngle;\n      var i;\n      var defaultAngle = 360 / me.countVisibleElements();\n\n      for (i = 0; i < start; ++i) {\n        angle += me._computeAngle(i, mode, defaultAngle);\n      }\n\n      for (i = start; i < start + count; i++) {\n        var arc = arcs[i];\n        var startAngle = angle;\n\n        var endAngle = angle + me._computeAngle(i, mode, defaultAngle);\n\n        var outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(dataset.data[i]) : 0;\n        angle = endAngle;\n\n        if (reset) {\n          if (animationOpts.animateScale) {\n            outerRadius = 0;\n          }\n\n          if (animationOpts.animateRotate) {\n            startAngle = endAngle = datasetStartAngle;\n          }\n        }\n\n        var properties = {\n          x: centerX,\n          y: centerY,\n          innerRadius: 0,\n          outerRadius: outerRadius,\n          startAngle: startAngle,\n          endAngle: endAngle,\n          options: me.resolveDataElementOptions(i, mode)\n        };\n        me.updateElement(arc, i, properties, mode);\n      }\n    }\n  }, {\n    key: \"countVisibleElements\",\n    value: function countVisibleElements() {\n      var _this3 = this;\n\n      var dataset = this.getDataset();\n      var meta = this._cachedMeta;\n      var count = 0;\n      meta.data.forEach(function (element, index) {\n        if (!isNaN(dataset.data[index]) && _this3.chart.getDataVisibility(index)) {\n          count++;\n        }\n      });\n      return count;\n    }\n  }, {\n    key: \"_computeAngle\",\n    value: function _computeAngle(index, mode, defaultAngle) {\n      return this.chart.getDataVisibility(index) ? Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"t\"])(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n    }\n  }]);\n\n  return PolarAreaController;\n}(DatasetController);\n\nPolarAreaController.id = 'polarArea';\nPolarAreaController.defaults = {\n  dataElementType: 'arc',\n  animation: {\n    animateRotate: true,\n    animateScale: true\n  },\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n    }\n  },\n  indexAxis: 'r',\n  startAngle: 0\n};\nPolarAreaController.overrides = {\n  aspectRatio: 1,\n  plugins: {\n    legend: {\n      labels: {\n        generateLabels: function generateLabels(chart) {\n          var data = chart.data;\n\n          if (data.labels.length && data.datasets.length) {\n            return data.labels.map(function (label, i) {\n              var meta = chart.getDatasetMeta(0);\n              var style = meta.controller.getStyle(i);\n              return {\n                text: label,\n                fillStyle: style.backgroundColor,\n                strokeStyle: style.borderColor,\n                lineWidth: style.borderWidth,\n                hidden: !chart.getDataVisibility(i),\n                index: i\n              };\n            });\n          }\n\n          return [];\n        }\n      },\n      onClick: function onClick(e, legendItem, legend) {\n        legend.chart.toggleDataVisibility(legendItem.index);\n        legend.chart.update();\n      }\n    },\n    tooltip: {\n      callbacks: {\n        title: function title() {\n          return '';\n        },\n        label: function label(context) {\n          return context.chart.data.labels[context.dataIndex] + ': ' + context.formattedValue;\n        }\n      }\n    }\n  },\n  scales: {\n    r: {\n      type: 'radialLinear',\n      angleLines: {\n        display: false\n      },\n      beginAtZero: true,\n      grid: {\n        circular: true\n      },\n      pointLabels: {\n        display: false\n      },\n      startAngle: 0\n    }\n  }\n};\n\nvar PieController = /*#__PURE__*/function (_DoughnutController) {\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(PieController, _DoughnutController);\n\n  var _super6 = _createSuper(PieController);\n\n  function PieController() {\n    Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this, PieController);\n\n    return _super6.apply(this, arguments);\n  }\n\n  return PieController;\n}(DoughnutController);\n\nPieController.id = 'pie';\nPieController.defaults = {\n  cutout: 0,\n  rotation: 0,\n  circumference: 360,\n  radius: '100%'\n};\n\nvar RadarController = /*#__PURE__*/function (_DatasetController6) {\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(RadarController, _DatasetController6);\n\n  var _super7 = _createSuper(RadarController);\n\n  function RadarController() {\n    Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this, RadarController);\n\n    return _super7.apply(this, arguments);\n  }\n\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(RadarController, [{\n    key: \"getLabelAndValue\",\n    value: function getLabelAndValue(index) {\n      var me = this;\n      var vScale = me._cachedMeta.vScale;\n      var parsed = me.getParsed(index);\n      return {\n        label: vScale.getLabels()[index],\n        value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n      };\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {\n      var me = this;\n      var meta = me._cachedMeta;\n      var line = meta.dataset;\n      var points = meta.data || [];\n      var labels = meta.iScale.getLabels();\n      line.points = points;\n\n      if (mode !== 'resize') {\n        var options = me.resolveDatasetElementOptions(mode);\n\n        if (!me.options.showLine) {\n          options.borderWidth = 0;\n        }\n\n        var properties = {\n          _loop: true,\n          _fullLoop: labels.length === points.length,\n          options: options\n        };\n        me.updateElement(line, undefined, properties, mode);\n      }\n\n      me.updateElements(points, 0, points.length, mode);\n    }\n  }, {\n    key: \"updateElements\",\n    value: function updateElements(points, start, count, mode) {\n      var me = this;\n      var dataset = me.getDataset();\n      var scale = me._cachedMeta.rScale;\n      var reset = mode === 'reset';\n\n      for (var i = start; i < start + count; i++) {\n        var point = points[i];\n        var options = me.resolveDataElementOptions(i, mode);\n        var pointPosition = scale.getPointPositionForValue(i, dataset.data[i]);\n        var x = reset ? scale.xCenter : pointPosition.x;\n        var y = reset ? scale.yCenter : pointPosition.y;\n        var properties = {\n          x: x,\n          y: y,\n          angle: pointPosition.angle,\n          skip: isNaN(x) || isNaN(y),\n          options: options\n        };\n        me.updateElement(point, i, properties, mode);\n      }\n    }\n  }]);\n\n  return RadarController;\n}(DatasetController);\n\nRadarController.id = 'radar';\nRadarController.defaults = {\n  datasetElementType: 'line',\n  dataElementType: 'point',\n  indexAxis: 'r',\n  showLine: true,\n  elements: {\n    line: {\n      fill: 'start'\n    }\n  }\n};\nRadarController.overrides = {\n  aspectRatio: 1,\n  scales: {\n    r: {\n      type: 'radialLinear'\n    }\n  }\n};\n\nvar ScatterController = /*#__PURE__*/function (_LineController) {\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(ScatterController, _LineController);\n\n  var _super8 = _createSuper(ScatterController);\n\n  function ScatterController() {\n    Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this, ScatterController);\n\n    return _super8.apply(this, arguments);\n  }\n\n  return ScatterController;\n}(LineController);\n\nScatterController.id = 'scatter';\nScatterController.defaults = {\n  showLine: false,\n  fill: false\n};\nScatterController.overrides = {\n  interaction: {\n    mode: 'point'\n  },\n  plugins: {\n    tooltip: {\n      callbacks: {\n        title: function title() {\n          return '';\n        },\n        label: function label(item) {\n          return '(' + item.label + ', ' + item.formattedValue + ')';\n        }\n      }\n    }\n  },\n  scales: {\n    x: {\n      type: 'linear'\n    },\n    y: {\n      type: 'linear'\n    }\n  }\n};\nvar controllers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  BarController: BarController,\n  BubbleController: BubbleController,\n  DoughnutController: DoughnutController,\n  LineController: LineController,\n  PolarAreaController: PolarAreaController,\n  PieController: PieController,\n  RadarController: RadarController,\n  ScatterController: ScatterController\n});\n\nfunction _abstract() {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n\nvar DateAdapter = /*#__PURE__*/function () {\n  function DateAdapter(options) {\n    Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this, DateAdapter);\n\n    this.options = options || {};\n  }\n\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(DateAdapter, [{\n    key: \"formats\",\n    value: function formats() {\n      return _abstract();\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(value, format) {\n      return _abstract();\n    }\n  }, {\n    key: \"format\",\n    value: function format(timestamp, _format) {\n      return _abstract();\n    }\n  }, {\n    key: \"add\",\n    value: function add(timestamp, amount, unit) {\n      return _abstract();\n    }\n  }, {\n    key: \"diff\",\n    value: function diff(a, b, unit) {\n      return _abstract();\n    }\n  }, {\n    key: \"startOf\",\n    value: function startOf(timestamp, unit, weekday) {\n      return _abstract();\n    }\n  }, {\n    key: \"endOf\",\n    value: function endOf(timestamp, unit) {\n      return _abstract();\n    }\n  }]);\n\n  return DateAdapter;\n}();\n\nDateAdapter.override = function (members) {\n  Object.assign(DateAdapter.prototype, members);\n};\n\nvar adapters = {\n  _date: DateAdapter\n};\n\nfunction getRelativePosition(e, chart) {\n  if ('native' in e) {\n    return {\n      x: e.x,\n      y: e.y\n    };\n  }\n\n  return Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"z\"])(e, chart);\n}\n\nfunction evaluateAllVisibleItems(chart, handler) {\n  var metasets = chart.getSortedVisibleDatasetMetas();\n  var index, data, element;\n\n  for (var i = 0, ilen = metasets.length; i < ilen; ++i) {\n    var _metasets$i = metasets[i];\n    index = _metasets$i.index;\n    data = _metasets$i.data;\n\n    for (var j = 0, jlen = data.length; j < jlen; ++j) {\n      element = data[j];\n\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\n\nfunction binarySearch(metaset, axis, value, intersect) {\n  var controller = metaset.controller,\n      data = metaset.data,\n      _sorted = metaset._sorted;\n  var iScale = controller._cachedMeta.iScale;\n\n  if (iScale && axis === iScale.axis && _sorted && data.length) {\n    var lookupMethod = iScale._reversePixels ? _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"B\"] : _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"y\"];\n\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      var el = data[0];\n      var range = typeof el.getRange === 'function' && el.getRange(axis);\n\n      if (range) {\n        var start = lookupMethod(data, axis, value - range);\n        var end = lookupMethod(data, axis, value + range);\n        return {\n          lo: start.lo,\n          hi: end.hi\n        };\n      }\n    }\n  }\n\n  return {\n    lo: 0,\n    hi: data.length - 1\n  };\n}\n\nfunction optimizedEvaluateItems(chart, axis, position, handler, intersect) {\n  var metasets = chart.getSortedVisibleDatasetMetas();\n  var value = position[axis];\n\n  for (var i = 0, ilen = metasets.length; i < ilen; ++i) {\n    var _metasets$i2 = metasets[i],\n        index = _metasets$i2.index,\n        data = _metasets$i2.data;\n\n    var _binarySearch = binarySearch(metasets[i], axis, value, intersect),\n        lo = _binarySearch.lo,\n        hi = _binarySearch.hi;\n\n    for (var j = lo; j <= hi; ++j) {\n      var element = data[j];\n\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\n\nfunction getDistanceMetricForAxis(axis) {\n  var useX = axis.indexOf('x') !== -1;\n  var useY = axis.indexOf('y') !== -1;\n  return function (pt1, pt2) {\n    var deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    var deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\n\nfunction getIntersectItems(chart, position, axis, useFinalPosition) {\n  var items = [];\n\n  if (!Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"A\"])(position, chart.chartArea, chart._minPadding)) {\n    return items;\n  }\n\n  var evaluationFunc = function evaluationFunc(element, datasetIndex, index) {\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({\n        element: element,\n        datasetIndex: datasetIndex,\n        index: index\n      });\n    }\n  };\n\n  optimizedEvaluateItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\n\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition) {\n  var distanceMetric = getDistanceMetricForAxis(axis);\n  var minDistance = Number.POSITIVE_INFINITY;\n  var items = [];\n\n  if (!Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"A\"])(position, chart.chartArea, chart._minPadding)) {\n    return items;\n  }\n\n  var evaluationFunc = function evaluationFunc(element, datasetIndex, index) {\n    if (intersect && !element.inRange(position.x, position.y, useFinalPosition)) {\n      return;\n    }\n\n    var center = element.getCenterPoint(useFinalPosition);\n\n    if (!Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"A\"])(center, chart.chartArea, chart._minPadding)) {\n      return;\n    }\n\n    var distance = distanceMetric(position, center);\n\n    if (distance < minDistance) {\n      items = [{\n        element: element,\n        datasetIndex: datasetIndex,\n        index: index\n      }];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      items.push({\n        element: element,\n        datasetIndex: datasetIndex,\n        index: index\n      });\n    }\n  };\n\n  optimizedEvaluateItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\nfunction getAxisItems(chart, e, options, useFinalPosition) {\n  var position = getRelativePosition(e, chart);\n  var items = [];\n  var axis = options.axis;\n  var rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  var intersectsItem = false;\n  evaluateAllVisibleItems(chart, function (element, datasetIndex, index) {\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({\n        element: element,\n        datasetIndex: datasetIndex,\n        index: index\n      });\n    }\n\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      intersectsItem = true;\n    }\n  });\n\n  if (options.intersect && !intersectsItem) {\n    return [];\n  }\n\n  return items;\n}\n\nvar Interaction = {\n  modes: {\n    index: function index(chart, e, options, useFinalPosition) {\n      var position = getRelativePosition(e, chart);\n      var axis = options.axis || 'x';\n      var items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition) : getNearestItems(chart, position, axis, false, useFinalPosition);\n      var elements = [];\n\n      if (!items.length) {\n        return [];\n      }\n\n      chart.getSortedVisibleDatasetMetas().forEach(function (meta) {\n        var index = items[0].index;\n        var element = meta.data[index];\n\n        if (element && !element.skip) {\n          elements.push({\n            element: element,\n            datasetIndex: meta.index,\n            index: index\n          });\n        }\n      });\n      return elements;\n    },\n    dataset: function dataset(chart, e, options, useFinalPosition) {\n      var position = getRelativePosition(e, chart);\n      var axis = options.axis || 'xy';\n      var items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition) : getNearestItems(chart, position, axis, false, useFinalPosition);\n\n      if (items.length > 0) {\n        var datasetIndex = items[0].datasetIndex;\n        var data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n\n        for (var i = 0; i < data.length; ++i) {\n          items.push({\n            element: data[i],\n            datasetIndex: datasetIndex,\n            index: i\n          });\n        }\n      }\n\n      return items;\n    },\n    point: function point(chart, e, options, useFinalPosition) {\n      var position = getRelativePosition(e, chart);\n      var axis = options.axis || 'xy';\n      return getIntersectItems(chart, position, axis, useFinalPosition);\n    },\n    nearest: function nearest(chart, e, options, useFinalPosition) {\n      var position = getRelativePosition(e, chart);\n      var axis = options.axis || 'xy';\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition);\n    },\n    x: function x(chart, e, options, useFinalPosition) {\n      options.axis = 'x';\n      return getAxisItems(chart, e, options, useFinalPosition);\n    },\n    y: function y(chart, e, options, useFinalPosition) {\n      options.axis = 'y';\n      return getAxisItems(chart, e, options, useFinalPosition);\n    }\n  }\n};\nvar STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\n\nfunction filterByPosition(array, position) {\n  return array.filter(function (v) {\n    return v.pos === position;\n  });\n}\n\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(function (v) {\n    return STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis;\n  });\n}\n\nfunction sortByWeight(array, reverse) {\n  return array.sort(function (a, b) {\n    var v0 = reverse ? b : a;\n    var v1 = reverse ? a : b;\n    return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n  });\n}\n\nfunction wrapBoxes(boxes) {\n  var layoutBoxes = [];\n  var i, ilen, box;\n\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    layoutBoxes.push({\n      index: i,\n      box: box,\n      pos: box.position,\n      horizontal: box.isHorizontal(),\n      weight: box.weight\n    });\n  }\n\n  return layoutBoxes;\n}\n\nfunction setLayoutDims(layouts, params) {\n  var i, ilen, layout;\n\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n\n    if (layout.horizontal) {\n      layout.width = layout.box.fullSize && params.availableWidth;\n      layout.height = params.hBoxMaxHeight;\n    } else {\n      layout.width = params.vBoxMaxWidth;\n      layout.height = layout.box.fullSize && params.availableHeight;\n    }\n  }\n}\n\nfunction buildLayoutBoxes(boxes) {\n  var layoutBoxes = wrapBoxes(boxes);\n  var fullSize = sortByWeight(layoutBoxes.filter(function (wrap) {\n    return wrap.box.fullSize;\n  }), true);\n  var left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  var right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  var top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  var bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  var centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  var centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n  return {\n    fullSize: fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\n\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\n\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\n\nfunction updateDims(chartArea, params, layout) {\n  var box = layout.box;\n  var maxPadding = chartArea.maxPadding;\n\n  if (!Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"i\"])(layout.pos)) {\n    if (layout.size) {\n      chartArea[layout.pos] -= layout.size;\n    }\n\n    layout.size = layout.horizontal ? box.height : box.width;\n    chartArea[layout.pos] += layout.size;\n  }\n\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n\n  var newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  var newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  var widthChanged = newWidth !== chartArea.w;\n  var heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n  return layout.horizontal ? {\n    same: widthChanged,\n    other: heightChanged\n  } : {\n    same: heightChanged,\n    other: widthChanged\n  };\n}\n\nfunction handleMaxPadding(chartArea) {\n  var maxPadding = chartArea.maxPadding;\n\n  function updatePos(pos) {\n    var change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\n\nfunction getMargins(horizontal, chartArea) {\n  var maxPadding = chartArea.maxPadding;\n\n  function marginForPositions(positions) {\n    var margin = {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0\n    };\n    positions.forEach(function (pos) {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n\n  return horizontal ? marginForPositions(['left', 'right']) : marginForPositions(['top', 'bottom']);\n}\n\nfunction fitBoxes(boxes, chartArea, params) {\n  var refitBoxes = [];\n  var i, ilen, layout, box, refit, changed;\n\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n    box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n\n    var _updateDims = updateDims(chartArea, params, layout),\n        same = _updateDims.same,\n        other = _updateDims.other;\n\n    refit |= same && refitBoxes.length;\n    changed = changed || other;\n\n    if (!box.fullSize) {\n      refitBoxes.push(layout);\n    }\n  }\n\n  return refit && fitBoxes(refitBoxes, chartArea, params) || changed;\n}\n\nfunction placeBoxes(boxes, chartArea, params) {\n  var userPadding = params.padding;\n  var x = chartArea.x;\n  var y = chartArea.y;\n  var i, ilen, layout, box;\n\n  for (i = 0, ilen = boxes.length; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n\n    if (layout.horizontal) {\n      box.left = box.fullSize ? userPadding.left : chartArea.left;\n      box.right = box.fullSize ? params.outerWidth - userPadding.right : chartArea.left + chartArea.w;\n      box.top = y;\n      box.bottom = y + box.height;\n      box.width = box.right - box.left;\n      y = box.bottom;\n    } else {\n      box.left = x;\n      box.right = x + box.width;\n      box.top = box.fullSize ? userPadding.top : chartArea.top;\n      box.bottom = box.fullSize ? params.outerHeight - userPadding.right : chartArea.top + chartArea.h;\n      box.height = box.bottom - box.top;\n      x = box.right;\n    }\n  }\n\n  chartArea.x = x;\n  chartArea.y = y;\n}\n\n_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"d\"].set('layout', {\n  padding: {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0\n  }\n});\nvar layouts = {\n  addBox: function addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n\n    item._layers = item._layers || function () {\n      return [{\n        z: 0,\n        draw: function draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n\n    chart.boxes.push(item);\n  },\n  removeBox: function removeBox(chart, layoutItem) {\n    var index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n  configure: function configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n  update: function update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n\n    var padding = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"C\"])(chart.options.layout.padding);\n    var availableWidth = Math.max(width - padding.width, 0);\n    var availableHeight = Math.max(height - padding.height, 0);\n    var boxes = buildLayoutBoxes(chart.boxes);\n    var verticalBoxes = boxes.vertical;\n    var horizontalBoxes = boxes.horizontal;\n    Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"D\"])(chart.boxes, function (box) {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n    var visibleVerticalBoxCount = verticalBoxes.reduce(function (total, wrap) {\n      return wrap.box.options && wrap.box.options.display === false ? total : total + 1;\n    }, 0) || 1;\n    var params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding: padding,\n      availableWidth: availableWidth,\n      availableHeight: availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    var maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"C\"])(minPadding));\n    var chartArea = Object.assign({\n      maxPadding: maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n    setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n    fitBoxes(boxes.fullSize, chartArea, params);\n    fitBoxes(verticalBoxes, chartArea, params);\n\n    if (fitBoxes(horizontalBoxes, chartArea, params)) {\n      fitBoxes(verticalBoxes, chartArea, params);\n    }\n\n    handleMaxPadding(chartArea);\n    placeBoxes(boxes.leftAndTop, chartArea, params);\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n    placeBoxes(boxes.rightAndBottom, chartArea, params);\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w\n    };\n    Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"D\"])(boxes.chartArea, function (layout) {\n      var box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h);\n    });\n  }\n};\n\nvar BasePlatform = /*#__PURE__*/function () {\n  function BasePlatform() {\n    Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this, BasePlatform);\n  }\n\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(BasePlatform, [{\n    key: \"acquireContext\",\n    value: function acquireContext(canvas, aspectRatio) {}\n  }, {\n    key: \"releaseContext\",\n    value: function releaseContext(context) {\n      return false;\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(chart, type, listener) {}\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(chart, type, listener) {}\n  }, {\n    key: \"getDevicePixelRatio\",\n    value: function getDevicePixelRatio() {\n      return 1;\n    }\n  }, {\n    key: \"getMaximumSize\",\n    value: function getMaximumSize(element, width, height, aspectRatio) {\n      width = Math.max(0, width || element.width);\n      height = height || element.height;\n      return {\n        width: width,\n        height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n      };\n    }\n  }, {\n    key: \"isAttached\",\n    value: function isAttached(canvas) {\n      return true;\n    }\n  }]);\n\n  return BasePlatform;\n}();\n\nvar BasicPlatform = /*#__PURE__*/function (_BasePlatform) {\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(BasicPlatform, _BasePlatform);\n\n  var _super9 = _createSuper(BasicPlatform);\n\n  function BasicPlatform() {\n    Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this, BasicPlatform);\n\n    return _super9.apply(this, arguments);\n  }\n\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(BasicPlatform, [{\n    key: \"acquireContext\",\n    value: function acquireContext(item) {\n      return item && item.getContext && item.getContext('2d') || null;\n    }\n  }]);\n\n  return BasicPlatform;\n}(BasePlatform);\n\nvar EXPANDO_KEY = '$chartjs';\nvar EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\n\nvar isNullOrEmpty = function isNullOrEmpty(value) {\n  return value === null || value === '';\n};\n\nfunction initCanvas(canvas, aspectRatio) {\n  var style = canvas.style;\n  var renderHeight = canvas.getAttribute('height');\n  var renderWidth = canvas.getAttribute('width');\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n  style.display = style.display || 'block';\n  style.boxSizing = style.boxSizing || 'border-box';\n\n  if (isNullOrEmpty(renderWidth)) {\n    var displayWidth = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"G\"])(canvas, 'width');\n\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      var displayHeight = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"G\"])(canvas, 'height');\n\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n\n  return canvas;\n}\n\nvar eventListenerOptions = _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"J\"] ? {\n  passive: true\n} : false;\n\nfunction addListener(node, type, listener) {\n  node.addEventListener(type, listener, eventListenerOptions);\n}\n\nfunction removeListener(chart, type, listener) {\n  chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\n\nfunction fromNativeEvent(event, chart) {\n  var type = EVENT_TYPES[event.type] || event.type;\n\n  var _getRelativePosition$ = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"z\"])(event, chart),\n      x = _getRelativePosition$.x,\n      y = _getRelativePosition$.y;\n\n  return {\n    type: type,\n    chart: chart,\n    \"native\": event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null\n  };\n}\n\nfunction createAttachObserver(chart, type, listener) {\n  var canvas = chart.canvas;\n\n  var container = canvas && Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"F\"])(canvas);\n\n  var element = container || canvas;\n  var observer = new MutationObserver(function (entries) {\n    var parent = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"F\"])(element);\n\n    entries.forEach(function (entry) {\n      for (var i = 0; i < entry.addedNodes.length; i++) {\n        var added = entry.addedNodes[i];\n\n        if (added === element || added === parent) {\n          listener(entry.target);\n        }\n      }\n    });\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\n\nfunction createDetachObserver(chart, type, listener) {\n  var canvas = chart.canvas;\n\n  var container = canvas && Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"F\"])(canvas);\n\n  if (!container) {\n    return;\n  }\n\n  var observer = new MutationObserver(function (entries) {\n    entries.forEach(function (entry) {\n      for (var i = 0; i < entry.removedNodes.length; i++) {\n        if (entry.removedNodes[i] === canvas) {\n          listener();\n          break;\n        }\n      }\n    });\n  });\n  observer.observe(container, {\n    childList: true\n  });\n  return observer;\n}\n\nvar drpListeningCharts = new Map();\nvar oldDevicePixelRatio = 0;\n\nfunction onWindowResize() {\n  var dpr = window.devicePixelRatio;\n\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach(function (resize, chart) {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\n\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n\n  drpListeningCharts.set(chart, resize);\n}\n\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts[\"delete\"](chart);\n\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\n\nfunction createResizeObserver(chart, type, listener) {\n  var canvas = chart.canvas;\n\n  var container = canvas && Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"F\"])(canvas);\n\n  if (!container) {\n    return;\n  }\n\n  var resize = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"I\"])(function (width, height) {\n    var w = container.clientWidth;\n    listener(width, height);\n\n    if (w < container.clientWidth) {\n      listener();\n    }\n  }, window);\n  var observer = new ResizeObserver(function (entries) {\n    var entry = entries[0];\n    var width = entry.contentRect.width;\n    var height = entry.contentRect.height;\n\n    if (width === 0 && height === 0) {\n      return;\n    }\n\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n  return observer;\n}\n\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\n\nfunction createProxyAndListen(chart, type, listener) {\n  var canvas = chart.canvas;\n  var proxy = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"I\"])(function (event) {\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart, function (args) {\n    var event = args[0];\n    return [event, event.offsetX, event.offsetY];\n  });\n  addListener(canvas, type, proxy);\n  return proxy;\n}\n\nvar DomPlatform = /*#__PURE__*/function (_BasePlatform2) {\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(DomPlatform, _BasePlatform2);\n\n  var _super10 = _createSuper(DomPlatform);\n\n  function DomPlatform() {\n    Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this, DomPlatform);\n\n    return _super10.apply(this, arguments);\n  }\n\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(DomPlatform, [{\n    key: \"acquireContext\",\n    value: function acquireContext(canvas, aspectRatio) {\n      var context = canvas && canvas.getContext && canvas.getContext('2d');\n\n      if (context && context.canvas === canvas) {\n        initCanvas(canvas, aspectRatio);\n        return context;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"releaseContext\",\n    value: function releaseContext(context) {\n      var canvas = context.canvas;\n\n      if (!canvas[EXPANDO_KEY]) {\n        return false;\n      }\n\n      var initial = canvas[EXPANDO_KEY].initial;\n      ['height', 'width'].forEach(function (prop) {\n        var value = initial[prop];\n\n        if (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"j\"])(value)) {\n          canvas.removeAttribute(prop);\n        } else {\n          canvas.setAttribute(prop, value);\n        }\n      });\n      var style = initial.style || {};\n      Object.keys(style).forEach(function (key) {\n        canvas.style[key] = style[key];\n      });\n      canvas.width = canvas.width;\n      delete canvas[EXPANDO_KEY];\n      return true;\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(chart, type, listener) {\n      this.removeEventListener(chart, type);\n      var proxies = chart.$proxies || (chart.$proxies = {});\n      var handlers = {\n        attach: createAttachObserver,\n        detach: createDetachObserver,\n        resize: createResizeObserver\n      };\n      var handler = handlers[type] || createProxyAndListen;\n      proxies[type] = handler(chart, type, listener);\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(chart, type) {\n      var proxies = chart.$proxies || (chart.$proxies = {});\n      var proxy = proxies[type];\n\n      if (!proxy) {\n        return;\n      }\n\n      var handlers = {\n        attach: releaseObserver,\n        detach: releaseObserver,\n        resize: releaseObserver\n      };\n      var handler = handlers[type] || removeListener;\n      handler(chart, type, proxy);\n      proxies[type] = undefined;\n    }\n  }, {\n    key: \"getDevicePixelRatio\",\n    value: function getDevicePixelRatio() {\n      return window.devicePixelRatio;\n    }\n  }, {\n    key: \"getMaximumSize\",\n    value: function getMaximumSize(canvas, width, height, aspectRatio) {\n      return Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"E\"])(canvas, width, height, aspectRatio);\n    }\n  }, {\n    key: \"isAttached\",\n    value: function isAttached(canvas) {\n      var container = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"F\"])(canvas);\n\n      return !!(container && Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"F\"])(container));\n    }\n  }]);\n\n  return DomPlatform;\n}(BasePlatform);\n\nvar Element = /*#__PURE__*/function () {\n  function Element() {\n    Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this, Element);\n\n    this.x = undefined;\n    this.y = undefined;\n    this.active = false;\n    this.options = undefined;\n    this.$animations = undefined;\n  }\n\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(Element, [{\n    key: \"tooltipPosition\",\n    value: function tooltipPosition(useFinalPosition) {\n      var _this$getProps = this.getProps(['x', 'y'], useFinalPosition),\n          x = _this$getProps.x,\n          y = _this$getProps.y;\n\n      return {\n        x: x,\n        y: y\n      };\n    }\n  }, {\n    key: \"hasValue\",\n    value: function hasValue() {\n      return Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"w\"])(this.x) && Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"w\"])(this.y);\n    }\n  }, {\n    key: \"getProps\",\n    value: function getProps(props, _final) {\n      var me = this;\n      var anims = this.$animations;\n\n      if (!_final || !anims) {\n        return me;\n      }\n\n      var ret = {};\n      props.forEach(function (prop) {\n        ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : me[prop];\n      });\n      return ret;\n    }\n  }]);\n\n  return Element;\n}();\n\nElement.defaults = {};\nElement.defaultRoutes = undefined;\nvar formatters = {\n  values: function values(value) {\n    return Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"b\"])(value) ? value : '' + value;\n  },\n  numeric: function numeric(tickValue, index, ticks) {\n    if (tickValue === 0) {\n      return '0';\n    }\n\n    var locale = this.chart.options.locale;\n    var notation;\n    var delta = tickValue;\n\n    if (ticks.length > 1) {\n      var maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));\n\n      if (maxTick < 1e-4 || maxTick > 1e+15) {\n        notation = 'scientific';\n      }\n\n      delta = calculateDelta(tickValue, ticks);\n    }\n\n    var logDelta = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"K\"])(Math.abs(delta));\n    var numDecimal = Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);\n    var options = {\n      notation: notation,\n      minimumFractionDigits: numDecimal,\n      maximumFractionDigits: numDecimal\n    };\n    Object.assign(options, this.options.ticks.format);\n    return Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"p\"])(tickValue, locale, options);\n  },\n  logarithmic: function logarithmic(tickValue, index, ticks) {\n    if (tickValue === 0) {\n      return '0';\n    }\n\n    var remain = tickValue / Math.pow(10, Math.floor(Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"K\"])(tickValue)));\n\n    if (remain === 1 || remain === 2 || remain === 5) {\n      return formatters.numeric.call(this, tickValue, index, ticks);\n    }\n\n    return '';\n  }\n};\n\nfunction calculateDelta(tickValue, ticks) {\n  var delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;\n\n  if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {\n    delta = tickValue - Math.floor(tickValue);\n  }\n\n  return delta;\n}\n\nvar Ticks = {\n  formatters: formatters\n};\n_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"d\"].set('scale', {\n  display: true,\n  offset: false,\n  reverse: false,\n  beginAtZero: false,\n  bounds: 'ticks',\n  grace: 0,\n  grid: {\n    display: true,\n    lineWidth: 1,\n    drawBorder: true,\n    drawOnChartArea: true,\n    drawTicks: true,\n    tickLength: 8,\n    tickWidth: function tickWidth(_ctx, options) {\n      return options.lineWidth;\n    },\n    tickColor: function tickColor(_ctx, options) {\n      return options.color;\n    },\n    offset: false,\n    borderDash: [],\n    borderDashOffset: 0.0,\n    borderWidth: 1\n  },\n  title: {\n    display: false,\n    text: '',\n    padding: {\n      top: 4,\n      bottom: 4\n    }\n  },\n  ticks: {\n    minRotation: 0,\n    maxRotation: 50,\n    mirror: false,\n    textStrokeWidth: 0,\n    textStrokeColor: '',\n    padding: 3,\n    display: true,\n    autoSkip: true,\n    autoSkipPadding: 3,\n    labelOffset: 0,\n    callback: Ticks.formatters.values,\n    minor: {},\n    major: {},\n    align: 'center',\n    crossAlign: 'near',\n    showLabelBackdrop: false,\n    backdropColor: 'rgba(255, 255, 255, 0.75)',\n    backdropPadding: 2\n  }\n});\n_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"d\"].route('scale.ticks', 'color', '', 'color');\n_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"d\"].route('scale.grid', 'color', '', 'borderColor');\n_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"d\"].route('scale.grid', 'borderColor', '', 'borderColor');\n_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"d\"].route('scale.title', 'color', '', 'color');\n_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"d\"].describe('scale', {\n  _fallback: false,\n  _scriptable: function _scriptable(name) {\n    return !name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser';\n  },\n  _indexable: function _indexable(name) {\n    return name !== 'borderDash' && name !== 'tickBorderDash';\n  }\n});\n_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"d\"].describe('scales', {\n  _fallback: 'scale'\n});\n\nfunction autoSkip(scale, ticks) {\n  var tickOpts = scale.options.ticks;\n  var ticksLimit = tickOpts.maxTicksLimit || determineMaxTicks(scale);\n  var majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  var numMajorIndices = majorIndices.length;\n  var first = majorIndices[0];\n  var last = majorIndices[numMajorIndices - 1];\n  var newTicks = [];\n\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n\n  var spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n\n  if (numMajorIndices > 0) {\n    var i, ilen;\n    var avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"j\"])(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n\n    skip(ticks, newTicks, spacing, last, Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"j\"])(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\n\nfunction determineMaxTicks(scale) {\n  var offset = scale.options.offset;\n\n  var tickLength = scale._tickSize();\n\n  var maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  var maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\n\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  var evenMajorSpacing = getEvenSpacing(majorIndices);\n  var spacing = ticks.length / ticksLimit;\n\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n\n  var factors = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"L\"])(evenMajorSpacing);\n\n  for (var i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    var factor = factors[i];\n\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n\n  return Math.max(spacing, 1);\n}\n\nfunction getMajorIndices(ticks) {\n  var result = [];\n  var i, ilen;\n\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n\n  return result;\n}\n\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  var count = 0;\n  var next = majorIndices[0];\n  var i;\n  spacing = Math.ceil(spacing);\n\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\n\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  var start = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"v\"])(majorStart, 0);\n  var end = Math.min(Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"v\"])(majorEnd, ticks.length), ticks.length);\n  var count = 0;\n  var length, i, next;\n  spacing = Math.ceil(spacing);\n\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n\n  next = start;\n\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\n\nfunction getEvenSpacing(arr) {\n  var len = arr.length;\n  var i, diff;\n\n  if (len < 2) {\n    return false;\n  }\n\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n\n  return diff;\n}\n\nvar reverseAlign = function reverseAlign(align) {\n  return align === 'left' ? 'right' : align === 'right' ? 'left' : align;\n};\n\nvar offsetFromEdge = function offsetFromEdge(scale, edge, offset) {\n  return edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\n};\n\nfunction sample(arr, numItems) {\n  var result = [];\n  var increment = arr.length / numItems;\n  var len = arr.length;\n  var i = 0;\n\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n\n  return result;\n}\n\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  var length = scale.ticks.length;\n  var validIndex = Math.min(index, length - 1);\n  var start = scale._startPixel;\n  var end = scale._endPixel;\n  var epsilon = 1e-6;\n  var lineValue = scale.getPixelForTick(validIndex);\n  var offset;\n\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n\n    lineValue += validIndex < index ? offset : -offset;\n\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n\n  return lineValue;\n}\n\nfunction garbageCollect(caches, length) {\n  Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"D\"])(caches, function (cache) {\n    var gc = cache.gc;\n    var gcLen = gc.length / 2;\n    var i;\n\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n\n      gc.splice(0, gcLen);\n    }\n  });\n}\n\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\n\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n\n  var font = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"W\"])(options.font, fallback);\n  var padding = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"C\"])(options.padding);\n  var lines = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"b\"])(options.text) ? options.text.length : 1;\n  return lines * font.lineHeight + padding.height;\n}\n\nfunction createScaleContext(parent, scale) {\n  return Object.assign(Object.create(parent), {\n    scale: scale,\n    type: 'scale'\n  });\n}\n\nfunction createTickContext(parent, index, tick) {\n  return Object.assign(Object.create(parent), {\n    tick: tick,\n    index: index,\n    type: 'tick'\n  });\n}\n\nfunction titleAlign(align, position, reverse) {\n  var ret = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"X\"])(align);\n\n  if (reverse && position !== 'right' || !reverse && position === 'right') {\n    ret = reverseAlign(ret);\n  }\n\n  return ret;\n}\n\nfunction titleArgs(scale, offset, position, align) {\n  var top = scale.top,\n      left = scale.left,\n      bottom = scale.bottom,\n      right = scale.right;\n  var rotation = 0;\n  var maxWidth, titleX, titleY;\n\n  if (scale.isHorizontal()) {\n    titleX = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"Y\"])(align, left, right);\n    titleY = offsetFromEdge(scale, position, offset);\n    maxWidth = right - left;\n  } else {\n    titleX = offsetFromEdge(scale, position, offset);\n    titleY = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"Y\"])(align, bottom, top);\n    rotation = position === 'left' ? -_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"H\"] : _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"H\"];\n  }\n\n  return {\n    titleX: titleX,\n    titleY: titleY,\n    maxWidth: maxWidth,\n    rotation: rotation\n  };\n}\n\nvar Scale = /*#__PURE__*/function (_Element) {\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(Scale, _Element);\n\n  var _super11 = _createSuper(Scale);\n\n  function Scale(cfg) {\n    var _this4;\n\n    Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this, Scale);\n\n    _this4 = _super11.call(this);\n    _this4.id = cfg.id;\n    _this4.type = cfg.type;\n    _this4.options = undefined;\n    _this4.ctx = cfg.ctx;\n    _this4.chart = cfg.chart;\n    _this4.top = undefined;\n    _this4.bottom = undefined;\n    _this4.left = undefined;\n    _this4.right = undefined;\n    _this4.width = undefined;\n    _this4.height = undefined;\n    _this4._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    _this4.maxWidth = undefined;\n    _this4.maxHeight = undefined;\n    _this4.paddingTop = undefined;\n    _this4.paddingBottom = undefined;\n    _this4.paddingLeft = undefined;\n    _this4.paddingRight = undefined;\n    _this4.axis = undefined;\n    _this4.labelRotation = undefined;\n    _this4.min = undefined;\n    _this4.max = undefined;\n    _this4._range = undefined;\n    _this4.ticks = [];\n    _this4._gridLineItems = null;\n    _this4._labelItems = null;\n    _this4._labelSizes = null;\n    _this4._length = 0;\n    _this4._maxLength = 0;\n    _this4._longestTextCache = {};\n    _this4._startPixel = undefined;\n    _this4._endPixel = undefined;\n    _this4._reversePixels = false;\n    _this4._userMax = undefined;\n    _this4._userMin = undefined;\n    _this4._suggestedMax = undefined;\n    _this4._suggestedMin = undefined;\n    _this4._ticksLength = 0;\n    _this4._borderValue = 0;\n    _this4._cache = {};\n    _this4._dataLimitsCached = false;\n    _this4.$context = undefined;\n    return _this4;\n  }\n\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(Scale, [{\n    key: \"init\",\n    value: function init(options) {\n      var me = this;\n      me.options = options.setContext(me.getContext());\n      me.axis = options.axis;\n      me._userMin = me.parse(options.min);\n      me._userMax = me.parse(options.max);\n      me._suggestedMin = me.parse(options.suggestedMin);\n      me._suggestedMax = me.parse(options.suggestedMax);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(raw, index) {\n      return raw;\n    }\n  }, {\n    key: \"getUserBounds\",\n    value: function getUserBounds() {\n      var _userMin = this._userMin,\n          _userMax = this._userMax,\n          _suggestedMin = this._suggestedMin,\n          _suggestedMax = this._suggestedMax;\n      _userMin = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"M\"])(_userMin, Number.POSITIVE_INFINITY);\n      _userMax = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"M\"])(_userMax, Number.NEGATIVE_INFINITY);\n      _suggestedMin = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"M\"])(_suggestedMin, Number.POSITIVE_INFINITY);\n      _suggestedMax = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"M\"])(_suggestedMax, Number.NEGATIVE_INFINITY);\n      return {\n        min: Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"M\"])(_userMin, _suggestedMin),\n        max: Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"M\"])(_userMax, _suggestedMax),\n        minDefined: Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"g\"])(_userMin),\n        maxDefined: Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"g\"])(_userMax)\n      };\n    }\n  }, {\n    key: \"getMinMax\",\n    value: function getMinMax(canStack) {\n      var me = this;\n\n      var _me$getUserBounds = me.getUserBounds(),\n          min = _me$getUserBounds.min,\n          max = _me$getUserBounds.max,\n          minDefined = _me$getUserBounds.minDefined,\n          maxDefined = _me$getUserBounds.maxDefined;\n\n      var range;\n\n      if (minDefined && maxDefined) {\n        return {\n          min: min,\n          max: max\n        };\n      }\n\n      var metas = me.getMatchingVisibleMetas();\n\n      for (var i = 0, ilen = metas.length; i < ilen; ++i) {\n        range = metas[i].controller.getMinMax(me, canStack);\n\n        if (!minDefined) {\n          min = Math.min(min, range.min);\n        }\n\n        if (!maxDefined) {\n          max = Math.max(max, range.max);\n        }\n      }\n\n      return {\n        min: Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"M\"])(min, Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"M\"])(max, min)),\n        max: Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"M\"])(max, Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"M\"])(min, max))\n      };\n    }\n  }, {\n    key: \"getPadding\",\n    value: function getPadding() {\n      var me = this;\n      return {\n        left: me.paddingLeft || 0,\n        top: me.paddingTop || 0,\n        right: me.paddingRight || 0,\n        bottom: me.paddingBottom || 0\n      };\n    }\n  }, {\n    key: \"getTicks\",\n    value: function getTicks() {\n      return this.ticks;\n    }\n  }, {\n    key: \"getLabels\",\n    value: function getLabels() {\n      var data = this.chart.data;\n      return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n    }\n  }, {\n    key: \"beforeLayout\",\n    value: function beforeLayout() {\n      this._cache = {};\n      this._dataLimitsCached = false;\n    }\n  }, {\n    key: \"beforeUpdate\",\n    value: function beforeUpdate() {\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"N\"])(this.options.beforeUpdate, [this]);\n    }\n  }, {\n    key: \"update\",\n    value: function update(maxWidth, maxHeight, margins) {\n      var me = this;\n      var tickOpts = me.options.ticks;\n      var sampleSize = tickOpts.sampleSize;\n      me.beforeUpdate();\n      me.maxWidth = maxWidth;\n      me.maxHeight = maxHeight;\n      me._margins = margins = Object.assign({\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0\n      }, margins);\n      me.ticks = null;\n      me._labelSizes = null;\n      me._gridLineItems = null;\n      me._labelItems = null;\n      me.beforeSetDimensions();\n      me.setDimensions();\n      me.afterSetDimensions();\n      me._maxLength = me.isHorizontal() ? me.width + margins.left + margins.right : me.height + margins.top + margins.bottom;\n\n      if (!me._dataLimitsCached) {\n        me.beforeDataLimits();\n        me.determineDataLimits();\n        me.afterDataLimits();\n        me._range = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"O\"])(me, me.options.grace);\n        me._dataLimitsCached = true;\n      }\n\n      me.beforeBuildTicks();\n      me.ticks = me.buildTicks() || [];\n      me.afterBuildTicks();\n      var samplingEnabled = sampleSize < me.ticks.length;\n\n      me._convertTicksToLabels(samplingEnabled ? sample(me.ticks, sampleSize) : me.ticks);\n\n      me.configure();\n      me.beforeCalculateLabelRotation();\n      me.calculateLabelRotation();\n      me.afterCalculateLabelRotation();\n\n      if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n        me.ticks = autoSkip(me, me.ticks);\n        me._labelSizes = null;\n      }\n\n      if (samplingEnabled) {\n        me._convertTicksToLabels(me.ticks);\n      }\n\n      me.beforeFit();\n      me.fit();\n      me.afterFit();\n      me.afterUpdate();\n    }\n  }, {\n    key: \"configure\",\n    value: function configure() {\n      var me = this;\n      var reversePixels = me.options.reverse;\n      var startPixel, endPixel;\n\n      if (me.isHorizontal()) {\n        startPixel = me.left;\n        endPixel = me.right;\n      } else {\n        startPixel = me.top;\n        endPixel = me.bottom;\n        reversePixels = !reversePixels;\n      }\n\n      me._startPixel = startPixel;\n      me._endPixel = endPixel;\n      me._reversePixels = reversePixels;\n      me._length = endPixel - startPixel;\n      me._alignToPixels = me.options.alignToPixels;\n    }\n  }, {\n    key: \"afterUpdate\",\n    value: function afterUpdate() {\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"N\"])(this.options.afterUpdate, [this]);\n    }\n  }, {\n    key: \"beforeSetDimensions\",\n    value: function beforeSetDimensions() {\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"N\"])(this.options.beforeSetDimensions, [this]);\n    }\n  }, {\n    key: \"setDimensions\",\n    value: function setDimensions() {\n      var me = this;\n\n      if (me.isHorizontal()) {\n        me.width = me.maxWidth;\n        me.left = 0;\n        me.right = me.width;\n      } else {\n        me.height = me.maxHeight;\n        me.top = 0;\n        me.bottom = me.height;\n      }\n\n      me.paddingLeft = 0;\n      me.paddingTop = 0;\n      me.paddingRight = 0;\n      me.paddingBottom = 0;\n    }\n  }, {\n    key: \"afterSetDimensions\",\n    value: function afterSetDimensions() {\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"N\"])(this.options.afterSetDimensions, [this]);\n    }\n  }, {\n    key: \"_callHooks\",\n    value: function _callHooks(name) {\n      var me = this;\n      me.chart.notifyPlugins(name, me.getContext());\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"N\"])(me.options[name], [me]);\n    }\n  }, {\n    key: \"beforeDataLimits\",\n    value: function beforeDataLimits() {\n      this._callHooks('beforeDataLimits');\n    }\n  }, {\n    key: \"determineDataLimits\",\n    value: function determineDataLimits() {}\n  }, {\n    key: \"afterDataLimits\",\n    value: function afterDataLimits() {\n      this._callHooks('afterDataLimits');\n    }\n  }, {\n    key: \"beforeBuildTicks\",\n    value: function beforeBuildTicks() {\n      this._callHooks('beforeBuildTicks');\n    }\n  }, {\n    key: \"buildTicks\",\n    value: function buildTicks() {\n      return [];\n    }\n  }, {\n    key: \"afterBuildTicks\",\n    value: function afterBuildTicks() {\n      this._callHooks('afterBuildTicks');\n    }\n  }, {\n    key: \"beforeTickToLabelConversion\",\n    value: function beforeTickToLabelConversion() {\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"N\"])(this.options.beforeTickToLabelConversion, [this]);\n    }\n  }, {\n    key: \"generateTickLabels\",\n    value: function generateTickLabels(ticks) {\n      var me = this;\n      var tickOpts = me.options.ticks;\n      var i, ilen, tick;\n\n      for (i = 0, ilen = ticks.length; i < ilen; i++) {\n        tick = ticks[i];\n        tick.label = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"N\"])(tickOpts.callback, [tick.value, i, ticks], me);\n      }\n\n      for (i = 0; i < ilen; i++) {\n        if (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"j\"])(ticks[i].label)) {\n          ticks.splice(i, 1);\n          ilen--;\n          i--;\n        }\n      }\n    }\n  }, {\n    key: \"afterTickToLabelConversion\",\n    value: function afterTickToLabelConversion() {\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"N\"])(this.options.afterTickToLabelConversion, [this]);\n    }\n  }, {\n    key: \"beforeCalculateLabelRotation\",\n    value: function beforeCalculateLabelRotation() {\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"N\"])(this.options.beforeCalculateLabelRotation, [this]);\n    }\n  }, {\n    key: \"calculateLabelRotation\",\n    value: function calculateLabelRotation() {\n      var me = this;\n      var options = me.options;\n      var tickOpts = options.ticks;\n      var numTicks = me.ticks.length;\n      var minRotation = tickOpts.minRotation || 0;\n      var maxRotation = tickOpts.maxRotation;\n      var labelRotation = minRotation;\n      var tickWidth, maxHeight, maxLabelDiagonal;\n\n      if (!me._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !me.isHorizontal()) {\n        me.labelRotation = minRotation;\n        return;\n      }\n\n      var labelSizes = me._getLabelSizes();\n\n      var maxLabelWidth = labelSizes.widest.width;\n      var maxLabelHeight = labelSizes.highest.height;\n\n      var maxWidth = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"x\"])(me.chart.width - maxLabelWidth, 0, me.maxWidth);\n\n      tickWidth = options.offset ? me.maxWidth / numTicks : maxWidth / (numTicks - 1);\n\n      if (maxLabelWidth + 6 > tickWidth) {\n        tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n        maxHeight = me.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, me.chart.options.font);\n        maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n        labelRotation = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"Q\"])(Math.min(Math.asin(Math.min((labelSizes.highest.height + 6) / tickWidth, 1)), Math.asin(Math.min(maxHeight / maxLabelDiagonal, 1)) - Math.asin(maxLabelHeight / maxLabelDiagonal)));\n        labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n      }\n\n      me.labelRotation = labelRotation;\n    }\n  }, {\n    key: \"afterCalculateLabelRotation\",\n    value: function afterCalculateLabelRotation() {\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"N\"])(this.options.afterCalculateLabelRotation, [this]);\n    }\n  }, {\n    key: \"beforeFit\",\n    value: function beforeFit() {\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"N\"])(this.options.beforeFit, [this]);\n    }\n  }, {\n    key: \"fit\",\n    value: function fit() {\n      var me = this;\n      var minSize = {\n        width: 0,\n        height: 0\n      };\n      var chart = me.chart,\n          _me$options2 = me.options,\n          tickOpts = _me$options2.ticks,\n          titleOpts = _me$options2.title,\n          gridOpts = _me$options2.grid;\n\n      var display = me._isVisible();\n\n      var isHorizontal = me.isHorizontal();\n\n      if (display) {\n        var titleHeight = getTitleHeight(titleOpts, chart.options.font);\n\n        if (isHorizontal) {\n          minSize.width = me.maxWidth;\n          minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n        } else {\n          minSize.height = me.maxHeight;\n          minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n        }\n\n        if (tickOpts.display && me.ticks.length) {\n          var _me$_getLabelSizes = me._getLabelSizes(),\n              first = _me$_getLabelSizes.first,\n              last = _me$_getLabelSizes.last,\n              widest = _me$_getLabelSizes.widest,\n              highest = _me$_getLabelSizes.highest;\n\n          var tickPadding = tickOpts.padding * 2;\n          var angleRadians = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"t\"])(me.labelRotation);\n          var cos = Math.cos(angleRadians);\n          var sin = Math.sin(angleRadians);\n\n          if (isHorizontal) {\n            var labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n            minSize.height = Math.min(me.maxHeight, minSize.height + labelHeight + tickPadding);\n          } else {\n            var labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n            minSize.width = Math.min(me.maxWidth, minSize.width + labelWidth + tickPadding);\n          }\n\n          me._calculatePadding(first, last, sin, cos);\n        }\n      }\n\n      me._handleMargins();\n\n      if (isHorizontal) {\n        me.width = me._length = chart.width - me._margins.left - me._margins.right;\n        me.height = minSize.height;\n      } else {\n        me.width = minSize.width;\n        me.height = me._length = chart.height - me._margins.top - me._margins.bottom;\n      }\n    }\n  }, {\n    key: \"_calculatePadding\",\n    value: function _calculatePadding(first, last, sin, cos) {\n      var me = this;\n      var _me$options3 = me.options,\n          _me$options3$ticks = _me$options3.ticks,\n          align = _me$options3$ticks.align,\n          padding = _me$options3$ticks.padding,\n          position = _me$options3.position;\n      var isRotated = me.labelRotation !== 0;\n      var labelsBelowTicks = position !== 'top' && me.axis === 'x';\n\n      if (me.isHorizontal()) {\n        var offsetLeft = me.getPixelForTick(0) - me.left;\n        var offsetRight = me.right - me.getPixelForTick(me.ticks.length - 1);\n        var paddingLeft = 0;\n        var paddingRight = 0;\n\n        if (isRotated) {\n          if (labelsBelowTicks) {\n            paddingLeft = cos * first.width;\n            paddingRight = sin * last.height;\n          } else {\n            paddingLeft = sin * first.height;\n            paddingRight = cos * last.width;\n          }\n        } else if (align === 'start') {\n          paddingRight = last.width;\n        } else if (align === 'end') {\n          paddingLeft = first.width;\n        } else {\n          paddingLeft = first.width / 2;\n          paddingRight = last.width / 2;\n        }\n\n        me.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * me.width / (me.width - offsetLeft), 0);\n        me.paddingRight = Math.max((paddingRight - offsetRight + padding) * me.width / (me.width - offsetRight), 0);\n      } else {\n        var paddingTop = last.height / 2;\n        var paddingBottom = first.height / 2;\n\n        if (align === 'start') {\n          paddingTop = 0;\n          paddingBottom = first.height;\n        } else if (align === 'end') {\n          paddingTop = last.height;\n          paddingBottom = 0;\n        }\n\n        me.paddingTop = paddingTop + padding;\n        me.paddingBottom = paddingBottom + padding;\n      }\n    }\n  }, {\n    key: \"_handleMargins\",\n    value: function _handleMargins() {\n      var me = this;\n\n      if (me._margins) {\n        me._margins.left = Math.max(me.paddingLeft, me._margins.left);\n        me._margins.top = Math.max(me.paddingTop, me._margins.top);\n        me._margins.right = Math.max(me.paddingRight, me._margins.right);\n        me._margins.bottom = Math.max(me.paddingBottom, me._margins.bottom);\n      }\n    }\n  }, {\n    key: \"afterFit\",\n    value: function afterFit() {\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"N\"])(this.options.afterFit, [this]);\n    }\n  }, {\n    key: \"isHorizontal\",\n    value: function isHorizontal() {\n      var _this$options = this.options,\n          axis = _this$options.axis,\n          position = _this$options.position;\n      return position === 'top' || position === 'bottom' || axis === 'x';\n    }\n  }, {\n    key: \"isFullSize\",\n    value: function isFullSize() {\n      return this.options.fullSize;\n    }\n  }, {\n    key: \"_convertTicksToLabels\",\n    value: function _convertTicksToLabels(ticks) {\n      var me = this;\n      me.beforeTickToLabelConversion();\n      me.generateTickLabels(ticks);\n      me.afterTickToLabelConversion();\n    }\n  }, {\n    key: \"_getLabelSizes\",\n    value: function _getLabelSizes() {\n      var me = this;\n      var labelSizes = me._labelSizes;\n\n      if (!labelSizes) {\n        var sampleSize = me.options.ticks.sampleSize;\n        var ticks = me.ticks;\n\n        if (sampleSize < ticks.length) {\n          ticks = sample(ticks, sampleSize);\n        }\n\n        me._labelSizes = labelSizes = me._computeLabelSizes(ticks, ticks.length);\n      }\n\n      return labelSizes;\n    }\n  }, {\n    key: \"_computeLabelSizes\",\n    value: function _computeLabelSizes(ticks, length) {\n      var ctx = this.ctx,\n          caches = this._longestTextCache;\n      var widths = [];\n      var heights = [];\n      var widestLabelSize = 0;\n      var highestLabelSize = 0;\n      var i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n\n      for (i = 0; i < length; ++i) {\n        label = ticks[i].label;\n        tickFont = this._resolveTickFontOptions(i);\n        ctx.font = fontString = tickFont.string;\n        cache = caches[fontString] = caches[fontString] || {\n          data: {},\n          gc: []\n        };\n        lineHeight = tickFont.lineHeight;\n        width = height = 0;\n\n        if (!Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"j\"])(label) && !Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"b\"])(label)) {\n          width = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"R\"])(ctx, cache.data, cache.gc, width, label);\n          height = lineHeight;\n        } else if (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"b\"])(label)) {\n          for (j = 0, jlen = label.length; j < jlen; ++j) {\n            nestedLabel = label[j];\n\n            if (!Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"j\"])(nestedLabel) && !Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"b\"])(nestedLabel)) {\n              width = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"R\"])(ctx, cache.data, cache.gc, width, nestedLabel);\n              height += lineHeight;\n            }\n          }\n        }\n\n        widths.push(width);\n        heights.push(height);\n        widestLabelSize = Math.max(width, widestLabelSize);\n        highestLabelSize = Math.max(height, highestLabelSize);\n      }\n\n      garbageCollect(caches, length);\n      var widest = widths.indexOf(widestLabelSize);\n      var highest = heights.indexOf(highestLabelSize);\n\n      var valueAt = function valueAt(idx) {\n        return {\n          width: widths[idx] || 0,\n          height: heights[idx] || 0\n        };\n      };\n\n      return {\n        first: valueAt(0),\n        last: valueAt(length - 1),\n        widest: valueAt(widest),\n        highest: valueAt(highest),\n        widths: widths,\n        heights: heights\n      };\n    }\n  }, {\n    key: \"getLabelForValue\",\n    value: function getLabelForValue(value) {\n      return value;\n    }\n  }, {\n    key: \"getPixelForValue\",\n    value: function getPixelForValue(value, index) {\n      return NaN;\n    }\n  }, {\n    key: \"getValueForPixel\",\n    value: function getValueForPixel(pixel) {}\n  }, {\n    key: \"getPixelForTick\",\n    value: function getPixelForTick(index) {\n      var ticks = this.ticks;\n\n      if (index < 0 || index > ticks.length - 1) {\n        return null;\n      }\n\n      return this.getPixelForValue(ticks[index].value);\n    }\n  }, {\n    key: \"getPixelForDecimal\",\n    value: function getPixelForDecimal(decimal) {\n      var me = this;\n\n      if (me._reversePixels) {\n        decimal = 1 - decimal;\n      }\n\n      var pixel = me._startPixel + decimal * me._length;\n      return Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"S\"])(me._alignToPixels ? Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"U\"])(me.chart, pixel, 0) : pixel);\n    }\n  }, {\n    key: \"getDecimalForPixel\",\n    value: function getDecimalForPixel(pixel) {\n      var decimal = (pixel - this._startPixel) / this._length;\n      return this._reversePixels ? 1 - decimal : decimal;\n    }\n  }, {\n    key: \"getBasePixel\",\n    value: function getBasePixel() {\n      return this.getPixelForValue(this.getBaseValue());\n    }\n  }, {\n    key: \"getBaseValue\",\n    value: function getBaseValue() {\n      var min = this.min,\n          max = this.max;\n      return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext(index) {\n      var me = this;\n      var ticks = me.ticks || [];\n\n      if (index >= 0 && index < ticks.length) {\n        var tick = ticks[index];\n        return tick.$context || (tick.$context = createTickContext(me.getContext(), index, tick));\n      }\n\n      return me.$context || (me.$context = createScaleContext(me.chart.getContext(), me));\n    }\n  }, {\n    key: \"_tickSize\",\n    value: function _tickSize() {\n      var me = this;\n      var optionTicks = me.options.ticks;\n      var rot = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"t\"])(me.labelRotation);\n      var cos = Math.abs(Math.cos(rot));\n      var sin = Math.abs(Math.sin(rot));\n\n      var labelSizes = me._getLabelSizes();\n\n      var padding = optionTicks.autoSkipPadding || 0;\n      var w = labelSizes ? labelSizes.widest.width + padding : 0;\n      var h = labelSizes ? labelSizes.highest.height + padding : 0;\n      return me.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n    }\n  }, {\n    key: \"_isVisible\",\n    value: function _isVisible() {\n      var display = this.options.display;\n\n      if (display !== 'auto') {\n        return !!display;\n      }\n\n      return this.getMatchingVisibleMetas().length > 0;\n    }\n  }, {\n    key: \"_computeGridLineItems\",\n    value: function _computeGridLineItems(chartArea) {\n      var me = this;\n      var axis = me.axis;\n      var chart = me.chart;\n      var options = me.options;\n      var grid = options.grid,\n          position = options.position;\n      var offset = grid.offset;\n      var isHorizontal = me.isHorizontal();\n      var ticks = me.ticks;\n      var ticksLength = ticks.length + (offset ? 1 : 0);\n      var tl = getTickMarkLength(grid);\n      var items = [];\n      var borderOpts = grid.setContext(me.getContext());\n      var axisWidth = borderOpts.drawBorder ? borderOpts.borderWidth : 0;\n      var axisHalfWidth = axisWidth / 2;\n\n      var alignBorderValue = function alignBorderValue(pixel) {\n        return Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"U\"])(chart, pixel, axisWidth);\n      };\n\n      var borderValue, i, lineValue, alignedLineValue;\n      var tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n\n      if (position === 'top') {\n        borderValue = alignBorderValue(me.bottom);\n        ty1 = me.bottom - tl;\n        ty2 = borderValue - axisHalfWidth;\n        y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n        y2 = chartArea.bottom;\n      } else if (position === 'bottom') {\n        borderValue = alignBorderValue(me.top);\n        y1 = chartArea.top;\n        y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n        ty1 = borderValue + axisHalfWidth;\n        ty2 = me.top + tl;\n      } else if (position === 'left') {\n        borderValue = alignBorderValue(me.right);\n        tx1 = me.right - tl;\n        tx2 = borderValue - axisHalfWidth;\n        x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n        x2 = chartArea.right;\n      } else if (position === 'right') {\n        borderValue = alignBorderValue(me.left);\n        x1 = chartArea.left;\n        x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n        tx1 = borderValue + axisHalfWidth;\n        tx2 = me.left + tl;\n      } else if (axis === 'x') {\n        if (position === 'center') {\n          borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n        } else if (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"i\"])(position)) {\n          var positionAxisID = Object.keys(position)[0];\n          var value = position[positionAxisID];\n          borderValue = alignBorderValue(me.chart.scales[positionAxisID].getPixelForValue(value));\n        }\n\n        y1 = chartArea.top;\n        y2 = chartArea.bottom;\n        ty1 = borderValue + axisHalfWidth;\n        ty2 = ty1 + tl;\n      } else if (axis === 'y') {\n        if (position === 'center') {\n          borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n        } else if (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"i\"])(position)) {\n          var _positionAxisID = Object.keys(position)[0];\n          var _value = position[_positionAxisID];\n          borderValue = alignBorderValue(me.chart.scales[_positionAxisID].getPixelForValue(_value));\n        }\n\n        tx1 = borderValue - axisHalfWidth;\n        tx2 = tx1 - tl;\n        x1 = chartArea.left;\n        x2 = chartArea.right;\n      }\n\n      for (i = 0; i < ticksLength; ++i) {\n        var optsAtIndex = grid.setContext(me.getContext(i));\n        var lineWidth = optsAtIndex.lineWidth;\n        var lineColor = optsAtIndex.color;\n        var borderDash = grid.borderDash || [];\n        var borderDashOffset = optsAtIndex.borderDashOffset;\n        var tickWidth = optsAtIndex.tickWidth;\n        var tickColor = optsAtIndex.tickColor;\n        var tickBorderDash = optsAtIndex.tickBorderDash || [];\n        var tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n        lineValue = getPixelForGridLine(me, i, offset);\n\n        if (lineValue === undefined) {\n          continue;\n        }\n\n        alignedLineValue = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"U\"])(chart, lineValue, lineWidth);\n\n        if (isHorizontal) {\n          tx1 = tx2 = x1 = x2 = alignedLineValue;\n        } else {\n          ty1 = ty2 = y1 = y2 = alignedLineValue;\n        }\n\n        items.push({\n          tx1: tx1,\n          ty1: ty1,\n          tx2: tx2,\n          ty2: ty2,\n          x1: x1,\n          y1: y1,\n          x2: x2,\n          y2: y2,\n          width: lineWidth,\n          color: lineColor,\n          borderDash: borderDash,\n          borderDashOffset: borderDashOffset,\n          tickWidth: tickWidth,\n          tickColor: tickColor,\n          tickBorderDash: tickBorderDash,\n          tickBorderDashOffset: tickBorderDashOffset\n        });\n      }\n\n      me._ticksLength = ticksLength;\n      me._borderValue = borderValue;\n      return items;\n    }\n  }, {\n    key: \"_computeLabelItems\",\n    value: function _computeLabelItems(chartArea) {\n      var me = this;\n      var axis = me.axis;\n      var options = me.options;\n      var position = options.position,\n          optionTicks = options.ticks;\n      var isHorizontal = me.isHorizontal();\n      var ticks = me.ticks;\n      var align = optionTicks.align,\n          crossAlign = optionTicks.crossAlign,\n          padding = optionTicks.padding,\n          mirror = optionTicks.mirror;\n      var tl = getTickMarkLength(options.grid);\n      var tickAndPadding = tl + padding;\n      var hTickAndPadding = mirror ? -padding : tickAndPadding;\n      var rotation = -Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"t\"])(me.labelRotation);\n      var items = [];\n      var i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n      var textBaseline = 'middle';\n\n      if (position === 'top') {\n        y = me.bottom - hTickAndPadding;\n        textAlign = me._getXAxisLabelAlignment();\n      } else if (position === 'bottom') {\n        y = me.top + hTickAndPadding;\n        textAlign = me._getXAxisLabelAlignment();\n      } else if (position === 'left') {\n        var ret = me._getYAxisLabelAlignment(tl);\n\n        textAlign = ret.textAlign;\n        x = ret.x;\n      } else if (position === 'right') {\n        var _ret = me._getYAxisLabelAlignment(tl);\n\n        textAlign = _ret.textAlign;\n        x = _ret.x;\n      } else if (axis === 'x') {\n        if (position === 'center') {\n          y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n        } else if (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"i\"])(position)) {\n          var positionAxisID = Object.keys(position)[0];\n          var value = position[positionAxisID];\n          y = me.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n        }\n\n        textAlign = me._getXAxisLabelAlignment();\n      } else if (axis === 'y') {\n        if (position === 'center') {\n          x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n        } else if (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"i\"])(position)) {\n          var _positionAxisID2 = Object.keys(position)[0];\n          var _value2 = position[_positionAxisID2];\n          x = me.chart.scales[_positionAxisID2].getPixelForValue(_value2);\n        }\n\n        textAlign = me._getYAxisLabelAlignment(tl).textAlign;\n      }\n\n      if (axis === 'y') {\n        if (align === 'start') {\n          textBaseline = 'top';\n        } else if (align === 'end') {\n          textBaseline = 'bottom';\n        }\n      }\n\n      var labelSizes = me._getLabelSizes();\n\n      for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n        tick = ticks[i];\n        label = tick.label;\n        var optsAtIndex = optionTicks.setContext(me.getContext(i));\n        pixel = me.getPixelForTick(i) + optionTicks.labelOffset;\n        font = me._resolveTickFontOptions(i);\n        lineHeight = font.lineHeight;\n        lineCount = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"b\"])(label) ? label.length : 1;\n        var halfCount = lineCount / 2;\n        var color = optsAtIndex.color;\n        var strokeColor = optsAtIndex.textStrokeColor;\n        var strokeWidth = optsAtIndex.textStrokeWidth;\n\n        if (isHorizontal) {\n          x = pixel;\n\n          if (position === 'top') {\n            if (crossAlign === 'near' || rotation !== 0) {\n              textOffset = -lineCount * lineHeight + lineHeight / 2;\n            } else if (crossAlign === 'center') {\n              textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n            } else {\n              textOffset = -labelSizes.highest.height + lineHeight / 2;\n            }\n          } else {\n            if (crossAlign === 'near' || rotation !== 0) {\n              textOffset = lineHeight / 2;\n            } else if (crossAlign === 'center') {\n              textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n            } else {\n              textOffset = labelSizes.highest.height - lineCount * lineHeight;\n            }\n          }\n\n          if (mirror) {\n            textOffset *= -1;\n          }\n        } else {\n          y = pixel;\n          textOffset = (1 - lineCount) * lineHeight / 2;\n        }\n\n        var backdrop = void 0;\n\n        if (optsAtIndex.showLabelBackdrop) {\n          var labelPadding = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"C\"])(optsAtIndex.backdropPadding);\n          var height = labelSizes.heights[i];\n          var width = labelSizes.widths[i];\n          var top = y + textOffset - labelPadding.top;\n          var left = x - labelPadding.left;\n\n          switch (textBaseline) {\n            case 'middle':\n              top -= height / 2;\n              break;\n\n            case 'bottom':\n              top -= height;\n              break;\n          }\n\n          switch (textAlign) {\n            case 'center':\n              left -= width / 2;\n              break;\n\n            case 'right':\n              left -= width;\n              break;\n          }\n\n          backdrop = {\n            left: left,\n            top: top,\n            width: width + labelPadding.width,\n            height: height + labelPadding.height,\n            color: optsAtIndex.backdropColor\n          };\n        }\n\n        items.push({\n          rotation: rotation,\n          label: label,\n          font: font,\n          color: color,\n          strokeColor: strokeColor,\n          strokeWidth: strokeWidth,\n          textOffset: textOffset,\n          textAlign: textAlign,\n          textBaseline: textBaseline,\n          translation: [x, y],\n          backdrop: backdrop\n        });\n      }\n\n      return items;\n    }\n  }, {\n    key: \"_getXAxisLabelAlignment\",\n    value: function _getXAxisLabelAlignment() {\n      var me = this;\n      var _me$options4 = me.options,\n          position = _me$options4.position,\n          ticks = _me$options4.ticks;\n      var rotation = -Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"t\"])(me.labelRotation);\n\n      if (rotation) {\n        return position === 'top' ? 'left' : 'right';\n      }\n\n      var align = 'center';\n\n      if (ticks.align === 'start') {\n        align = 'left';\n      } else if (ticks.align === 'end') {\n        align = 'right';\n      }\n\n      return align;\n    }\n  }, {\n    key: \"_getYAxisLabelAlignment\",\n    value: function _getYAxisLabelAlignment(tl) {\n      var me = this;\n      var _me$options5 = me.options,\n          position = _me$options5.position,\n          _me$options5$ticks = _me$options5.ticks,\n          crossAlign = _me$options5$ticks.crossAlign,\n          mirror = _me$options5$ticks.mirror,\n          padding = _me$options5$ticks.padding;\n\n      var labelSizes = me._getLabelSizes();\n\n      var tickAndPadding = tl + padding;\n      var widest = labelSizes.widest.width;\n      var textAlign;\n      var x;\n\n      if (position === 'left') {\n        if (mirror) {\n          textAlign = 'left';\n          x = me.right + padding;\n        } else {\n          x = me.right - tickAndPadding;\n\n          if (crossAlign === 'near') {\n            textAlign = 'right';\n          } else if (crossAlign === 'center') {\n            textAlign = 'center';\n            x -= widest / 2;\n          } else {\n            textAlign = 'left';\n            x = me.left;\n          }\n        }\n      } else if (position === 'right') {\n        if (mirror) {\n          textAlign = 'right';\n          x = me.left + padding;\n        } else {\n          x = me.left + tickAndPadding;\n\n          if (crossAlign === 'near') {\n            textAlign = 'left';\n          } else if (crossAlign === 'center') {\n            textAlign = 'center';\n            x += widest / 2;\n          } else {\n            textAlign = 'right';\n            x = me.right;\n          }\n        }\n      } else {\n        textAlign = 'right';\n      }\n\n      return {\n        textAlign: textAlign,\n        x: x\n      };\n    }\n  }, {\n    key: \"_computeLabelArea\",\n    value: function _computeLabelArea() {\n      var me = this;\n\n      if (me.options.ticks.mirror) {\n        return;\n      }\n\n      var chart = me.chart;\n      var position = me.options.position;\n\n      if (position === 'left' || position === 'right') {\n        return {\n          top: 0,\n          left: me.left,\n          bottom: chart.height,\n          right: me.right\n        };\n      }\n\n      if (position === 'top' || position === 'bottom') {\n        return {\n          top: me.top,\n          left: 0,\n          bottom: me.bottom,\n          right: chart.width\n        };\n      }\n    }\n  }, {\n    key: \"drawBackground\",\n    value: function drawBackground() {\n      var ctx = this.ctx,\n          backgroundColor = this.options.backgroundColor,\n          left = this.left,\n          top = this.top,\n          width = this.width,\n          height = this.height;\n\n      if (backgroundColor) {\n        ctx.save();\n        ctx.fillStyle = backgroundColor;\n        ctx.fillRect(left, top, width, height);\n        ctx.restore();\n      }\n    }\n  }, {\n    key: \"getLineWidthForValue\",\n    value: function getLineWidthForValue(value) {\n      var me = this;\n      var grid = me.options.grid;\n\n      if (!me._isVisible() || !grid.display) {\n        return 0;\n      }\n\n      var ticks = me.ticks;\n      var index = ticks.findIndex(function (t) {\n        return t.value === value;\n      });\n\n      if (index >= 0) {\n        var opts = grid.setContext(me.getContext(index));\n        return opts.lineWidth;\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"drawGrid\",\n    value: function drawGrid(chartArea) {\n      var me = this;\n      var grid = me.options.grid;\n      var ctx = me.ctx;\n\n      var items = me._gridLineItems || (me._gridLineItems = me._computeGridLineItems(chartArea));\n\n      var i, ilen;\n\n      var drawLine = function drawLine(p1, p2, style) {\n        if (!style.width || !style.color) {\n          return;\n        }\n\n        ctx.save();\n        ctx.lineWidth = style.width;\n        ctx.strokeStyle = style.color;\n        ctx.setLineDash(style.borderDash || []);\n        ctx.lineDashOffset = style.borderDashOffset;\n        ctx.beginPath();\n        ctx.moveTo(p1.x, p1.y);\n        ctx.lineTo(p2.x, p2.y);\n        ctx.stroke();\n        ctx.restore();\n      };\n\n      if (grid.display) {\n        for (i = 0, ilen = items.length; i < ilen; ++i) {\n          var item = items[i];\n\n          if (grid.drawOnChartArea) {\n            drawLine({\n              x: item.x1,\n              y: item.y1\n            }, {\n              x: item.x2,\n              y: item.y2\n            }, item);\n          }\n\n          if (grid.drawTicks) {\n            drawLine({\n              x: item.tx1,\n              y: item.ty1\n            }, {\n              x: item.tx2,\n              y: item.ty2\n            }, {\n              color: item.tickColor,\n              width: item.tickWidth,\n              borderDash: item.tickBorderDash,\n              borderDashOffset: item.tickBorderDashOffset\n            });\n          }\n        }\n      }\n    }\n  }, {\n    key: \"drawBorder\",\n    value: function drawBorder() {\n      var me = this;\n      var chart = me.chart,\n          ctx = me.ctx,\n          grid = me.options.grid;\n      var borderOpts = grid.setContext(me.getContext());\n      var axisWidth = grid.drawBorder ? borderOpts.borderWidth : 0;\n\n      if (!axisWidth) {\n        return;\n      }\n\n      var lastLineWidth = grid.setContext(me.getContext(0)).lineWidth;\n      var borderValue = me._borderValue;\n      var x1, x2, y1, y2;\n\n      if (me.isHorizontal()) {\n        x1 = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"U\"])(chart, me.left, axisWidth) - axisWidth / 2;\n        x2 = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"U\"])(chart, me.right, lastLineWidth) + lastLineWidth / 2;\n        y1 = y2 = borderValue;\n      } else {\n        y1 = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"U\"])(chart, me.top, axisWidth) - axisWidth / 2;\n        y2 = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"U\"])(chart, me.bottom, lastLineWidth) + lastLineWidth / 2;\n        x1 = x2 = borderValue;\n      }\n\n      ctx.save();\n      ctx.lineWidth = borderOpts.borderWidth;\n      ctx.strokeStyle = borderOpts.borderColor;\n      ctx.beginPath();\n      ctx.moveTo(x1, y1);\n      ctx.lineTo(x2, y2);\n      ctx.stroke();\n      ctx.restore();\n    }\n  }, {\n    key: \"drawLabels\",\n    value: function drawLabels(chartArea) {\n      var me = this;\n      var optionTicks = me.options.ticks;\n\n      if (!optionTicks.display) {\n        return;\n      }\n\n      var ctx = me.ctx;\n\n      var area = me._computeLabelArea();\n\n      if (area) {\n        Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"k\"])(ctx, area);\n      }\n\n      var items = me._labelItems || (me._labelItems = me._computeLabelItems(chartArea));\n\n      var i, ilen;\n\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        var item = items[i];\n        var tickFont = item.font;\n        var label = item.label;\n\n        if (item.backdrop) {\n          ctx.fillStyle = item.backdrop.color;\n          ctx.fillRect(item.backdrop.left, item.backdrop.top, item.backdrop.width, item.backdrop.height);\n        }\n\n        var y = item.textOffset;\n        Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"V\"])(ctx, label, 0, y, tickFont, item);\n      }\n\n      if (area) {\n        Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"m\"])(ctx);\n      }\n    }\n  }, {\n    key: \"drawTitle\",\n    value: function drawTitle() {\n      var ctx = this.ctx,\n          _this$options2 = this.options,\n          position = _this$options2.position,\n          title = _this$options2.title,\n          reverse = _this$options2.reverse;\n\n      if (!title.display) {\n        return;\n      }\n\n      var font = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"W\"])(title.font);\n      var padding = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"C\"])(title.padding);\n      var align = title.align;\n      var offset = font.lineHeight / 2;\n\n      if (position === 'bottom') {\n        offset += padding.bottom;\n\n        if (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"b\"])(title.text)) {\n          offset += font.lineHeight * (title.text.length - 1);\n        }\n      } else {\n        offset += padding.top;\n      }\n\n      var _titleArgs = titleArgs(this, offset, position, align),\n          titleX = _titleArgs.titleX,\n          titleY = _titleArgs.titleY,\n          maxWidth = _titleArgs.maxWidth,\n          rotation = _titleArgs.rotation;\n\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"V\"])(ctx, title.text, 0, 0, font, {\n        color: title.color,\n        maxWidth: maxWidth,\n        rotation: rotation,\n        textAlign: titleAlign(align, position, reverse),\n        textBaseline: 'middle',\n        translation: [titleX, titleY]\n      });\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(chartArea) {\n      var me = this;\n\n      if (!me._isVisible()) {\n        return;\n      }\n\n      me.drawBackground();\n      me.drawGrid(chartArea);\n      me.drawBorder();\n      me.drawTitle();\n      me.drawLabels(chartArea);\n    }\n  }, {\n    key: \"_layers\",\n    value: function _layers() {\n      var me = this;\n      var opts = me.options;\n      var tz = opts.ticks && opts.ticks.z || 0;\n      var gz = opts.grid && opts.grid.z || 0;\n\n      if (!me._isVisible() || me.draw !== Scale.prototype.draw) {\n        return [{\n          z: tz,\n          draw: function draw(chartArea) {\n            me.draw(chartArea);\n          }\n        }];\n      }\n\n      return [{\n        z: gz,\n        draw: function draw(chartArea) {\n          me.drawBackground();\n          me.drawGrid(chartArea);\n          me.drawTitle();\n        }\n      }, {\n        z: gz + 1,\n        draw: function draw() {\n          me.drawBorder();\n        }\n      }, {\n        z: tz,\n        draw: function draw(chartArea) {\n          me.drawLabels(chartArea);\n        }\n      }];\n    }\n  }, {\n    key: \"getMatchingVisibleMetas\",\n    value: function getMatchingVisibleMetas(type) {\n      var me = this;\n      var metas = me.chart.getSortedVisibleDatasetMetas();\n      var axisID = me.axis + 'AxisID';\n      var result = [];\n      var i, ilen;\n\n      for (i = 0, ilen = metas.length; i < ilen; ++i) {\n        var meta = metas[i];\n\n        if (meta[axisID] === me.id && (!type || meta.type === type)) {\n          result.push(meta);\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_resolveTickFontOptions\",\n    value: function _resolveTickFontOptions(index) {\n      var opts = this.options.ticks.setContext(this.getContext(index));\n      return Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"W\"])(opts.font);\n    }\n  }, {\n    key: \"_maxDigits\",\n    value: function _maxDigits() {\n      var me = this;\n\n      var fontSize = me._resolveTickFontOptions(0).lineHeight;\n\n      return (me.isHorizontal() ? me.width : me.height) / fontSize;\n    }\n  }]);\n\n  return Scale;\n}(Element);\n\nvar TypedRegistry = /*#__PURE__*/function () {\n  function TypedRegistry(type, scope, override) {\n    Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this, TypedRegistry);\n\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(TypedRegistry, [{\n    key: \"isForType\",\n    value: function isForType(type) {\n      return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n    }\n  }, {\n    key: \"register\",\n    value: function register(item) {\n      var me = this;\n      var proto = Object.getPrototypeOf(item);\n      var parentScope;\n\n      if (isIChartComponent(proto)) {\n        parentScope = me.register(proto);\n      }\n\n      var items = me.items;\n      var id = item.id;\n      var scope = me.scope + '.' + id;\n\n      if (!id) {\n        throw new Error('class does not have id: ' + item);\n      }\n\n      if (id in items) {\n        return scope;\n      }\n\n      items[id] = item;\n      registerDefaults(item, scope, parentScope);\n\n      if (me.override) {\n        _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"d\"].override(item.id, item.overrides);\n      }\n\n      return scope;\n    }\n  }, {\n    key: \"get\",\n    value: function get(id) {\n      return this.items[id];\n    }\n  }, {\n    key: \"unregister\",\n    value: function unregister(item) {\n      var items = this.items;\n      var id = item.id;\n      var scope = this.scope;\n\n      if (id in items) {\n        delete items[id];\n      }\n\n      if (scope && id in _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"d\"][scope]) {\n        delete _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"d\"][scope][id];\n\n        if (this.override) {\n          delete _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"Z\"][id];\n        }\n      }\n    }\n  }]);\n\n  return TypedRegistry;\n}();\n\nfunction registerDefaults(item, scope, parentScope) {\n  var itemDefaults = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"$\"])(Object.create(null), [parentScope ? _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"d\"].get(parentScope) : {}, _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"d\"].get(scope), item.defaults]);\n  _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"d\"].set(scope, itemDefaults);\n\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n\n  if (item.descriptors) {\n    _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"d\"].describe(scope, item.descriptors);\n  }\n}\n\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(function (property) {\n    var propertyParts = property.split('.');\n    var sourceName = propertyParts.pop();\n    var sourceScope = [scope].concat(propertyParts).join('.');\n    var parts = routes[property].split('.');\n    var targetName = parts.pop();\n    var targetScope = parts.join('.');\n    _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"d\"].route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\n\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\n\nvar Registry = /*#__PURE__*/function () {\n  function Registry() {\n    Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this, Registry);\n\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(Registry, [{\n    key: \"add\",\n    value: function add() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      this._each('register', args);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      this._each('unregister', args);\n    }\n  }, {\n    key: \"addControllers\",\n    value: function addControllers() {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      this._each('register', args, this.controllers);\n    }\n  }, {\n    key: \"addElements\",\n    value: function addElements() {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      this._each('register', args, this.elements);\n    }\n  }, {\n    key: \"addPlugins\",\n    value: function addPlugins() {\n      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n\n      this._each('register', args, this.plugins);\n    }\n  }, {\n    key: \"addScales\",\n    value: function addScales() {\n      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n\n      this._each('register', args, this.scales);\n    }\n  }, {\n    key: \"getController\",\n    value: function getController(id) {\n      return this._get(id, this.controllers, 'controller');\n    }\n  }, {\n    key: \"getElement\",\n    value: function getElement(id) {\n      return this._get(id, this.elements, 'element');\n    }\n  }, {\n    key: \"getPlugin\",\n    value: function getPlugin(id) {\n      return this._get(id, this.plugins, 'plugin');\n    }\n  }, {\n    key: \"getScale\",\n    value: function getScale(id) {\n      return this._get(id, this.scales, 'scale');\n    }\n  }, {\n    key: \"removeControllers\",\n    value: function removeControllers() {\n      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n\n      this._each('unregister', args, this.controllers);\n    }\n  }, {\n    key: \"removeElements\",\n    value: function removeElements() {\n      for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n        args[_key8] = arguments[_key8];\n      }\n\n      this._each('unregister', args, this.elements);\n    }\n  }, {\n    key: \"removePlugins\",\n    value: function removePlugins() {\n      for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n        args[_key9] = arguments[_key9];\n      }\n\n      this._each('unregister', args, this.plugins);\n    }\n  }, {\n    key: \"removeScales\",\n    value: function removeScales() {\n      for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n        args[_key10] = arguments[_key10];\n      }\n\n      this._each('unregister', args, this.scales);\n    }\n  }, {\n    key: \"_each\",\n    value: function _each(method, args, typedRegistry) {\n      var me = this;\n\n      Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(args).forEach(function (arg) {\n        var reg = typedRegistry || me._getRegistryForType(arg);\n\n        if (typedRegistry || reg.isForType(arg) || reg === me.plugins && arg.id) {\n          me._exec(method, reg, arg);\n        } else {\n          Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"D\"])(arg, function (item) {\n            var itemReg = typedRegistry || me._getRegistryForType(item);\n\n            me._exec(method, itemReg, item);\n          });\n        }\n      });\n    }\n  }, {\n    key: \"_exec\",\n    value: function _exec(method, registry, component) {\n      var camelMethod = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"a0\"])(method);\n\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"N\"])(component['before' + camelMethod], [], component);\n      registry[method](component);\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"N\"])(component['after' + camelMethod], [], component);\n    }\n  }, {\n    key: \"_getRegistryForType\",\n    value: function _getRegistryForType(type) {\n      for (var i = 0; i < this._typedRegistries.length; i++) {\n        var reg = this._typedRegistries[i];\n\n        if (reg.isForType(type)) {\n          return reg;\n        }\n      }\n\n      return this.plugins;\n    }\n  }, {\n    key: \"_get\",\n    value: function _get(id, typedRegistry, type) {\n      var item = typedRegistry.get(id);\n\n      if (item === undefined) {\n        throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n      }\n\n      return item;\n    }\n  }]);\n\n  return Registry;\n}();\n\nvar registry = new Registry();\n\nvar PluginService = /*#__PURE__*/function () {\n  function PluginService() {\n    Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this, PluginService);\n\n    this._init = [];\n  }\n\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(PluginService, [{\n    key: \"notify\",\n    value: function notify(chart, hook, args, filter) {\n      var me = this;\n\n      if (hook === 'beforeInit') {\n        me._init = me._createDescriptors(chart, true);\n\n        me._notify(me._init, chart, 'install');\n      }\n\n      var descriptors = filter ? me._descriptors(chart).filter(filter) : me._descriptors(chart);\n\n      var result = me._notify(descriptors, chart, hook, args);\n\n      if (hook === 'destroy') {\n        me._notify(descriptors, chart, 'stop');\n\n        me._notify(me._init, chart, 'uninstall');\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_notify\",\n    value: function _notify(descriptors, chart, hook, args) {\n      args = args || {};\n\n      var _iterator5 = _createForOfIteratorHelper(descriptors),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var descriptor = _step5.value;\n          var plugin = descriptor.plugin;\n          var method = plugin[hook];\n          var params = [chart, args, descriptor.options];\n\n          if (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"N\"])(method, params, plugin) === false && args.cancelable) {\n            return false;\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      return true;\n    }\n  }, {\n    key: \"invalidate\",\n    value: function invalidate() {\n      if (!Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"j\"])(this._cache)) {\n        this._oldCache = this._cache;\n        this._cache = undefined;\n      }\n    }\n  }, {\n    key: \"_descriptors\",\n    value: function _descriptors(chart) {\n      if (this._cache) {\n        return this._cache;\n      }\n\n      var descriptors = this._cache = this._createDescriptors(chart);\n\n      this._notifyStateChanges(chart);\n\n      return descriptors;\n    }\n  }, {\n    key: \"_createDescriptors\",\n    value: function _createDescriptors(chart, all) {\n      var config = chart && chart.config;\n      var options = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"v\"])(config.options && config.options.plugins, {});\n      var plugins = allPlugins(config);\n      return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n    }\n  }, {\n    key: \"_notifyStateChanges\",\n    value: function _notifyStateChanges(chart) {\n      var previousDescriptors = this._oldCache || [];\n      var descriptors = this._cache;\n\n      var diff = function diff(a, b) {\n        return a.filter(function (x) {\n          return !b.some(function (y) {\n            return x.plugin.id === y.plugin.id;\n          });\n        });\n      };\n\n      this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n\n      this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n    }\n  }]);\n\n  return PluginService;\n}();\n\nfunction allPlugins(config) {\n  var plugins = [];\n  var keys = Object.keys(registry.plugins.items);\n\n  for (var i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n\n  var local = config.plugins || [];\n\n  for (var _i = 0; _i < local.length; _i++) {\n    var plugin = local[_i];\n\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n    }\n  }\n\n  return plugins;\n}\n\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n\n  if (options === true) {\n    return {};\n  }\n\n  return options;\n}\n\nfunction createDescriptors(chart, plugins, options, all) {\n  var result = [];\n  var context = chart.getContext();\n\n  for (var i = 0; i < plugins.length; i++) {\n    var plugin = plugins[i];\n    var id = plugin.id;\n    var opts = getOpts(options[id], all);\n\n    if (opts === null) {\n      continue;\n    }\n\n    result.push({\n      plugin: plugin,\n      options: pluginOpts(chart.config, plugin, opts, context)\n    });\n  }\n\n  return result;\n}\n\nfunction pluginOpts(config, plugin, opts, context) {\n  var keys = config.pluginScopeKeys(plugin);\n  var scopes = config.getOptionScopes(opts, keys);\n  return config.createResolver(scopes, context, [''], {\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\n\nfunction getIndexAxis(type, options) {\n  var datasetDefaults = _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"d\"].datasets[type] || {};\n  var datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\n\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  var axis = id;\n\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n\n  return axis;\n}\n\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\n\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\n\nfunction determineAxis(id, scaleOptions) {\n  if (id === 'x' || id === 'y') {\n    return id;\n  }\n\n  return scaleOptions.axis || axisFromPosition(scaleOptions.position) || id.charAt(0).toLowerCase();\n}\n\nfunction mergeScaleConfig(config, options) {\n  var chartDefaults = _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"Z\"][config.type] || {\n    scales: {}\n  };\n  var configScales = options.scales || {};\n  var chartIndexAxis = getIndexAxis(config.type, options);\n  var firstIDs = Object.create(null);\n  var scales = Object.create(null);\n  Object.keys(configScales).forEach(function (id) {\n    var scaleConf = configScales[id];\n    var axis = determineAxis(id, scaleConf);\n    var defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    var defaultScaleOptions = chartDefaults.scales || {};\n    firstIDs[axis] = firstIDs[axis] || id;\n    scales[id] = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"a6\"])(Object.create(null), [{\n      axis: axis\n    }, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n  config.data.datasets.forEach(function (dataset) {\n    var type = dataset.type || config.type;\n    var indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    var datasetDefaults = _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"Z\"][type] || {};\n    var defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(function (defaultID) {\n      var axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      var id = dataset[axis + 'AxisID'] || firstIDs[axis] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"a6\"])(scales[id], [{\n        axis: axis\n      }, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n  Object.keys(scales).forEach(function (key) {\n    var scale = scales[key];\n    Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"a6\"])(scale, [_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"d\"].scales[scale.type], _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"d\"].scale]);\n  });\n  return scales;\n}\n\nfunction initOptions(config) {\n  var options = config.options || (config.options = {});\n  options.plugins = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"v\"])(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\n\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\n\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n  initOptions(config);\n  return config;\n}\n\nvar keyCache = new Map();\nvar keysCached = new Set();\n\nfunction cachedKeys(cacheKey, generate) {\n  var keys = keyCache.get(cacheKey);\n\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n\n  return keys;\n}\n\nvar addIfFound = function addIfFound(set, obj, key) {\n  var opts = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"f\"])(obj, key);\n\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\n\nvar Config = /*#__PURE__*/function () {\n  function Config(config) {\n    Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this, Config);\n\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(Config, [{\n    key: \"update\",\n    value: function update() {\n      var config = this._config;\n      this.clearCache();\n      initOptions(config);\n    }\n  }, {\n    key: \"clearCache\",\n    value: function clearCache() {\n      this._scopeCache.clear();\n\n      this._resolverCache.clear();\n    }\n  }, {\n    key: \"datasetScopeKeys\",\n    value: function datasetScopeKeys(datasetType) {\n      return cachedKeys(datasetType, function () {\n        return [[\"datasets.\".concat(datasetType), '']];\n      });\n    }\n  }, {\n    key: \"datasetAnimationScopeKeys\",\n    value: function datasetAnimationScopeKeys(datasetType, transition) {\n      return cachedKeys(\"\".concat(datasetType, \".transition.\").concat(transition), function () {\n        return [[\"datasets.\".concat(datasetType, \".transitions.\").concat(transition), \"transitions.\".concat(transition)], [\"datasets.\".concat(datasetType), '']];\n      });\n    }\n  }, {\n    key: \"datasetElementScopeKeys\",\n    value: function datasetElementScopeKeys(datasetType, elementType) {\n      return cachedKeys(\"\".concat(datasetType, \"-\").concat(elementType), function () {\n        return [[\"datasets.\".concat(datasetType, \".elements.\").concat(elementType), \"datasets.\".concat(datasetType), \"elements.\".concat(elementType), '']];\n      });\n    }\n  }, {\n    key: \"pluginScopeKeys\",\n    value: function pluginScopeKeys(plugin) {\n      var id = plugin.id;\n      var type = this.type;\n      return cachedKeys(\"\".concat(type, \"-plugin-\").concat(id), function () {\n        return [[\"plugins.\".concat(id)].concat(Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(plugin.additionalOptionScopes || []))];\n      });\n    }\n  }, {\n    key: \"_cachedScopes\",\n    value: function _cachedScopes(mainScope, resetCache) {\n      var _scopeCache = this._scopeCache;\n\n      var cache = _scopeCache.get(mainScope);\n\n      if (!cache || resetCache) {\n        cache = new Map();\n\n        _scopeCache.set(mainScope, cache);\n      }\n\n      return cache;\n    }\n  }, {\n    key: \"getOptionScopes\",\n    value: function getOptionScopes(mainScope, keyLists, resetCache) {\n      var options = this.options,\n          type = this.type;\n\n      var cache = this._cachedScopes(mainScope, resetCache);\n\n      var cached = cache.get(keyLists);\n\n      if (cached) {\n        return cached;\n      }\n\n      var scopes = new Set();\n      keyLists.forEach(function (keys) {\n        if (mainScope) {\n          scopes.add(mainScope);\n          keys.forEach(function (key) {\n            return addIfFound(scopes, mainScope, key);\n          });\n        }\n\n        keys.forEach(function (key) {\n          return addIfFound(scopes, options, key);\n        });\n        keys.forEach(function (key) {\n          return addIfFound(scopes, _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"Z\"][type] || {}, key);\n        });\n        keys.forEach(function (key) {\n          return addIfFound(scopes, _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"d\"], key);\n        });\n        keys.forEach(function (key) {\n          return addIfFound(scopes, _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"a1\"], key);\n        });\n      });\n\n      var array = Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(scopes);\n\n      if (keysCached.has(keyLists)) {\n        cache.set(keyLists, array);\n      }\n\n      return array;\n    }\n  }, {\n    key: \"chartOptionScopes\",\n    value: function chartOptionScopes() {\n      var options = this.options,\n          type = this.type;\n      return [options, _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"Z\"][type] || {}, _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"d\"].datasets[type] || {}, {\n        type: type\n      }, _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"d\"], _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"a1\"]];\n    }\n  }, {\n    key: \"resolveNamedOptions\",\n    value: function resolveNamedOptions(scopes, names, context) {\n      var prefixes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [''];\n      var result = {\n        $shared: true\n      };\n\n      var _getResolver = getResolver(this._resolverCache, scopes, prefixes),\n          resolver = _getResolver.resolver,\n          subPrefixes = _getResolver.subPrefixes;\n\n      var options = resolver;\n\n      if (needContext(resolver, names)) {\n        result.$shared = false;\n        context = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"a2\"])(context) ? context() : context;\n        var subResolver = this.createResolver(scopes, context, subPrefixes);\n        options = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"a3\"])(resolver, context, subResolver);\n      }\n\n      var _iterator6 = _createForOfIteratorHelper(names),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var prop = _step6.value;\n          result[prop] = options[prop];\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      return result;\n    }\n  }, {\n    key: \"createResolver\",\n    value: function createResolver(scopes, context) {\n      var prefixes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [''];\n      var descriptorDefaults = arguments.length > 3 ? arguments[3] : undefined;\n\n      var _getResolver2 = getResolver(this._resolverCache, scopes, prefixes),\n          resolver = _getResolver2.resolver;\n\n      return Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"i\"])(context) ? Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"a3\"])(resolver, context, undefined, descriptorDefaults) : resolver;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._config.type;\n    },\n    set: function set(type) {\n      this._config.type = type;\n    }\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this._config.data;\n    },\n    set: function set(data) {\n      this._config.data = initData(data);\n    }\n  }, {\n    key: \"options\",\n    get: function get() {\n      return this._config.options;\n    },\n    set: function set(options) {\n      this._config.options = options;\n    }\n  }, {\n    key: \"plugins\",\n    get: function get() {\n      return this._config.plugins;\n    }\n  }]);\n\n  return Config;\n}();\n\nfunction getResolver(resolverCache, scopes, prefixes) {\n  var cache = resolverCache.get(scopes);\n\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n\n  var cacheKey = prefixes.join();\n  var cached = cache.get(cacheKey);\n\n  if (!cached) {\n    var resolver = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"a4\"])(scopes, prefixes);\n\n    cached = {\n      resolver: resolver,\n      subPrefixes: prefixes.filter(function (p) {\n        return !p.toLowerCase().includes('hover');\n      })\n    };\n    cache.set(cacheKey, cached);\n  }\n\n  return cached;\n}\n\nfunction needContext(proxy, names) {\n  var _descriptors2 = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"a5\"])(proxy),\n      isScriptable = _descriptors2.isScriptable,\n      isIndexable = _descriptors2.isIndexable;\n\n  var _iterator7 = _createForOfIteratorHelper(names),\n      _step7;\n\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var prop = _step7.value;\n\n      if (isScriptable(prop) && Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"a2\"])(proxy[prop]) || isIndexable(prop) && Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"b\"])(proxy[prop])) {\n        return true;\n      }\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n\n  return false;\n}\n\nvar version = \"3.3.2\";\nvar KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\n\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\n\nfunction compare2Level(l1, l2) {\n  return function (a, b) {\n    return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n  };\n}\n\nfunction onAnimationsComplete(context) {\n  var chart = context.chart;\n  var animationOptions = chart.options.animation;\n  chart.notifyPlugins('afterRender');\n  Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"N\"])(animationOptions && animationOptions.onComplete, [context], chart);\n}\n\nfunction onAnimationProgress(context) {\n  var chart = context.chart;\n  var animationOptions = chart.options.animation;\n  Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"N\"])(animationOptions && animationOptions.onProgress, [context], chart);\n}\n\nfunction isDomSupported() {\n  return  true && typeof document !== 'undefined';\n}\n\nfunction getCanvas(item) {\n  if (isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    item = item[0];\n  }\n\n  if (item && item.canvas) {\n    item = item.canvas;\n  }\n\n  return item;\n}\n\nvar instances = {};\n\nvar getChart = function getChart(key) {\n  var canvas = getCanvas(key);\n  return Object.values(instances).filter(function (c) {\n    return c.canvas === canvas;\n  }).pop();\n};\n\nvar Chart = /*#__PURE__*/function () {\n  function Chart(item, config) {\n    var _this5 = this;\n\n    Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this, Chart);\n\n    var me = this;\n    this.config = config = new Config(config);\n    var initialCanvas = getCanvas(item);\n    var existingChart = getChart(initialCanvas);\n\n    if (existingChart) {\n      throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas can be reused.');\n    }\n\n    var options = config.createResolver(config.chartOptionScopes(), me.getContext());\n    this.platform = me._initializePlatform(initialCanvas, config);\n    var context = me.platform.acquireContext(initialCanvas, options.aspectRatio);\n    var canvas = context && context.canvas;\n    var height = canvas && canvas.height;\n    var width = canvas && canvas.width;\n    this.id = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"a7\"])();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this.scale = undefined;\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"a8\"])(function () {\n      return _this5.update('resize');\n    }, options.resizeDelay || 0);\n    instances[me.id] = me;\n\n    if (!context || !canvas) {\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n\n    animator.listen(me, 'complete', onAnimationsComplete);\n    animator.listen(me, 'progress', onAnimationProgress);\n\n    me._initialize();\n\n    if (me.attached) {\n      me.update();\n    }\n  }\n\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(Chart, [{\n    key: \"_initialize\",\n    value: function _initialize() {\n      var me = this;\n      me.notifyPlugins('beforeInit');\n\n      if (me.options.responsive) {\n        me.resize();\n      } else {\n        Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"a9\"])(me, me.options.devicePixelRatio);\n      }\n\n      me.bindEvents();\n      me.notifyPlugins('afterInit');\n      return me;\n    }\n  }, {\n    key: \"_initializePlatform\",\n    value: function _initializePlatform(canvas, config) {\n      if (config.platform) {\n        return new config.platform();\n      } else if (!isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n        return new BasicPlatform();\n      }\n\n      return new DomPlatform();\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"aa\"])(this.canvas, this.ctx);\n      return this;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      animator.stop(this);\n      return this;\n    }\n  }, {\n    key: \"resize\",\n    value: function resize(width, height) {\n      if (!animator.running(this)) {\n        this._resize(width, height);\n      } else {\n        this._resizeBeforeDraw = {\n          width: width,\n          height: height\n        };\n      }\n    }\n  }, {\n    key: \"_resize\",\n    value: function _resize(width, height) {\n      var me = this;\n      var options = me.options;\n      var canvas = me.canvas;\n      var aspectRatio = options.maintainAspectRatio && me.aspectRatio;\n      var newSize = me.platform.getMaximumSize(canvas, width, height, aspectRatio);\n      var newRatio = options.devicePixelRatio || me.platform.getDevicePixelRatio();\n      me.width = newSize.width;\n      me.height = newSize.height;\n      me._aspectRatio = me.aspectRatio;\n\n      if (!Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"a9\"])(me, newRatio, true)) {\n        return;\n      }\n\n      me.notifyPlugins('resize', {\n        size: newSize\n      });\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"N\"])(options.onResize, [me, newSize], me);\n\n      if (me.attached) {\n        if (me._doResize()) {\n          me.render();\n        }\n      }\n    }\n  }, {\n    key: \"ensureScalesHaveIDs\",\n    value: function ensureScalesHaveIDs() {\n      var options = this.options;\n      var scalesOptions = options.scales || {};\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"D\"])(scalesOptions, function (axisOptions, axisID) {\n        axisOptions.id = axisID;\n      });\n    }\n  }, {\n    key: \"buildOrUpdateScales\",\n    value: function buildOrUpdateScales() {\n      var me = this;\n      var options = me.options;\n      var scaleOpts = options.scales;\n      var scales = me.scales;\n      var updated = Object.keys(scales).reduce(function (obj, id) {\n        obj[id] = false;\n        return obj;\n      }, {});\n      var items = [];\n\n      if (scaleOpts) {\n        items = items.concat(Object.keys(scaleOpts).map(function (id) {\n          var scaleOptions = scaleOpts[id];\n          var axis = determineAxis(id, scaleOptions);\n          var isRadial = axis === 'r';\n          var isHorizontal = axis === 'x';\n          return {\n            options: scaleOptions,\n            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n          };\n        }));\n      }\n\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"D\"])(items, function (item) {\n        var scaleOptions = item.options;\n        var id = scaleOptions.id;\n        var axis = determineAxis(id, scaleOptions);\n        var scaleType = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"v\"])(scaleOptions.type, item.dtype);\n\n        if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n          scaleOptions.position = item.dposition;\n        }\n\n        updated[id] = true;\n        var scale = null;\n\n        if (id in scales && scales[id].type === scaleType) {\n          scale = scales[id];\n        } else {\n          var scaleClass = registry.getScale(scaleType);\n          scale = new scaleClass({\n            id: id,\n            type: scaleType,\n            ctx: me.ctx,\n            chart: me\n          });\n          scales[scale.id] = scale;\n        }\n\n        scale.init(scaleOptions, options);\n      });\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"D\"])(updated, function (hasUpdated, id) {\n        if (!hasUpdated) {\n          delete scales[id];\n        }\n      });\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"D\"])(scales, function (scale) {\n        layouts.configure(me, scale, scale.options);\n        layouts.addBox(me, scale);\n      });\n    }\n  }, {\n    key: \"_updateMetasets\",\n    value: function _updateMetasets() {\n      var me = this;\n      var metasets = me._metasets;\n      var numData = me.data.datasets.length;\n      var numMeta = metasets.length;\n      metasets.sort(function (a, b) {\n        return a.index - b.index;\n      });\n\n      if (numMeta > numData) {\n        for (var i = numData; i < numMeta; ++i) {\n          me._destroyDatasetMeta(i);\n        }\n\n        metasets.splice(numData, numMeta - numData);\n      }\n\n      me._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n    }\n  }, {\n    key: \"_removeUnreferencedMetasets\",\n    value: function _removeUnreferencedMetasets() {\n      var me = this;\n      var metasets = me._metasets,\n          datasets = me.data.datasets;\n\n      if (metasets.length > datasets.length) {\n        delete me._stacks;\n      }\n\n      metasets.forEach(function (meta, index) {\n        if (datasets.filter(function (x) {\n          return x === meta._dataset;\n        }).length === 0) {\n          me._destroyDatasetMeta(index);\n        }\n      });\n    }\n  }, {\n    key: \"buildOrUpdateControllers\",\n    value: function buildOrUpdateControllers() {\n      var me = this;\n      var newControllers = [];\n      var datasets = me.data.datasets;\n      var i, ilen;\n\n      me._removeUnreferencedMetasets();\n\n      for (i = 0, ilen = datasets.length; i < ilen; i++) {\n        var dataset = datasets[i];\n        var meta = me.getDatasetMeta(i);\n        var type = dataset.type || me.config.type;\n\n        if (meta.type && meta.type !== type) {\n          me._destroyDatasetMeta(i);\n\n          meta = me.getDatasetMeta(i);\n        }\n\n        meta.type = type;\n        meta.indexAxis = dataset.indexAxis || getIndexAxis(type, me.options);\n        meta.order = dataset.order || 0;\n        meta.index = i;\n        meta.label = '' + dataset.label;\n        meta.visible = me.isDatasetVisible(i);\n\n        if (meta.controller) {\n          meta.controller.updateIndex(i);\n          meta.controller.linkScales();\n        } else {\n          var ControllerClass = registry.getController(type);\n          var _defaults$datasets$ty = _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"d\"].datasets[type],\n              datasetElementType = _defaults$datasets$ty.datasetElementType,\n              dataElementType = _defaults$datasets$ty.dataElementType;\n          Object.assign(ControllerClass.prototype, {\n            dataElementType: registry.getElement(dataElementType),\n            datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n          });\n          meta.controller = new ControllerClass(me, i);\n          newControllers.push(meta.controller);\n        }\n      }\n\n      me._updateMetasets();\n\n      return newControllers;\n    }\n  }, {\n    key: \"_resetElements\",\n    value: function _resetElements() {\n      var me = this;\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"D\"])(me.data.datasets, function (dataset, datasetIndex) {\n        me.getDatasetMeta(datasetIndex).controller.reset();\n      }, me);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this._resetElements();\n\n      this.notifyPlugins('reset');\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {\n      var me = this;\n      var config = me.config;\n      config.update();\n      me._options = config.createResolver(config.chartOptionScopes(), me.getContext());\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"D\"])(me.scales, function (scale) {\n        layouts.removeBox(me, scale);\n      });\n      var animsDisabled = me._animationsDisabled = !me.options.animation;\n      me.ensureScalesHaveIDs();\n      me.buildOrUpdateScales();\n      var existingEvents = new Set(Object.keys(me._listeners));\n      var newEvents = new Set(me.options.events);\n\n      if (!Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"ab\"])(existingEvents, newEvents) || !!this._responsiveListeners !== me.options.responsive) {\n        me.unbindEvents();\n        me.bindEvents();\n      }\n\n      me._plugins.invalidate();\n\n      if (me.notifyPlugins('beforeUpdate', {\n        mode: mode,\n        cancelable: true\n      }) === false) {\n        return;\n      }\n\n      var newControllers = me.buildOrUpdateControllers();\n      me.notifyPlugins('beforeElementsUpdate');\n      var minPadding = 0;\n\n      for (var i = 0, ilen = me.data.datasets.length; i < ilen; i++) {\n        var _me$getDatasetMeta = me.getDatasetMeta(i),\n            controller = _me$getDatasetMeta.controller;\n\n        var reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n        controller.buildOrUpdateElements(reset);\n        minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n      }\n\n      me._minPadding = minPadding;\n\n      me._updateLayout(minPadding);\n\n      if (!animsDisabled) {\n        Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"D\"])(newControllers, function (controller) {\n          controller.reset();\n        });\n      }\n\n      me._updateDatasets(mode);\n\n      me.notifyPlugins('afterUpdate', {\n        mode: mode\n      });\n\n      me._layers.sort(compare2Level('z', '_idx'));\n\n      if (me._lastEvent) {\n        me._eventHandler(me._lastEvent, true);\n      }\n\n      me.render();\n    }\n  }, {\n    key: \"_updateLayout\",\n    value: function _updateLayout(minPadding) {\n      var me = this;\n\n      if (me.notifyPlugins('beforeLayout', {\n        cancelable: true\n      }) === false) {\n        return;\n      }\n\n      layouts.update(me, me.width, me.height, minPadding);\n      var area = me.chartArea;\n      var noArea = area.width <= 0 || area.height <= 0;\n      me._layers = [];\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"D\"])(me.boxes, function (box) {\n        var _me$_layers;\n\n        if (noArea && box.position === 'chartArea') {\n          return;\n        }\n\n        if (box.configure) {\n          box.configure();\n        }\n\n        (_me$_layers = me._layers).push.apply(_me$_layers, Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(box._layers()));\n      }, me);\n\n      me._layers.forEach(function (item, index) {\n        item._idx = index;\n      });\n\n      me.notifyPlugins('afterLayout');\n    }\n  }, {\n    key: \"_updateDatasets\",\n    value: function _updateDatasets(mode) {\n      var me = this;\n      var isFunction = typeof mode === 'function';\n\n      if (me.notifyPlugins('beforeDatasetsUpdate', {\n        mode: mode,\n        cancelable: true\n      }) === false) {\n        return;\n      }\n\n      for (var i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {\n        me._updateDataset(i, isFunction ? mode({\n          datasetIndex: i\n        }) : mode);\n      }\n\n      me.notifyPlugins('afterDatasetsUpdate', {\n        mode: mode\n      });\n    }\n  }, {\n    key: \"_updateDataset\",\n    value: function _updateDataset(index, mode) {\n      var me = this;\n      var meta = me.getDatasetMeta(index);\n      var args = {\n        meta: meta,\n        index: index,\n        mode: mode,\n        cancelable: true\n      };\n\n      if (me.notifyPlugins('beforeDatasetUpdate', args) === false) {\n        return;\n      }\n\n      meta.controller._update(mode);\n\n      args.cancelable = false;\n      me.notifyPlugins('afterDatasetUpdate', args);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var me = this;\n\n      if (me.notifyPlugins('beforeRender', {\n        cancelable: true\n      }) === false) {\n        return;\n      }\n\n      if (animator.has(me)) {\n        if (me.attached && !animator.running(me)) {\n          animator.start(me);\n        }\n      } else {\n        me.draw();\n        onAnimationsComplete({\n          chart: me\n        });\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var me = this;\n      var i;\n\n      if (me._resizeBeforeDraw) {\n        var _me$_resizeBeforeDraw = me._resizeBeforeDraw,\n            width = _me$_resizeBeforeDraw.width,\n            height = _me$_resizeBeforeDraw.height;\n\n        me._resize(width, height);\n\n        me._resizeBeforeDraw = null;\n      }\n\n      me.clear();\n\n      if (me.width <= 0 || me.height <= 0) {\n        return;\n      }\n\n      if (me.notifyPlugins('beforeDraw', {\n        cancelable: true\n      }) === false) {\n        return;\n      }\n\n      var layers = me._layers;\n\n      for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n        layers[i].draw(me.chartArea);\n      }\n\n      me._drawDatasets();\n\n      for (; i < layers.length; ++i) {\n        layers[i].draw(me.chartArea);\n      }\n\n      me.notifyPlugins('afterDraw');\n    }\n  }, {\n    key: \"_getSortedDatasetMetas\",\n    value: function _getSortedDatasetMetas(filterVisible) {\n      var me = this;\n      var metasets = me._sortedMetasets;\n      var result = [];\n      var i, ilen;\n\n      for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n        var meta = metasets[i];\n\n        if (!filterVisible || meta.visible) {\n          result.push(meta);\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"getSortedVisibleDatasetMetas\",\n    value: function getSortedVisibleDatasetMetas() {\n      return this._getSortedDatasetMetas(true);\n    }\n  }, {\n    key: \"_drawDatasets\",\n    value: function _drawDatasets() {\n      var me = this;\n\n      if (me.notifyPlugins('beforeDatasetsDraw', {\n        cancelable: true\n      }) === false) {\n        return;\n      }\n\n      var metasets = me.getSortedVisibleDatasetMetas();\n\n      for (var i = metasets.length - 1; i >= 0; --i) {\n        me._drawDataset(metasets[i]);\n      }\n\n      me.notifyPlugins('afterDatasetsDraw');\n    }\n  }, {\n    key: \"_drawDataset\",\n    value: function _drawDataset(meta) {\n      var me = this;\n      var ctx = me.ctx;\n      var clip = meta._clip;\n      var area = me.chartArea;\n      var args = {\n        meta: meta,\n        index: meta.index,\n        cancelable: true\n      };\n\n      if (me.notifyPlugins('beforeDatasetDraw', args) === false) {\n        return;\n      }\n\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"k\"])(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? me.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? me.height : area.bottom + clip.bottom\n      });\n      meta.controller.draw();\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"m\"])(ctx);\n      args.cancelable = false;\n      me.notifyPlugins('afterDatasetDraw', args);\n    }\n  }, {\n    key: \"getElementsAtEventForMode\",\n    value: function getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n      var method = Interaction.modes[mode];\n\n      if (typeof method === 'function') {\n        return method(this, e, options, useFinalPosition);\n      }\n\n      return [];\n    }\n  }, {\n    key: \"getDatasetMeta\",\n    value: function getDatasetMeta(datasetIndex) {\n      var me = this;\n      var dataset = me.data.datasets[datasetIndex];\n      var metasets = me._metasets;\n      var meta = metasets.filter(function (x) {\n        return x && x._dataset === dataset;\n      }).pop();\n\n      if (!meta) {\n        meta = {\n          type: null,\n          data: [],\n          dataset: null,\n          controller: null,\n          hidden: null,\n          xAxisID: null,\n          yAxisID: null,\n          order: dataset && dataset.order || 0,\n          index: datasetIndex,\n          _dataset: dataset,\n          _parsed: [],\n          _sorted: false\n        };\n        metasets.push(meta);\n      }\n\n      return meta;\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext() {\n      return this.$context || (this.$context = {\n        chart: this,\n        type: 'chart'\n      });\n    }\n  }, {\n    key: \"getVisibleDatasetCount\",\n    value: function getVisibleDatasetCount() {\n      return this.getSortedVisibleDatasetMetas().length;\n    }\n  }, {\n    key: \"isDatasetVisible\",\n    value: function isDatasetVisible(datasetIndex) {\n      var dataset = this.data.datasets[datasetIndex];\n\n      if (!dataset) {\n        return false;\n      }\n\n      var meta = this.getDatasetMeta(datasetIndex);\n      return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n    }\n  }, {\n    key: \"setDatasetVisibility\",\n    value: function setDatasetVisibility(datasetIndex, visible) {\n      var meta = this.getDatasetMeta(datasetIndex);\n      meta.hidden = !visible;\n    }\n  }, {\n    key: \"toggleDataVisibility\",\n    value: function toggleDataVisibility(index) {\n      this._hiddenIndices[index] = !this._hiddenIndices[index];\n    }\n  }, {\n    key: \"getDataVisibility\",\n    value: function getDataVisibility(index) {\n      return !this._hiddenIndices[index];\n    }\n  }, {\n    key: \"_updateDatasetVisibility\",\n    value: function _updateDatasetVisibility(datasetIndex, visible) {\n      var me = this;\n      var mode = visible ? 'show' : 'hide';\n      var meta = me.getDatasetMeta(datasetIndex);\n\n      var anims = meta.controller._resolveAnimations(undefined, mode);\n\n      me.setDatasetVisibility(datasetIndex, visible);\n      anims.update(meta, {\n        visible: visible\n      });\n      me.update(function (ctx) {\n        return ctx.datasetIndex === datasetIndex ? mode : undefined;\n      });\n    }\n  }, {\n    key: \"hide\",\n    value: function hide(datasetIndex) {\n      this._updateDatasetVisibility(datasetIndex, false);\n    }\n  }, {\n    key: \"show\",\n    value: function show(datasetIndex) {\n      this._updateDatasetVisibility(datasetIndex, true);\n    }\n  }, {\n    key: \"_destroyDatasetMeta\",\n    value: function _destroyDatasetMeta(datasetIndex) {\n      var me = this;\n      var meta = me._metasets && me._metasets[datasetIndex];\n\n      if (meta && meta.controller) {\n        meta.controller._destroy();\n\n        delete me._metasets[datasetIndex];\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var me = this;\n      var canvas = me.canvas,\n          ctx = me.ctx;\n      var i, ilen;\n      me.stop();\n      animator.remove(me);\n\n      for (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {\n        me._destroyDatasetMeta(i);\n      }\n\n      me.config.clearCache();\n\n      if (canvas) {\n        me.unbindEvents();\n        Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"aa\"])(canvas, ctx);\n        me.platform.releaseContext(ctx);\n        me.canvas = null;\n        me.ctx = null;\n      }\n\n      me.notifyPlugins('destroy');\n      delete instances[me.id];\n    }\n  }, {\n    key: \"toBase64Image\",\n    value: function toBase64Image() {\n      var _this$canvas;\n\n      return (_this$canvas = this.canvas).toDataURL.apply(_this$canvas, arguments);\n    }\n  }, {\n    key: \"bindEvents\",\n    value: function bindEvents() {\n      this.bindUserEvents();\n\n      if (this.options.responsive) {\n        this.bindResponsiveEvents();\n      } else {\n        this.attached = true;\n      }\n    }\n  }, {\n    key: \"bindUserEvents\",\n    value: function bindUserEvents() {\n      var me = this;\n      var listeners = me._listeners;\n      var platform = me.platform;\n\n      var _add = function _add(type, listener) {\n        platform.addEventListener(me, type, listener);\n        listeners[type] = listener;\n      };\n\n      var listener = function listener(e, x, y) {\n        e.offsetX = x;\n        e.offsetY = y;\n\n        me._eventHandler(e);\n      };\n\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"D\"])(me.options.events, function (type) {\n        return _add(type, listener);\n      });\n    }\n  }, {\n    key: \"bindResponsiveEvents\",\n    value: function bindResponsiveEvents() {\n      var me = this;\n\n      if (!me._responsiveListeners) {\n        me._responsiveListeners = {};\n      }\n\n      var listeners = me._responsiveListeners;\n      var platform = me.platform;\n\n      var _add = function _add(type, listener) {\n        platform.addEventListener(me, type, listener);\n        listeners[type] = listener;\n      };\n\n      var _remove = function _remove(type, listener) {\n        if (listeners[type]) {\n          platform.removeEventListener(me, type, listener);\n          delete listeners[type];\n        }\n      };\n\n      var listener = function listener(width, height) {\n        if (me.canvas) {\n          me.resize(width, height);\n        }\n      };\n\n      var detached;\n\n      var attached = function attached() {\n        _remove('attach', attached);\n\n        me.attached = true;\n        me.resize();\n\n        _add('resize', listener);\n\n        _add('detach', detached);\n      };\n\n      detached = function detached() {\n        me.attached = false;\n\n        _remove('resize', listener);\n\n        _add('attach', attached);\n      };\n\n      if (platform.isAttached(me.canvas)) {\n        attached();\n      } else {\n        detached();\n      }\n    }\n  }, {\n    key: \"unbindEvents\",\n    value: function unbindEvents() {\n      var me = this;\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"D\"])(me._listeners, function (listener, type) {\n        me.platform.removeEventListener(me, type, listener);\n      });\n      me._listeners = {};\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"D\"])(me._responsiveListeners, function (listener, type) {\n        me.platform.removeEventListener(me, type, listener);\n      });\n      me._responsiveListeners = undefined;\n    }\n  }, {\n    key: \"updateHoverStyle\",\n    value: function updateHoverStyle(items, mode, enabled) {\n      var prefix = enabled ? 'set' : 'remove';\n      var meta, item, i, ilen;\n\n      if (mode === 'dataset') {\n        meta = this.getDatasetMeta(items[0].datasetIndex);\n        meta.controller['_' + prefix + 'DatasetHoverStyle']();\n      }\n\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        item = items[i];\n        var controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n\n        if (controller) {\n          controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n        }\n      }\n    }\n  }, {\n    key: \"getActiveElements\",\n    value: function getActiveElements() {\n      return this._active || [];\n    }\n  }, {\n    key: \"setActiveElements\",\n    value: function setActiveElements(activeElements) {\n      var me = this;\n      var lastActive = me._active || [];\n      var active = activeElements.map(function (_ref) {\n        var datasetIndex = _ref.datasetIndex,\n            index = _ref.index;\n        var meta = me.getDatasetMeta(datasetIndex);\n\n        if (!meta) {\n          throw new Error('No dataset found at index ' + datasetIndex);\n        }\n\n        return {\n          datasetIndex: datasetIndex,\n          element: meta.data[index],\n          index: index\n        };\n      });\n      var changed = !Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"ac\"])(active, lastActive);\n\n      if (changed) {\n        me._active = active;\n\n        me._updateHoverStyles(active, lastActive);\n      }\n    }\n  }, {\n    key: \"notifyPlugins\",\n    value: function notifyPlugins(hook, args, filter) {\n      return this._plugins.notify(this, hook, args, filter);\n    }\n  }, {\n    key: \"_updateHoverStyles\",\n    value: function _updateHoverStyles(active, lastActive, replay) {\n      var me = this;\n      var hoverOptions = me.options.hover;\n\n      var diff = function diff(a, b) {\n        return a.filter(function (x) {\n          return !b.some(function (y) {\n            return x.datasetIndex === y.datasetIndex && x.index === y.index;\n          });\n        });\n      };\n\n      var deactivated = diff(lastActive, active);\n      var activated = replay ? active : diff(active, lastActive);\n\n      if (deactivated.length) {\n        me.updateHoverStyle(deactivated, hoverOptions.mode, false);\n      }\n\n      if (activated.length && hoverOptions.mode) {\n        me.updateHoverStyle(activated, hoverOptions.mode, true);\n      }\n    }\n  }, {\n    key: \"_eventHandler\",\n    value: function _eventHandler(e, replay) {\n      var _this6 = this;\n\n      var me = this;\n      var args = {\n        event: e,\n        replay: replay,\n        cancelable: true\n      };\n\n      var eventFilter = function eventFilter(plugin) {\n        return (plugin.options.events || _this6.options.events).includes(e.type);\n      };\n\n      if (me.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n        return;\n      }\n\n      var changed = me._handleEvent(e, replay);\n\n      args.cancelable = false;\n      me.notifyPlugins('afterEvent', args, eventFilter);\n\n      if (changed || args.changed) {\n        me.render();\n      }\n\n      return me;\n    }\n  }, {\n    key: \"_handleEvent\",\n    value: function _handleEvent(e, replay) {\n      var me = this;\n      var _me$_active = me._active,\n          lastActive = _me$_active === void 0 ? [] : _me$_active,\n          options = me.options;\n      var hoverOptions = options.hover;\n      var useFinalPosition = replay;\n      var active = [];\n      var changed = false;\n      var lastEvent = null;\n\n      if (e.type !== 'mouseout') {\n        active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n        lastEvent = e.type === 'click' ? me._lastEvent : e;\n      }\n\n      me._lastEvent = null;\n\n      if (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"A\"])(e, me.chartArea, me._minPadding)) {\n        Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"N\"])(options.onHover, [e, active, me], me);\n\n        if (e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu') {\n          Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"N\"])(options.onClick, [e, active, me], me);\n        }\n      }\n\n      changed = !Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"ac\"])(active, lastActive);\n\n      if (changed || replay) {\n        me._active = active;\n\n        me._updateHoverStyles(active, lastActive, replay);\n      }\n\n      me._lastEvent = lastEvent;\n      return changed;\n    }\n  }, {\n    key: \"aspectRatio\",\n    get: function get() {\n      var _this$options3 = this.options,\n          aspectRatio = _this$options3.aspectRatio,\n          maintainAspectRatio = _this$options3.maintainAspectRatio,\n          width = this.width,\n          height = this.height,\n          _aspectRatio = this._aspectRatio;\n\n      if (!Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"j\"])(aspectRatio)) {\n        return aspectRatio;\n      }\n\n      if (maintainAspectRatio && _aspectRatio) {\n        return _aspectRatio;\n      }\n\n      return height ? width / height : null;\n    }\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this.config.data;\n    },\n    set: function set(data) {\n      this.config.data = data;\n    }\n  }, {\n    key: \"options\",\n    get: function get() {\n      return this._options;\n    },\n    set: function set(options) {\n      this.config.options = options;\n    }\n  }]);\n\n  return Chart;\n}();\n\nvar invalidatePlugins = function invalidatePlugins() {\n  return Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"D\"])(Chart.instances, function (chart) {\n    return chart._plugins.invalidate();\n  });\n};\n\nvar enumerable = true;\nObject.defineProperties(Chart, {\n  defaults: {\n    enumerable: enumerable,\n    value: _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"d\"]\n  },\n  instances: {\n    enumerable: enumerable,\n    value: instances\n  },\n  overrides: {\n    enumerable: enumerable,\n    value: _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"Z\"]\n  },\n  registry: {\n    enumerable: enumerable,\n    value: registry\n  },\n  version: {\n    enumerable: enumerable,\n    value: version\n  },\n  getChart: {\n    enumerable: enumerable,\n    value: getChart\n  },\n  register: {\n    enumerable: enumerable,\n    value: function value() {\n      registry.add.apply(registry, arguments);\n      invalidatePlugins();\n    }\n  },\n  unregister: {\n    enumerable: enumerable,\n    value: function value() {\n      registry.remove.apply(registry, arguments);\n      invalidatePlugins();\n    }\n  }\n});\n\nfunction clipArc(ctx, element, endAngle) {\n  var startAngle = element.startAngle,\n      pixelMargin = element.pixelMargin,\n      x = element.x,\n      y = element.y,\n      outerRadius = element.outerRadius,\n      innerRadius = element.innerRadius;\n  var angleMargin = pixelMargin / outerRadius;\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"H\"], startAngle - _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"H\"]);\n  }\n\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction toRadiusCorners(value) {\n  return Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"ae\"])(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n\nfunction parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n  var o = toRadiusCorners(arc.options.borderRadius);\n  var halfThickness = (outerRadius - innerRadius) / 2;\n  var innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n\n  var computeOuterLimit = function computeOuterLimit(val) {\n    var outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"x\"])(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"x\"])(o.innerStart, 0, innerLimit),\n    innerEnd: Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"x\"])(o.innerEnd, 0, innerLimit)\n  };\n}\n\nfunction rThetaToXY(r, theta, x, y) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta)\n  };\n}\n\nfunction pathArc(ctx, element, offset, end) {\n  var x = element.x,\n      y = element.y,\n      start = element.startAngle,\n      pixelMargin = element.pixelMargin,\n      innerR = element.innerRadius;\n  var outerRadius = Math.max(element.outerRadius + offset - pixelMargin, 0);\n  var innerRadius = innerR > 0 ? innerR + offset + pixelMargin : 0;\n  var alpha = end - start;\n  var beta = Math.max(0.001, alpha * outerRadius - offset / _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"P\"]) / outerRadius;\n  var angleOffset = (alpha - beta) / 2;\n  var startAngle = start + angleOffset;\n  var endAngle = end - angleOffset;\n\n  var _parseBorderRadius$ = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle),\n      outerStart = _parseBorderRadius$.outerStart,\n      outerEnd = _parseBorderRadius$.outerEnd,\n      innerStart = _parseBorderRadius$.innerStart,\n      innerEnd = _parseBorderRadius$.innerEnd;\n\n  var outerStartAdjustedRadius = outerRadius - outerStart;\n  var outerEndAdjustedRadius = outerRadius - outerEnd;\n  var outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  var outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n  var innerStartAdjustedRadius = innerRadius + innerStart;\n  var innerEndAdjustedRadius = innerRadius + innerEnd;\n  var innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  var innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerEndAdjustedAngle);\n\n  if (outerEnd > 0) {\n    var pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n    ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"H\"]);\n  }\n\n  var p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n  ctx.lineTo(p4.x, p4.y);\n\n  if (innerEnd > 0) {\n    var _pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n\n    ctx.arc(_pCenter.x, _pCenter.y, innerEnd, endAngle + _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"H\"], innerEndAdjustedAngle + Math.PI);\n  }\n\n  ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, startAngle + innerStart / innerRadius, true);\n\n  if (innerStart > 0) {\n    var _pCenter2 = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n\n    ctx.arc(_pCenter2.x, _pCenter2.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"H\"]);\n  }\n\n  var p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n  ctx.lineTo(p8.x, p8.y);\n\n  if (outerStart > 0) {\n    var _pCenter3 = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n\n    ctx.arc(_pCenter3.x, _pCenter3.y, outerStart, startAngle - _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"H\"], outerStartAdjustedAngle);\n  }\n\n  ctx.closePath();\n}\n\nfunction drawArc(ctx, element, offset) {\n  var fullCircles = element.fullCircles,\n      startAngle = element.startAngle,\n      circumference = element.circumference;\n  var endAngle = element.endAngle;\n\n  if (fullCircles) {\n    pathArc(ctx, element, offset, startAngle + _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"T\"]);\n\n    for (var i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + circumference % _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"T\"];\n\n      if (circumference % _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"T\"] === 0) {\n        endAngle += _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"T\"];\n      }\n    }\n  }\n\n  pathArc(ctx, element, offset, endAngle);\n  ctx.fill();\n  return endAngle;\n}\n\nfunction drawFullCircleBorders(ctx, element, inner) {\n  var x = element.x,\n      y = element.y,\n      startAngle = element.startAngle,\n      pixelMargin = element.pixelMargin,\n      fullCircles = element.fullCircles;\n  var outerRadius = Math.max(element.outerRadius - pixelMargin, 0);\n  var innerRadius = element.innerRadius + pixelMargin;\n  var i;\n\n  if (inner) {\n    clipArc(ctx, element, startAngle + _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"T\"]);\n  }\n\n  ctx.beginPath();\n  ctx.arc(x, y, innerRadius, startAngle + _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"T\"], startAngle, true);\n\n  for (i = 0; i < fullCircles; ++i) {\n    ctx.stroke();\n  }\n\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle, startAngle + _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"T\"]);\n\n  for (i = 0; i < fullCircles; ++i) {\n    ctx.stroke();\n  }\n}\n\nfunction drawBorder(ctx, element, offset, endAngle) {\n  var options = element.options;\n  var inner = options.borderAlign === 'inner';\n\n  if (!options.borderWidth) {\n    return;\n  }\n\n  if (inner) {\n    ctx.lineWidth = options.borderWidth * 2;\n    ctx.lineJoin = 'round';\n  } else {\n    ctx.lineWidth = options.borderWidth;\n    ctx.lineJoin = 'bevel';\n  }\n\n  if (element.fullCircles) {\n    drawFullCircleBorders(ctx, element, inner);\n  }\n\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n\n  pathArc(ctx, element, offset, endAngle);\n  ctx.stroke();\n}\n\nvar ArcElement = /*#__PURE__*/function (_Element2) {\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(ArcElement, _Element2);\n\n  var _super12 = _createSuper(ArcElement);\n\n  function ArcElement(cfg) {\n    var _this7;\n\n    Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this, ArcElement);\n\n    _this7 = _super12.call(this);\n    _this7.options = undefined;\n    _this7.circumference = undefined;\n    _this7.startAngle = undefined;\n    _this7.endAngle = undefined;\n    _this7.innerRadius = undefined;\n    _this7.outerRadius = undefined;\n    _this7.pixelMargin = 0;\n    _this7.fullCircles = 0;\n\n    if (cfg) {\n      Object.assign(Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_this7), cfg);\n    }\n\n    return _this7;\n  }\n\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(ArcElement, [{\n    key: \"inRange\",\n    value: function inRange(chartX, chartY, useFinalPosition) {\n      var point = this.getProps(['x', 'y'], useFinalPosition);\n\n      var _getAngleFromPoint = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"ad\"])(point, {\n        x: chartX,\n        y: chartY\n      }),\n          angle = _getAngleFromPoint.angle,\n          distance = _getAngleFromPoint.distance;\n\n      var _this$getProps2 = this.getProps(['startAngle', 'endAngle', 'innerRadius', 'outerRadius', 'circumference'], useFinalPosition),\n          startAngle = _this$getProps2.startAngle,\n          endAngle = _this$getProps2.endAngle,\n          innerRadius = _this$getProps2.innerRadius,\n          outerRadius = _this$getProps2.outerRadius,\n          circumference = _this$getProps2.circumference;\n\n      var betweenAngles = circumference >= _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"T\"] || Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"q\"])(angle, startAngle, endAngle);\n\n      var withinRadius = distance >= innerRadius && distance <= outerRadius;\n      return betweenAngles && withinRadius;\n    }\n  }, {\n    key: \"getCenterPoint\",\n    value: function getCenterPoint(useFinalPosition) {\n      var _this$getProps3 = this.getProps(['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius', 'circumference'], useFinalPosition),\n          x = _this$getProps3.x,\n          y = _this$getProps3.y,\n          startAngle = _this$getProps3.startAngle,\n          endAngle = _this$getProps3.endAngle,\n          innerRadius = _this$getProps3.innerRadius,\n          outerRadius = _this$getProps3.outerRadius;\n\n      var halfAngle = (startAngle + endAngle) / 2;\n      var halfRadius = (innerRadius + outerRadius) / 2;\n      return {\n        x: x + Math.cos(halfAngle) * halfRadius,\n        y: y + Math.sin(halfAngle) * halfRadius\n      };\n    }\n  }, {\n    key: \"tooltipPosition\",\n    value: function tooltipPosition(useFinalPosition) {\n      return this.getCenterPoint(useFinalPosition);\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(ctx) {\n      var me = this;\n      var options = me.options,\n          circumference = me.circumference;\n      var offset = (options.offset || 0) / 2;\n      me.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n      me.fullCircles = circumference > _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"T\"] ? Math.floor(circumference / _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"T\"]) : 0;\n\n      if (circumference === 0 || me.innerRadius < 0 || me.outerRadius < 0) {\n        return;\n      }\n\n      ctx.save();\n      var radiusOffset = 0;\n\n      if (offset) {\n        radiusOffset = offset / 2;\n        var halfAngle = (me.startAngle + me.endAngle) / 2;\n        ctx.translate(Math.cos(halfAngle) * radiusOffset, Math.sin(halfAngle) * radiusOffset);\n\n        if (me.circumference >= _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"P\"]) {\n          radiusOffset = offset;\n        }\n      }\n\n      ctx.fillStyle = options.backgroundColor;\n      ctx.strokeStyle = options.borderColor;\n      var endAngle = drawArc(ctx, me, radiusOffset);\n      drawBorder(ctx, me, radiusOffset, endAngle);\n      ctx.restore();\n    }\n  }]);\n\n  return ArcElement;\n}(Element);\n\nArcElement.id = 'arc';\nArcElement.defaults = {\n  borderAlign: 'center',\n  borderColor: '#fff',\n  borderRadius: 0,\n  borderWidth: 2,\n  offset: 0,\n  angle: undefined\n};\nArcElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor'\n};\n\nfunction setStyle(ctx, options) {\n  var style = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : options;\n  ctx.lineCap = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"v\"])(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"v\"])(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"v\"])(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"v\"])(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"v\"])(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"v\"])(style.borderColor, options.borderColor);\n}\n\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\n\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"al\"];\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"am\"];\n  }\n\n  return lineTo;\n}\n\nfunction pathVars(points, segment) {\n  var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var count = points.length;\n  var _params$start = params.start,\n      paramsStart = _params$start === void 0 ? 0 : _params$start,\n      _params$end = params.end,\n      paramsEnd = _params$end === void 0 ? count - 1 : _params$end;\n  var segmentStart = segment.start,\n      segmentEnd = segment.end;\n  var start = Math.max(paramsStart, segmentStart);\n  var end = Math.min(paramsEnd, segmentEnd);\n  var outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n  return {\n    count: count,\n    start: start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\n\nfunction pathSegment(ctx, line, segment, params) {\n  var points = line.points,\n      options = line.options;\n\n  var _pathVars = pathVars(points, segment, params),\n      count = _pathVars.count,\n      start = _pathVars.start,\n      loop = _pathVars.loop,\n      ilen = _pathVars.ilen;\n\n  var lineMethod = getLineMethod(options);\n\n  var _ref2 = params || {},\n      _ref2$move = _ref2.move,\n      move = _ref2$move === void 0 ? true : _ref2$move,\n      reverse = _ref2.reverse;\n\n  var i, point, prev;\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n\n    if (point.skip) {\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n\n    prev = point;\n  }\n\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n\n  return !!loop;\n}\n\nfunction fastPathSegment(ctx, line, segment, params) {\n  var points = line.points;\n\n  var _pathVars2 = pathVars(points, segment, params),\n      count = _pathVars2.count,\n      start = _pathVars2.start,\n      ilen = _pathVars2.ilen;\n\n  var _ref3 = params || {},\n      _ref3$move = _ref3.move,\n      move = _ref3$move === void 0 ? true : _ref3$move,\n      reverse = _ref3.reverse;\n\n  var avgX = 0;\n  var countX = 0;\n  var i, point, prevX, minY, maxY, lastY;\n\n  var pointIndex = function pointIndex(index) {\n    return (start + (reverse ? ilen - index : index)) % count;\n  };\n\n  var drawX = function drawX() {\n    if (minY !== maxY) {\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n\n    if (point.skip) {\n      continue;\n    }\n\n    var x = point.x;\n    var y = point.y;\n    var truncX = x | 0;\n\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      ctx.lineTo(x, y);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n\n    lastY = y;\n  }\n\n  drawX();\n}\n\nfunction _getSegmentMethod(line) {\n  var opts = line.options;\n  var borderDash = opts.borderDash && opts.borderDash.length;\n  var useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\n\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"ai\"];\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"aj\"];\n  }\n\n  return _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"ak\"];\n}\n\nfunction strokePathWithCache(ctx, line, start, count) {\n  var path = line._path;\n\n  if (!path) {\n    path = line._path = new Path2D();\n\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\n\nfunction strokePathDirect(ctx, line, start, count) {\n  var segments = line.segments,\n      options = line.options;\n\n  var segmentMethod = _getSegmentMethod(line);\n\n  var _iterator8 = _createForOfIteratorHelper(segments),\n      _step8;\n\n  try {\n    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n      var segment = _step8.value;\n      setStyle(ctx, options, segment.style);\n      ctx.beginPath();\n\n      if (segmentMethod(ctx, line, segment, {\n        start: start,\n        end: start + count - 1\n      })) {\n        ctx.closePath();\n      }\n\n      ctx.stroke();\n    }\n  } catch (err) {\n    _iterator8.e(err);\n  } finally {\n    _iterator8.f();\n  }\n}\n\nvar usePath2D = typeof Path2D === 'function';\n\nfunction _draw(ctx, line, start, count) {\n  if (usePath2D && line.segments.length === 1) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\n\nvar LineElement = /*#__PURE__*/function (_Element3) {\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(LineElement, _Element3);\n\n  var _super13 = _createSuper(LineElement);\n\n  function LineElement(cfg) {\n    var _this8;\n\n    Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this, LineElement);\n\n    _this8 = _super13.call(this);\n    _this8.animated = true;\n    _this8.options = undefined;\n    _this8._loop = undefined;\n    _this8._fullLoop = undefined;\n    _this8._path = undefined;\n    _this8._points = undefined;\n    _this8._segments = undefined;\n    _this8._decimated = false;\n    _this8._pointsUpdated = false;\n\n    if (cfg) {\n      Object.assign(Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_this8), cfg);\n    }\n\n    return _this8;\n  }\n\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(LineElement, [{\n    key: \"updateControlPoints\",\n    value: function updateControlPoints(chartArea, indexAxis) {\n      var me = this;\n      var options = me.options;\n\n      if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !me._pointsUpdated) {\n        var loop = options.spanGaps ? me._loop : me._fullLoop;\n\n        Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"af\"])(me._points, options, chartArea, loop, indexAxis);\n\n        me._pointsUpdated = true;\n      }\n    }\n  }, {\n    key: \"first\",\n    value: function first() {\n      var segments = this.segments;\n      var points = this.points;\n      return segments.length && points[segments[0].start];\n    }\n  }, {\n    key: \"last\",\n    value: function last() {\n      var segments = this.segments;\n      var points = this.points;\n      var count = segments.length;\n      return count && points[segments[count - 1].end];\n    }\n  }, {\n    key: \"interpolate\",\n    value: function interpolate(point, property) {\n      var me = this;\n      var options = me.options;\n      var value = point[property];\n      var points = me.points;\n\n      var segments = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"ah\"])(me, {\n        property: property,\n        start: value,\n        end: value\n      });\n\n      if (!segments.length) {\n        return;\n      }\n\n      var result = [];\n\n      var _interpolate = _getInterpolationMethod(options);\n\n      var i, ilen;\n\n      for (i = 0, ilen = segments.length; i < ilen; ++i) {\n        var _segments$i = segments[i],\n            start = _segments$i.start,\n            end = _segments$i.end;\n        var p1 = points[start];\n        var p2 = points[end];\n\n        if (p1 === p2) {\n          result.push(p1);\n          continue;\n        }\n\n        var t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n\n        var interpolated = _interpolate(p1, p2, t, options.stepped);\n\n        interpolated[property] = point[property];\n        result.push(interpolated);\n      }\n\n      return result.length === 1 ? result[0] : result;\n    }\n  }, {\n    key: \"pathSegment\",\n    value: function pathSegment(ctx, segment, params) {\n      var segmentMethod = _getSegmentMethod(this);\n\n      return segmentMethod(ctx, this, segment, params);\n    }\n  }, {\n    key: \"path\",\n    value: function path(ctx, start, count) {\n      var me = this;\n      var segments = me.segments;\n\n      var segmentMethod = _getSegmentMethod(me);\n\n      var loop = me._loop;\n      start = start || 0;\n      count = count || me.points.length - start;\n\n      var _iterator9 = _createForOfIteratorHelper(segments),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var segment = _step9.value;\n          loop &= segmentMethod(ctx, me, segment, {\n            start: start,\n            end: start + count - 1\n          });\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n\n      return !!loop;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(ctx, chartArea, start, count) {\n      var me = this;\n      var options = me.options || {};\n      var points = me.points || [];\n\n      if (!points.length || !options.borderWidth) {\n        return;\n      }\n\n      ctx.save();\n\n      _draw(ctx, me, start, count);\n\n      ctx.restore();\n\n      if (me.animated) {\n        me._pointsUpdated = false;\n        me._path = undefined;\n      }\n    }\n  }, {\n    key: \"points\",\n    set: function set(points) {\n      var me = this;\n      me._points = points;\n      delete me._segments;\n      delete me._path;\n      me._pointsUpdated = false;\n    },\n    get: function get() {\n      return this._points;\n    }\n  }, {\n    key: \"segments\",\n    get: function get() {\n      return this._segments || (this._segments = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"ag\"])(this, this.options.segment));\n    }\n  }]);\n\n  return LineElement;\n}(Element);\n\nLineElement.id = 'line';\nLineElement.defaults = {\n  borderCapStyle: 'butt',\n  borderDash: [],\n  borderDashOffset: 0,\n  borderJoinStyle: 'miter',\n  borderWidth: 3,\n  capBezierPoints: true,\n  cubicInterpolationMode: 'default',\n  fill: false,\n  spanGaps: false,\n  stepped: false,\n  tension: 0\n};\nLineElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n};\nLineElement.descriptors = {\n  _scriptable: true,\n  _indexable: function _indexable(name) {\n    return name !== 'borderDash' && name !== 'fill';\n  }\n};\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n  var options = el.options;\n\n  var _el$getProps = el.getProps([axis], useFinalPosition),\n      value = _el$getProps[axis];\n\n  return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\n\nvar PointElement = /*#__PURE__*/function (_Element4) {\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(PointElement, _Element4);\n\n  var _super14 = _createSuper(PointElement);\n\n  function PointElement(cfg) {\n    var _this9;\n\n    Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this, PointElement);\n\n    _this9 = _super14.call(this);\n    _this9.options = undefined;\n    _this9.parsed = undefined;\n    _this9.skip = undefined;\n    _this9.stop = undefined;\n\n    if (cfg) {\n      Object.assign(Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_this9), cfg);\n    }\n\n    return _this9;\n  }\n\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(PointElement, [{\n    key: \"inRange\",\n    value: function inRange(mouseX, mouseY, useFinalPosition) {\n      var options = this.options;\n\n      var _this$getProps4 = this.getProps(['x', 'y'], useFinalPosition),\n          x = _this$getProps4.x,\n          y = _this$getProps4.y;\n\n      return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n    }\n  }, {\n    key: \"inXRange\",\n    value: function inXRange(mouseX, useFinalPosition) {\n      return inRange$1(this, mouseX, 'x', useFinalPosition);\n    }\n  }, {\n    key: \"inYRange\",\n    value: function inYRange(mouseY, useFinalPosition) {\n      return inRange$1(this, mouseY, 'y', useFinalPosition);\n    }\n  }, {\n    key: \"getCenterPoint\",\n    value: function getCenterPoint(useFinalPosition) {\n      var _this$getProps5 = this.getProps(['x', 'y'], useFinalPosition),\n          x = _this$getProps5.x,\n          y = _this$getProps5.y;\n\n      return {\n        x: x,\n        y: y\n      };\n    }\n  }, {\n    key: \"size\",\n    value: function size(options) {\n      options = options || this.options || {};\n      var radius = options.radius || 0;\n      radius = Math.max(radius, radius && options.hoverRadius || 0);\n      var borderWidth = radius && options.borderWidth || 0;\n      return (radius + borderWidth) * 2;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(ctx) {\n      var me = this;\n      var options = me.options;\n\n      if (me.skip || options.radius < 0.1) {\n        return;\n      }\n\n      ctx.strokeStyle = options.borderColor;\n      ctx.lineWidth = options.borderWidth;\n      ctx.fillStyle = options.backgroundColor;\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"an\"])(ctx, options, me.x, me.y);\n    }\n  }, {\n    key: \"getRange\",\n    value: function getRange() {\n      var options = this.options || {};\n      return options.radius + options.hitRadius;\n    }\n  }]);\n\n  return PointElement;\n}(Element);\n\nPointElement.id = 'point';\nPointElement.defaults = {\n  borderWidth: 1,\n  hitRadius: 1,\n  hoverBorderWidth: 1,\n  hoverRadius: 4,\n  pointStyle: 'circle',\n  radius: 3,\n  rotation: 0\n};\nPointElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n};\n\nfunction getBarBounds(bar, useFinalPosition) {\n  var _bar$getProps = bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition),\n      x = _bar$getProps.x,\n      y = _bar$getProps.y,\n      base = _bar$getProps.base,\n      width = _bar$getProps.width,\n      height = _bar$getProps.height;\n\n  var left, right, top, bottom, half;\n\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n\n  return {\n    left: left,\n    top: top,\n    right: right,\n    bottom: bottom\n  };\n}\n\nfunction parseBorderSkipped(bar) {\n  var edge = bar.options.borderSkipped;\n  var res = {};\n\n  if (!edge) {\n    return res;\n  }\n\n  edge = bar.horizontal ? parseEdge(edge, 'left', 'right', bar.base > bar.x) : parseEdge(edge, 'bottom', 'top', bar.base < bar.y);\n  res[edge] = true;\n  return res;\n}\n\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n\n  return edge;\n}\n\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\n\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\n\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : Math.max(Math.min(value, max), min);\n}\n\nfunction parseBorderWidth(bar, maxW, maxH) {\n  var value = bar.options.borderWidth;\n  var skip = parseBorderSkipped(bar);\n  var o = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"ap\"])(value);\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\n\nfunction parseBorderRadius(bar, maxW, maxH) {\n  var _bar$getProps2 = bar.getProps(['enableBorderRadius']),\n      enableBorderRadius = _bar$getProps2.enableBorderRadius;\n\n  var value = bar.options.borderRadius;\n  var o = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"aq\"])(value);\n  var maxR = Math.min(maxW, maxH);\n  var skip = parseBorderSkipped(bar);\n  var enableBorder = enableBorderRadius || Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"i\"])(value);\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\n\nfunction boundingRects(bar) {\n  var bounds = getBarBounds(bar);\n  var width = bounds.right - bounds.left;\n  var height = bounds.bottom - bounds.top;\n  var border = parseBorderWidth(bar, width / 2, height / 2);\n  var radius = parseBorderRadius(bar, width / 2, height / 2);\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius: radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n      }\n    }\n  };\n}\n\nfunction _inRange(bar, x, y, useFinalPosition) {\n  var skipX = x === null;\n  var skipY = y === null;\n  var skipBoth = skipX && skipY;\n  var bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n  return bounds && (skipX || x >= bounds.left && x <= bounds.right) && (skipY || y >= bounds.top && y <= bounds.bottom);\n}\n\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\n\nvar BarElement = /*#__PURE__*/function (_Element5) {\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(BarElement, _Element5);\n\n  var _super15 = _createSuper(BarElement);\n\n  function BarElement(cfg) {\n    var _this10;\n\n    Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this, BarElement);\n\n    _this10 = _super15.call(this);\n    _this10.options = undefined;\n    _this10.horizontal = undefined;\n    _this10.base = undefined;\n    _this10.width = undefined;\n    _this10.height = undefined;\n\n    if (cfg) {\n      Object.assign(Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_this10), cfg);\n    }\n\n    return _this10;\n  }\n\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(BarElement, [{\n    key: \"draw\",\n    value: function draw(ctx) {\n      var options = this.options;\n\n      var _boundingRects = boundingRects(this),\n          inner = _boundingRects.inner,\n          outer = _boundingRects.outer;\n\n      var addRectPath = hasRadius(outer.radius) ? _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"ao\"] : addNormalRectPath;\n      ctx.save();\n\n      if (outer.w !== inner.w || outer.h !== inner.h) {\n        ctx.beginPath();\n        addRectPath(ctx, outer);\n        ctx.clip();\n        addRectPath(ctx, inner);\n        ctx.fillStyle = options.borderColor;\n        ctx.fill('evenodd');\n      }\n\n      ctx.beginPath();\n      addRectPath(ctx, inner);\n      ctx.fillStyle = options.backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }, {\n    key: \"inRange\",\n    value: function inRange(mouseX, mouseY, useFinalPosition) {\n      return _inRange(this, mouseX, mouseY, useFinalPosition);\n    }\n  }, {\n    key: \"inXRange\",\n    value: function inXRange(mouseX, useFinalPosition) {\n      return _inRange(this, mouseX, null, useFinalPosition);\n    }\n  }, {\n    key: \"inYRange\",\n    value: function inYRange(mouseY, useFinalPosition) {\n      return _inRange(this, null, mouseY, useFinalPosition);\n    }\n  }, {\n    key: \"getCenterPoint\",\n    value: function getCenterPoint(useFinalPosition) {\n      var _this$getProps6 = this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition),\n          x = _this$getProps6.x,\n          y = _this$getProps6.y,\n          base = _this$getProps6.base,\n          horizontal = _this$getProps6.horizontal;\n\n      return {\n        x: horizontal ? (x + base) / 2 : x,\n        y: horizontal ? y : (y + base) / 2\n      };\n    }\n  }, {\n    key: \"getRange\",\n    value: function getRange(axis) {\n      return axis === 'x' ? this.width / 2 : this.height / 2;\n    }\n  }]);\n\n  return BarElement;\n}(Element);\n\nBarElement.id = 'bar';\nBarElement.defaults = {\n  borderSkipped: 'start',\n  borderWidth: 0,\n  borderRadius: 0,\n  enableBorderRadius: true,\n  pointStyle: undefined\n};\nBarElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n};\nvar elements = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ArcElement: ArcElement,\n  LineElement: LineElement,\n  PointElement: PointElement,\n  BarElement: BarElement\n});\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  var samples = options.samples || availableWidth;\n\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n\n  var decimated = [];\n  var bucketWidth = (count - 2) / (samples - 2);\n  var sampledIndex = 0;\n  var endIndex = start + count - 1;\n  var a = start;\n  var i, maxAreaPoint, maxArea, area, nextA;\n  decimated[sampledIndex++] = data[a];\n\n  for (i = 0; i < samples - 2; i++) {\n    var avgX = 0;\n    var avgY = 0;\n    var j = void 0;\n    var avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    var avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    var avgRangeLength = avgRangeEnd - avgRangeStart;\n\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n    var rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    var rangeTo = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    var _data$a = data[a],\n        pointAx = _data$a.x,\n        pointAy = _data$a.y;\n    maxArea = area = -1;\n\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n\n  decimated[sampledIndex++] = data[endIndex];\n  return decimated;\n}\n\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  var avgX = 0;\n  var countX = 0;\n  var i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  var decimated = [];\n  var endIndex = start + count - 1;\n  var xMin = data[start].x;\n  var xMax = data[endIndex].x;\n  var dx = xMax - xMin;\n\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    var truncX = x | 0;\n\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      var lastIndex = i - 1;\n\n      if (!Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"j\"])(minIndex) && !Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"j\"])(maxIndex)) {\n        var intermediateIndex1 = Math.min(minIndex, maxIndex);\n        var intermediateIndex2 = Math.max(minIndex, maxIndex);\n\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push(_objectSpread(_objectSpread({}, data[intermediateIndex1]), {}, {\n            x: avgX\n          }));\n        }\n\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push(_objectSpread(_objectSpread({}, data[intermediateIndex2]), {}, {\n            x: avgX\n          }));\n        }\n      }\n\n      if (i > 0 && lastIndex !== startIndex) {\n        decimated.push(data[lastIndex]);\n      }\n\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n\n  return decimated;\n}\n\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    var data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      value: data\n    });\n  }\n}\n\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach(function (dataset) {\n    cleanDecimatedDataset(dataset);\n  });\n}\n\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  var pointCount = points.length;\n  var start = 0;\n  var count;\n  var iScale = meta.iScale;\n\n  var _iScale$getUserBounds2 = iScale.getUserBounds(),\n      min = _iScale$getUserBounds2.min,\n      max = _iScale$getUserBounds2.max,\n      minDefined = _iScale$getUserBounds2.minDefined,\n      maxDefined = _iScale$getUserBounds2.maxDefined;\n\n  if (minDefined) {\n    start = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"x\"])(Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"y\"])(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n\n  if (maxDefined) {\n    count = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"x\"])(Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"y\"])(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n\n  return {\n    start: start,\n    count: count\n  };\n}\n\nvar plugin_decimation = {\n  id: 'decimation',\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false\n  },\n  beforeElementsUpdate: function beforeElementsUpdate(chart, args, options) {\n    if (!options.enabled) {\n      cleanDecimatedData(chart);\n      return;\n    }\n\n    var availableWidth = chart.width;\n    chart.data.datasets.forEach(function (dataset, datasetIndex) {\n      var _data = dataset._data,\n          indexAxis = dataset.indexAxis;\n      var meta = chart.getDatasetMeta(datasetIndex);\n      var data = _data || dataset.data;\n\n      if (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"a\"])([indexAxis, chart.options.indexAxis]) === 'y') {\n        return;\n      }\n\n      if (meta.type !== 'line') {\n        return;\n      }\n\n      var xAxis = chart.scales[meta.xAxisID];\n\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        return;\n      }\n\n      if (chart.options.parsing) {\n        return;\n      }\n\n      var _getStartAndCountOfVi2 = getStartAndCountOfVisiblePointsSimplified(meta, data),\n          start = _getStartAndCountOfVi2.start,\n          count = _getStartAndCountOfVi2.count;\n\n      if (count <= 4 * availableWidth) {\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n\n      if (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"j\"])(_data)) {\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function get() {\n            return this._decimated;\n          },\n          set: function set(d) {\n            this._data = d;\n          }\n        });\n      }\n\n      var decimated;\n\n      switch (options.algorithm) {\n        case 'lttb':\n          decimated = lttbDecimation(data, start, count, availableWidth, options);\n          break;\n\n        case 'min-max':\n          decimated = minMaxDecimation(data, start, count, availableWidth);\n          break;\n\n        default:\n          throw new Error(\"Unsupported decimation algorithm '\".concat(options.algorithm, \"'\"));\n      }\n\n      dataset._decimated = decimated;\n    });\n  },\n  destroy: function destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\n\nfunction getLineByIndex(chart, index) {\n  var meta = chart.getDatasetMeta(index);\n  var visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\n\nfunction parseFillOption(line) {\n  var options = line.options;\n  var fillOption = options.fill;\n  var fill = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"v\"])(fillOption && fillOption.target, fillOption);\n\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n\n  if (fill === false || fill === null) {\n    return false;\n  }\n\n  if (fill === true) {\n    return 'origin';\n  }\n\n  return fill;\n}\n\nfunction decodeFill(line, index, count) {\n  var fill = parseFillOption(line);\n\n  if (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"i\"])(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n\n  var target = parseFloat(fill);\n\n  if (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"g\"])(target) && Math.floor(target) === target) {\n    if (fill[0] === '-' || fill[0] === '+') {\n      target = index + target;\n    }\n\n    if (target === index || target < 0 || target >= count) {\n      return false;\n    }\n\n    return target;\n  }\n\n  return ['origin', 'start', 'end', 'stack'].indexOf(fill) >= 0 && fill;\n}\n\nfunction computeLinearBoundary(source) {\n  var _source$scale = source.scale,\n      scale = _source$scale === void 0 ? {} : _source$scale,\n      fill = source.fill;\n  var target = null;\n  var horizontal;\n\n  if (fill === 'start') {\n    target = scale.bottom;\n  } else if (fill === 'end') {\n    target = scale.top;\n  } else if (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"i\"])(fill)) {\n    target = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    target = scale.getBasePixel();\n  }\n\n  if (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"g\"])(target)) {\n    horizontal = scale.isHorizontal();\n    return {\n      x: horizontal ? target : null,\n      y: horizontal ? null : target\n    };\n  }\n\n  return null;\n}\n\nvar simpleArc = /*#__PURE__*/function () {\n  function simpleArc(opts) {\n    Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this, simpleArc);\n\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(simpleArc, [{\n    key: \"pathSegment\",\n    value: function pathSegment(ctx, bounds, opts) {\n      var x = this.x,\n          y = this.y,\n          radius = this.radius;\n      bounds = bounds || {\n        start: 0,\n        end: _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"T\"]\n      };\n      ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n      return !opts.bounds;\n    }\n  }, {\n    key: \"interpolate\",\n    value: function interpolate(point) {\n      var x = this.x,\n          y = this.y,\n          radius = this.radius;\n      var angle = point.angle;\n      return {\n        x: x + Math.cos(angle) * radius,\n        y: y + Math.sin(angle) * radius,\n        angle: angle\n      };\n    }\n  }]);\n\n  return simpleArc;\n}();\n\nfunction computeCircularBoundary(source) {\n  var scale = source.scale,\n      fill = source.fill;\n  var options = scale.options;\n  var length = scale.getLabels().length;\n  var target = [];\n  var start = options.reverse ? scale.max : scale.min;\n  var end = options.reverse ? scale.min : scale.max;\n  var i, center, value;\n\n  if (fill === 'start') {\n    value = start;\n  } else if (fill === 'end') {\n    value = end;\n  } else if (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"i\"])(fill)) {\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n\n  if (options.grid.circular) {\n    center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n\n  for (i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n\n  return target;\n}\n\nfunction computeBoundary(source) {\n  var scale = source.scale || {};\n\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n\n  return computeLinearBoundary(source);\n}\n\nfunction pointsFromSegments(boundary, line) {\n  var _ref4 = boundary || {},\n      _ref4$x = _ref4.x,\n      x = _ref4$x === void 0 ? null : _ref4$x,\n      _ref4$y = _ref4.y,\n      y = _ref4$y === void 0 ? null : _ref4$y;\n\n  var linePoints = line.points;\n  var points = [];\n  line.segments.forEach(function (segment) {\n    var first = linePoints[segment.start];\n    var last = linePoints[segment.end];\n\n    if (y !== null) {\n      points.push({\n        x: first.x,\n        y: y\n      });\n      points.push({\n        x: last.x,\n        y: y\n      });\n    } else if (x !== null) {\n      points.push({\n        x: x,\n        y: first.y\n      });\n      points.push({\n        x: x,\n        y: last.y\n      });\n    }\n  });\n  return points;\n}\n\nfunction buildStackLine(source) {\n  var chart = source.chart,\n      scale = source.scale,\n      index = source.index,\n      line = source.line;\n  var points = [];\n  var segments = line.segments;\n  var sourcePoints = line.points;\n  var linesBelow = getLinesBelow(chart, index);\n  linesBelow.push(createBoundaryLine({\n    x: null,\n    y: scale.bottom\n  }, line));\n\n  for (var i = 0; i < segments.length; i++) {\n    var segment = segments[i];\n\n    for (var j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n\n  return new LineElement({\n    points: points,\n    options: {}\n  });\n}\n\nvar isLineAndNotInHideAnimation = function isLineAndNotInHideAnimation(meta) {\n  return meta.type === 'line' && !meta.hidden;\n};\n\nfunction getLinesBelow(chart, index) {\n  var below = [];\n  var metas = chart.getSortedVisibleDatasetMetas();\n\n  for (var i = 0; i < metas.length; i++) {\n    var meta = metas[i];\n\n    if (meta.index === index) {\n      break;\n    }\n\n    if (isLineAndNotInHideAnimation(meta)) {\n      below.unshift(meta.dataset);\n    }\n  }\n\n  return below;\n}\n\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  var postponed = [];\n\n  for (var j = 0; j < linesBelow.length; j++) {\n    var line = linesBelow[j];\n\n    var _findPoint = findPoint(line, sourcePoint, 'x'),\n        first = _findPoint.first,\n        last = _findPoint.last,\n        point = _findPoint.point;\n\n    if (!point || first && last) {\n      continue;\n    }\n\n    if (first) {\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n\n      if (!last) {\n        break;\n      }\n    }\n  }\n\n  points.push.apply(points, postponed);\n}\n\nfunction findPoint(line, sourcePoint, property) {\n  var point = line.interpolate(sourcePoint, property);\n\n  if (!point) {\n    return {};\n  }\n\n  var pointValue = point[property];\n  var segments = line.segments;\n  var linePoints = line.points;\n  var first = false;\n  var last = false;\n\n  for (var i = 0; i < segments.length; i++) {\n    var segment = segments[i];\n    var firstValue = linePoints[segment.start][property];\n    var lastValue = linePoints[segment.end][property];\n\n    if (pointValue >= firstValue && pointValue <= lastValue) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n\n  return {\n    first: first,\n    last: last,\n    point: point\n  };\n}\n\nfunction getTarget(source) {\n  var chart = source.chart,\n      fill = source.fill,\n      line = source.line;\n\n  if (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"g\"])(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n\n  if (fill === 'stack') {\n    return buildStackLine(source);\n  }\n\n  var boundary = computeBoundary(source);\n\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n\n  return createBoundaryLine(boundary, line);\n}\n\nfunction createBoundaryLine(boundary, line) {\n  var points = [];\n  var _loop = false;\n\n  if (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"b\"])(boundary)) {\n    _loop = true;\n    points = boundary;\n  } else {\n    points = pointsFromSegments(boundary, line);\n  }\n\n  return points.length ? new LineElement({\n    points: points,\n    options: {\n      tension: 0\n    },\n    _loop: _loop,\n    _fullLoop: _loop\n  }) : null;\n}\n\nfunction resolveTarget(sources, index, propagate) {\n  var source = sources[index];\n  var fill = source.fill;\n  var visited = [index];\n  var target;\n\n  if (!propagate) {\n    return fill;\n  }\n\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"g\"])(fill)) {\n      return fill;\n    }\n\n    target = sources[fill];\n\n    if (!target) {\n      return false;\n    }\n\n    if (target.visible) {\n      return fill;\n    }\n\n    visited.push(fill);\n    fill = target.fill;\n  }\n\n  return false;\n}\n\nfunction _clip(ctx, target, clipY) {\n  ctx.beginPath();\n  target.path(ctx);\n  ctx.lineTo(target.last().x, clipY);\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n\n  var start = first[property];\n  var end = last[property];\n\n  if (property === 'angle') {\n    start = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"as\"])(start);\n    end = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"as\"])(end);\n  }\n\n  return {\n    property: property,\n    start: start,\n    end: end\n  };\n}\n\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n\n  return a ? a[prop] : b ? b[prop] : 0;\n}\n\nfunction _segments(line, target, property) {\n  var segments = line.segments;\n  var points = line.points;\n  var tpoints = target.points;\n  var parts = [];\n\n  var _iterator10 = _createForOfIteratorHelper(segments),\n      _step10;\n\n  try {\n    for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n      var segment = _step10.value;\n      var bounds = getBounds(property, points[segment.start], points[segment.end], segment.loop);\n\n      if (!target.segments) {\n        parts.push({\n          source: segment,\n          target: bounds,\n          start: points[segment.start],\n          end: points[segment.end]\n        });\n        continue;\n      }\n\n      var targetSegments = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"ah\"])(target, bounds);\n\n      var _iterator11 = _createForOfIteratorHelper(targetSegments),\n          _step11;\n\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          var tgt = _step11.value;\n          var subBounds = getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n\n          var fillSources = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"ar\"])(segment, points, subBounds);\n\n          var _iterator12 = _createForOfIteratorHelper(fillSources),\n              _step12;\n\n          try {\n            for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n              var fillSource = _step12.value;\n              parts.push({\n                source: fillSource,\n                target: tgt,\n                start: Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__[\"default\"])({}, property, _getEdge(bounds, subBounds, 'start', Math.max)),\n                end: Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__[\"default\"])({}, property, _getEdge(bounds, subBounds, 'end', Math.min))\n              });\n            }\n          } catch (err) {\n            _iterator12.e(err);\n          } finally {\n            _iterator12.f();\n          }\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n    }\n  } catch (err) {\n    _iterator10.e(err);\n  } finally {\n    _iterator10.f();\n  }\n\n  return parts;\n}\n\nfunction clipBounds(ctx, scale, bounds) {\n  var _scale$chart$chartAre = scale.chart.chartArea,\n      top = _scale$chart$chartAre.top,\n      bottom = _scale$chart$chartAre.bottom;\n\n  var _ref5 = bounds || {},\n      property = _ref5.property,\n      start = _ref5.start,\n      end = _ref5.end;\n\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\n\nfunction interpolatedLineTo(ctx, target, point, property) {\n  var interpolatedPoint = target.interpolate(point, property);\n\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\n\nfunction _fill(ctx, cfg) {\n  var line = cfg.line,\n      target = cfg.target,\n      property = cfg.property,\n      color = cfg.color,\n      scale = cfg.scale;\n\n  var segments = _segments(line, target, property);\n\n  var _iterator13 = _createForOfIteratorHelper(segments),\n      _step13;\n\n  try {\n    for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n      var _step13$value = _step13.value,\n          src = _step13$value.source,\n          tgt = _step13$value.target,\n          start = _step13$value.start,\n          end = _step13$value.end;\n      var _src$style = src.style;\n      _src$style = _src$style === void 0 ? {} : _src$style;\n      var _src$style$background = _src$style.backgroundColor,\n          backgroundColor = _src$style$background === void 0 ? color : _src$style$background;\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      clipBounds(ctx, scale, getBounds(property, start, end));\n      ctx.beginPath();\n      var lineLoop = !!line.pathSegment(ctx, src);\n\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n\n      var targetLoop = !!target.pathSegment(ctx, tgt, {\n        move: lineLoop,\n        reverse: true\n      });\n      var loop = lineLoop && targetLoop;\n\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n\n      ctx.closePath();\n      ctx.fill(loop ? 'evenodd' : 'nonzero');\n      ctx.restore();\n    }\n  } catch (err) {\n    _iterator13.e(err);\n  } finally {\n    _iterator13.f();\n  }\n}\n\nfunction doFill(ctx, cfg) {\n  var line = cfg.line,\n      target = cfg.target,\n      above = cfg.above,\n      below = cfg.below,\n      area = cfg.area,\n      scale = cfg.scale;\n  var property = line._loop ? 'angle' : cfg.axis;\n  ctx.save();\n\n  if (property === 'x' && below !== above) {\n    _clip(ctx, target, area.top);\n\n    _fill(ctx, {\n      line: line,\n      target: target,\n      color: above,\n      scale: scale,\n      property: property\n    });\n\n    ctx.restore();\n    ctx.save();\n\n    _clip(ctx, target, area.bottom);\n  }\n\n  _fill(ctx, {\n    line: line,\n    target: target,\n    color: below,\n    scale: scale,\n    property: property\n  });\n\n  ctx.restore();\n}\n\nfunction drawfill(ctx, source, area) {\n  var target = getTarget(source);\n  var line = source.line,\n      scale = source.scale,\n      axis = source.axis;\n  var lineOpts = line.options;\n  var fillOption = lineOpts.fill;\n  var color = lineOpts.backgroundColor;\n\n  var _ref6 = fillOption || {},\n      _ref6$above = _ref6.above,\n      above = _ref6$above === void 0 ? color : _ref6$above,\n      _ref6$below = _ref6.below,\n      below = _ref6$below === void 0 ? color : _ref6$below;\n\n  if (target && line.points.length) {\n    Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"k\"])(ctx, area);\n    doFill(ctx, {\n      line: line,\n      target: target,\n      above: above,\n      below: below,\n      area: area,\n      scale: scale,\n      axis: axis\n    });\n    Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"m\"])(ctx);\n  }\n}\n\nvar plugin_filler = {\n  id: 'filler',\n  afterDatasetsUpdate: function afterDatasetsUpdate(chart, _args, options) {\n    var count = (chart.data.datasets || []).length;\n    var sources = [];\n    var meta, i, line, source;\n\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: decodeFill(line, i, count),\n          chart: chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line: line\n        };\n      }\n\n      meta.$filler = source;\n      sources.push(source);\n    }\n\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n\n      if (!source || source.fill === false) {\n        continue;\n      }\n\n      source.fill = resolveTarget(sources, i, options.propagate);\n    }\n  },\n  beforeDraw: function beforeDraw(chart, _args, options) {\n    var draw = options.drawTime === 'beforeDraw';\n    var metasets = chart.getSortedVisibleDatasetMetas();\n    var area = chart.chartArea;\n\n    for (var i = metasets.length - 1; i >= 0; --i) {\n      var source = metasets[i].$filler;\n\n      if (!source) {\n        continue;\n      }\n\n      source.line.updateControlPoints(area, source.axis);\n\n      if (draw) {\n        drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n  beforeDatasetsDraw: function beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n\n    var metasets = chart.getSortedVisibleDatasetMetas();\n\n    for (var i = metasets.length - 1; i >= 0; --i) {\n      var source = metasets[i].$filler;\n\n      if (source) {\n        drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n  beforeDatasetDraw: function beforeDatasetDraw(chart, args, options) {\n    var source = args.meta.$filler;\n\n    if (!source || source.fill === false || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n\n    drawfill(chart.ctx, source, chart.chartArea);\n  },\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\n\nvar getBoxSize = function getBoxSize(labelOpts, fontSize) {\n  var _labelOpts$boxHeight = labelOpts.boxHeight,\n      boxHeight = _labelOpts$boxHeight === void 0 ? fontSize : _labelOpts$boxHeight,\n      _labelOpts$boxWidth = labelOpts.boxWidth,\n      boxWidth = _labelOpts$boxWidth === void 0 ? fontSize : _labelOpts$boxWidth;\n\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = Math.min(boxWidth, fontSize);\n  }\n\n  return {\n    boxWidth: boxWidth,\n    boxHeight: boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\n\nvar itemsEqual = function itemsEqual(a, b) {\n  return a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\n};\n\nvar Legend = /*#__PURE__*/function (_Element6) {\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(Legend, _Element6);\n\n  var _super16 = _createSuper(Legend);\n\n  function Legend(config) {\n    var _this11;\n\n    Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this, Legend);\n\n    _this11 = _super16.call(this);\n    _this11._added = false;\n    _this11.legendHitBoxes = [];\n    _this11._hoveredItem = null;\n    _this11.doughnutMode = false;\n    _this11.chart = config.chart;\n    _this11.options = config.options;\n    _this11.ctx = config.ctx;\n    _this11.legendItems = undefined;\n    _this11.columnSizes = undefined;\n    _this11.lineWidths = undefined;\n    _this11.maxHeight = undefined;\n    _this11.maxWidth = undefined;\n    _this11.top = undefined;\n    _this11.bottom = undefined;\n    _this11.left = undefined;\n    _this11.right = undefined;\n    _this11.height = undefined;\n    _this11.width = undefined;\n    _this11._margins = undefined;\n    _this11.position = undefined;\n    _this11.weight = undefined;\n    _this11.fullSize = undefined;\n    return _this11;\n  }\n\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(Legend, [{\n    key: \"update\",\n    value: function update(maxWidth, maxHeight, margins) {\n      var me = this;\n      me.maxWidth = maxWidth;\n      me.maxHeight = maxHeight;\n      me._margins = margins;\n      me.setDimensions();\n      me.buildLabels();\n      me.fit();\n    }\n  }, {\n    key: \"setDimensions\",\n    value: function setDimensions() {\n      var me = this;\n\n      if (me.isHorizontal()) {\n        me.width = me.maxWidth;\n        me.left = 0;\n        me.right = me.width;\n      } else {\n        me.height = me.maxHeight;\n        me.top = 0;\n        me.bottom = me.height;\n      }\n    }\n  }, {\n    key: \"buildLabels\",\n    value: function buildLabels() {\n      var me = this;\n      var labelOpts = me.options.labels || {};\n      var legendItems = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"N\"])(labelOpts.generateLabels, [me.chart], me) || [];\n\n      if (labelOpts.filter) {\n        legendItems = legendItems.filter(function (item) {\n          return labelOpts.filter(item, me.chart.data);\n        });\n      }\n\n      if (labelOpts.sort) {\n        legendItems = legendItems.sort(function (a, b) {\n          return labelOpts.sort(a, b, me.chart.data);\n        });\n      }\n\n      if (me.options.reverse) {\n        legendItems.reverse();\n      }\n\n      me.legendItems = legendItems;\n    }\n  }, {\n    key: \"fit\",\n    value: function fit() {\n      var me = this;\n      var options = me.options,\n          ctx = me.ctx;\n\n      if (!options.display) {\n        me.width = me.height = 0;\n        return;\n      }\n\n      var labelOpts = options.labels;\n      var labelFont = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"W\"])(labelOpts.font);\n      var fontSize = labelFont.size;\n\n      var titleHeight = me._computeTitleHeight();\n\n      var _getBoxSize = getBoxSize(labelOpts, fontSize),\n          boxWidth = _getBoxSize.boxWidth,\n          itemHeight = _getBoxSize.itemHeight;\n\n      var width, height;\n      ctx.font = labelFont.string;\n\n      if (me.isHorizontal()) {\n        width = me.maxWidth;\n        height = me._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n      } else {\n        height = me.maxHeight;\n        width = me._fitCols(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n      }\n\n      me.width = Math.min(width, options.maxWidth || me.maxWidth);\n      me.height = Math.min(height, options.maxHeight || me.maxHeight);\n    }\n  }, {\n    key: \"_fitRows\",\n    value: function _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n      var me = this;\n      var ctx = me.ctx,\n          maxWidth = me.maxWidth,\n          padding = me.options.labels.padding;\n      var hitboxes = me.legendHitBoxes = [];\n      var lineWidths = me.lineWidths = [0];\n      var lineHeight = itemHeight + padding;\n      var totalHeight = titleHeight;\n      ctx.textAlign = 'left';\n      ctx.textBaseline = 'middle';\n      var row = -1;\n      var top = -lineHeight;\n      me.legendItems.forEach(function (legendItem, i) {\n        var itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n\n        if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n          totalHeight += lineHeight;\n          lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n          top += lineHeight;\n          row++;\n        }\n\n        hitboxes[i] = {\n          left: 0,\n          top: top,\n          row: row,\n          width: itemWidth,\n          height: itemHeight\n        };\n        lineWidths[lineWidths.length - 1] += itemWidth + padding;\n      });\n      return totalHeight;\n    }\n  }, {\n    key: \"_fitCols\",\n    value: function _fitCols(titleHeight, fontSize, boxWidth, itemHeight) {\n      var me = this;\n      var ctx = me.ctx,\n          maxHeight = me.maxHeight,\n          padding = me.options.labels.padding;\n      var hitboxes = me.legendHitBoxes = [];\n      var columnSizes = me.columnSizes = [];\n      var heightLimit = maxHeight - titleHeight;\n      var totalWidth = padding;\n      var currentColWidth = 0;\n      var currentColHeight = 0;\n      var left = 0;\n      var top = 0;\n      var col = 0;\n      me.legendItems.forEach(function (legendItem, i) {\n        var itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n\n        if (i > 0 && currentColHeight + fontSize + 2 * padding > heightLimit) {\n          totalWidth += currentColWidth + padding;\n          columnSizes.push({\n            width: currentColWidth,\n            height: currentColHeight\n          });\n          left += currentColWidth + padding;\n          col++;\n          top = 0;\n          currentColWidth = currentColHeight = 0;\n        }\n\n        currentColWidth = Math.max(currentColWidth, itemWidth);\n        currentColHeight += fontSize + padding;\n        hitboxes[i] = {\n          left: left,\n          top: top,\n          col: col,\n          width: itemWidth,\n          height: itemHeight\n        };\n        top += itemHeight + padding;\n      });\n      totalWidth += currentColWidth;\n      columnSizes.push({\n        width: currentColWidth,\n        height: currentColHeight\n      });\n      return totalWidth;\n    }\n  }, {\n    key: \"adjustHitBoxes\",\n    value: function adjustHitBoxes() {\n      var me = this;\n\n      if (!me.options.display) {\n        return;\n      }\n\n      var titleHeight = me._computeTitleHeight();\n\n      var hitboxes = me.legendHitBoxes,\n          _me$options6 = me.options,\n          align = _me$options6.align,\n          padding = _me$options6.labels.padding;\n\n      if (this.isHorizontal()) {\n        var row = 0;\n\n        var left = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"Y\"])(align, me.left + padding, me.right - me.lineWidths[row]);\n\n        var _iterator14 = _createForOfIteratorHelper(hitboxes),\n            _step14;\n\n        try {\n          for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n            var hitbox = _step14.value;\n\n            if (row !== hitbox.row) {\n              row = hitbox.row;\n              left = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"Y\"])(align, me.left + padding, me.right - me.lineWidths[row]);\n            }\n\n            hitbox.top += me.top + titleHeight + padding;\n            hitbox.left = left;\n            left += hitbox.width + padding;\n          }\n        } catch (err) {\n          _iterator14.e(err);\n        } finally {\n          _iterator14.f();\n        }\n      } else {\n        var col = 0;\n\n        var top = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"Y\"])(align, me.top + titleHeight + padding, me.bottom - me.columnSizes[col].height);\n\n        var _iterator15 = _createForOfIteratorHelper(hitboxes),\n            _step15;\n\n        try {\n          for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n            var _hitbox = _step15.value;\n\n            if (_hitbox.col !== col) {\n              col = _hitbox.col;\n              top = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"Y\"])(align, me.top + titleHeight + padding, me.bottom - me.columnSizes[col].height);\n            }\n\n            _hitbox.top = top;\n            _hitbox.left += me.left + padding;\n            top += _hitbox.height + padding;\n          }\n        } catch (err) {\n          _iterator15.e(err);\n        } finally {\n          _iterator15.f();\n        }\n      }\n    }\n  }, {\n    key: \"isHorizontal\",\n    value: function isHorizontal() {\n      return this.options.position === 'top' || this.options.position === 'bottom';\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var me = this;\n\n      if (me.options.display) {\n        var ctx = me.ctx;\n        Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"k\"])(ctx, me);\n\n        me._draw();\n\n        Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"m\"])(ctx);\n      }\n    }\n  }, {\n    key: \"_draw\",\n    value: function _draw() {\n      var me = this;\n      var opts = me.options,\n          columnSizes = me.columnSizes,\n          lineWidths = me.lineWidths,\n          ctx = me.ctx;\n      var align = opts.align,\n          labelOpts = opts.labels;\n      var defaultColor = _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"d\"].color;\n      var rtlHelper = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"at\"])(opts.rtl, me.left, me.width);\n      var labelFont = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"W\"])(labelOpts.font);\n      var fontColor = labelOpts.color,\n          padding = labelOpts.padding;\n      var fontSize = labelFont.size;\n      var halfFontSize = fontSize / 2;\n      var cursor;\n      me.drawTitle();\n      ctx.textAlign = rtlHelper.textAlign('left');\n      ctx.textBaseline = 'middle';\n      ctx.lineWidth = 0.5;\n      ctx.font = labelFont.string;\n\n      var _getBoxSize2 = getBoxSize(labelOpts, fontSize),\n          boxWidth = _getBoxSize2.boxWidth,\n          boxHeight = _getBoxSize2.boxHeight,\n          itemHeight = _getBoxSize2.itemHeight;\n\n      var drawLegendBox = function drawLegendBox(x, y, legendItem) {\n        if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n          return;\n        }\n\n        ctx.save();\n        var lineWidth = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"v\"])(legendItem.lineWidth, 1);\n        ctx.fillStyle = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"v\"])(legendItem.fillStyle, defaultColor);\n        ctx.lineCap = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"v\"])(legendItem.lineCap, 'butt');\n        ctx.lineDashOffset = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"v\"])(legendItem.lineDashOffset, 0);\n        ctx.lineJoin = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"v\"])(legendItem.lineJoin, 'miter');\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"v\"])(legendItem.strokeStyle, defaultColor);\n        ctx.setLineDash(Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"v\"])(legendItem.lineDash, []));\n\n        if (labelOpts.usePointStyle) {\n          var drawOptions = {\n            radius: boxWidth * Math.SQRT2 / 2,\n            pointStyle: legendItem.pointStyle,\n            rotation: legendItem.rotation,\n            borderWidth: lineWidth\n          };\n          var centerX = rtlHelper.xPlus(x, boxWidth / 2);\n          var centerY = y + halfFontSize;\n          Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"an\"])(ctx, drawOptions, centerX, centerY);\n        } else {\n          var yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n          var xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n          var borderRadius = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"aq\"])(legendItem.borderRadius);\n          ctx.beginPath();\n\n          if (Object.values(borderRadius).some(function (v) {\n            return v !== 0;\n          })) {\n            Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"ao\"])(ctx, {\n              x: xBoxLeft,\n              y: yBoxTop,\n              w: boxWidth,\n              h: boxHeight,\n              radius: borderRadius\n            });\n          } else {\n            ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n          }\n\n          ctx.fill();\n\n          if (lineWidth !== 0) {\n            ctx.stroke();\n          }\n        }\n\n        ctx.restore();\n      };\n\n      var fillText = function fillText(x, y, legendItem) {\n        Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"V\"])(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n          strikethrough: legendItem.hidden,\n          textAlign: legendItem.textAlign\n        });\n      };\n\n      var isHorizontal = me.isHorizontal();\n\n      var titleHeight = this._computeTitleHeight();\n\n      if (isHorizontal) {\n        cursor = {\n          x: Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"Y\"])(align, me.left + padding, me.right - lineWidths[0]),\n          y: me.top + padding + titleHeight,\n          line: 0\n        };\n      } else {\n        cursor = {\n          x: me.left + padding,\n          y: Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"Y\"])(align, me.top + titleHeight + padding, me.bottom - columnSizes[0].height),\n          line: 0\n        };\n      }\n\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"au\"])(me.ctx, opts.textDirection);\n      var lineHeight = itemHeight + padding;\n      me.legendItems.forEach(function (legendItem, i) {\n        ctx.strokeStyle = legendItem.fontColor || fontColor;\n        ctx.fillStyle = legendItem.fontColor || fontColor;\n        var textWidth = ctx.measureText(legendItem.text).width;\n        var textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n        var width = boxWidth + fontSize / 2 + textWidth;\n        var x = cursor.x;\n        var y = cursor.y;\n        rtlHelper.setWidth(me.width);\n\n        if (isHorizontal) {\n          if (i > 0 && x + width + padding > me.right) {\n            y = cursor.y += lineHeight;\n            cursor.line++;\n            x = cursor.x = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"Y\"])(align, me.left + padding, me.right - lineWidths[cursor.line]);\n          }\n        } else if (i > 0 && y + lineHeight > me.bottom) {\n          x = cursor.x = x + columnSizes[cursor.line].width + padding;\n          cursor.line++;\n          y = cursor.y = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"Y\"])(align, me.top + titleHeight + padding, me.bottom - columnSizes[cursor.line].height);\n        }\n\n        var realX = rtlHelper.x(x);\n        drawLegendBox(realX, y, legendItem);\n        x = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"av\"])(textAlign, x + boxWidth + halfFontSize, me.right);\n        fillText(rtlHelper.x(x), y, legendItem);\n\n        if (isHorizontal) {\n          cursor.x += width + padding;\n        } else {\n          cursor.y += lineHeight;\n        }\n      });\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"aw\"])(me.ctx, opts.textDirection);\n    }\n  }, {\n    key: \"drawTitle\",\n    value: function drawTitle() {\n      var me = this;\n      var opts = me.options;\n      var titleOpts = opts.title;\n      var titleFont = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"W\"])(titleOpts.font);\n      var titlePadding = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"C\"])(titleOpts.padding);\n\n      if (!titleOpts.display) {\n        return;\n      }\n\n      var rtlHelper = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"at\"])(opts.rtl, me.left, me.width);\n      var ctx = me.ctx;\n      var position = titleOpts.position;\n      var halfFontSize = titleFont.size / 2;\n      var topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n      var y;\n      var left = me.left;\n      var maxWidth = me.width;\n\n      if (this.isHorizontal()) {\n        maxWidth = Math.max.apply(Math, Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(me.lineWidths));\n        y = me.top + topPaddingPlusHalfFontSize;\n        left = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"Y\"])(opts.align, left, me.right - maxWidth);\n      } else {\n        var maxHeight = me.columnSizes.reduce(function (acc, size) {\n          return Math.max(acc, size.height);\n        }, 0);\n        y = topPaddingPlusHalfFontSize + Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"Y\"])(opts.align, me.top, me.bottom - maxHeight - opts.labels.padding - me._computeTitleHeight());\n      }\n\n      var x = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"Y\"])(position, left, left + maxWidth);\n\n      ctx.textAlign = rtlHelper.textAlign(Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"X\"])(position));\n      ctx.textBaseline = 'middle';\n      ctx.strokeStyle = titleOpts.color;\n      ctx.fillStyle = titleOpts.color;\n      ctx.font = titleFont.string;\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"V\"])(ctx, titleOpts.text, x, y, titleFont);\n    }\n  }, {\n    key: \"_computeTitleHeight\",\n    value: function _computeTitleHeight() {\n      var titleOpts = this.options.title;\n      var titleFont = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"W\"])(titleOpts.font);\n      var titlePadding = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"C\"])(titleOpts.padding);\n      return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n    }\n  }, {\n    key: \"_getLegendItemAt\",\n    value: function _getLegendItemAt(x, y) {\n      var me = this;\n      var i, hitBox, lh;\n\n      if (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {\n        lh = me.legendHitBoxes;\n\n        for (i = 0; i < lh.length; ++i) {\n          hitBox = lh[i];\n\n          if (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {\n            return me.legendItems[i];\n          }\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(e) {\n      var me = this;\n      var opts = me.options;\n\n      if (!isListened(e.type, opts)) {\n        return;\n      }\n\n      var hoveredItem = me._getLegendItemAt(e.x, e.y);\n\n      if (e.type === 'mousemove') {\n        var previous = me._hoveredItem;\n        var sameItem = itemsEqual(previous, hoveredItem);\n\n        if (previous && !sameItem) {\n          Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"N\"])(opts.onLeave, [e, previous, me], me);\n        }\n\n        me._hoveredItem = hoveredItem;\n\n        if (hoveredItem && !sameItem) {\n          Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"N\"])(opts.onHover, [e, hoveredItem, me], me);\n        }\n      } else if (hoveredItem) {\n        Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"N\"])(opts.onClick, [e, hoveredItem, me], me);\n      }\n    }\n  }]);\n\n  return Legend;\n}(Element);\n\nfunction isListened(type, opts) {\n  if (type === 'mousemove' && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n\n  return false;\n}\n\nvar plugin_legend = {\n  id: 'legend',\n  _element: Legend,\n  start: function start(chart, _args, options) {\n    var legend = chart.legend = new Legend({\n      ctx: chart.ctx,\n      options: options,\n      chart: chart\n    });\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n  stop: function stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n  beforeUpdate: function beforeUpdate(chart, _args, options) {\n    var legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n  afterUpdate: function afterUpdate(chart) {\n    var legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n  afterEvent: function afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n    onClick: function onClick(e, legendItem, legend) {\n      var index = legendItem.datasetIndex;\n      var ci = legend.chart;\n\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n    onHover: null,\n    onLeave: null,\n    labels: {\n      color: function color(ctx) {\n        return ctx.chart.options.color;\n      },\n      boxWidth: 40,\n      padding: 10,\n      generateLabels: function generateLabels(chart) {\n        var datasets = chart.data.datasets;\n        var _chart$legend$options = chart.legend.options.labels,\n            usePointStyle = _chart$legend$options.usePointStyle,\n            pointStyle = _chart$legend$options.pointStyle,\n            textAlign = _chart$legend$options.textAlign,\n            color = _chart$legend$options.color;\n        return chart._getSortedDatasetMetas().map(function (meta) {\n          var style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          var borderWidth = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"C\"])(style.borderWidth);\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: 0,\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n    title: {\n      color: function color(ctx) {\n        return ctx.chart.options.color;\n      },\n      display: false,\n      position: 'center',\n      text: ''\n    }\n  },\n  descriptors: {\n    _scriptable: function _scriptable(name) {\n      return !name.startsWith('on');\n    },\n    labels: {\n      _scriptable: function _scriptable(name) {\n        return !['generateLabels', 'filter', 'sort'].includes(name);\n      }\n    }\n  }\n};\n\nvar Title = /*#__PURE__*/function (_Element7) {\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(Title, _Element7);\n\n  var _super17 = _createSuper(Title);\n\n  function Title(config) {\n    var _this12;\n\n    Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this, Title);\n\n    _this12 = _super17.call(this);\n    _this12.chart = config.chart;\n    _this12.options = config.options;\n    _this12.ctx = config.ctx;\n    _this12._padding = undefined;\n    _this12.top = undefined;\n    _this12.bottom = undefined;\n    _this12.left = undefined;\n    _this12.right = undefined;\n    _this12.width = undefined;\n    _this12.height = undefined;\n    _this12.position = undefined;\n    _this12.weight = undefined;\n    _this12.fullSize = undefined;\n    return _this12;\n  }\n\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(Title, [{\n    key: \"update\",\n    value: function update(maxWidth, maxHeight) {\n      var me = this;\n      var opts = me.options;\n      me.left = 0;\n      me.top = 0;\n\n      if (!opts.display) {\n        me.width = me.height = me.right = me.bottom = 0;\n        return;\n      }\n\n      me.width = me.right = maxWidth;\n      me.height = me.bottom = maxHeight;\n      var lineCount = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"b\"])(opts.text) ? opts.text.length : 1;\n      me._padding = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"C\"])(opts.padding);\n\n      var textSize = lineCount * Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"W\"])(opts.font).lineHeight + me._padding.height;\n\n      if (me.isHorizontal()) {\n        me.height = textSize;\n      } else {\n        me.width = textSize;\n      }\n    }\n  }, {\n    key: \"isHorizontal\",\n    value: function isHorizontal() {\n      var pos = this.options.position;\n      return pos === 'top' || pos === 'bottom';\n    }\n  }, {\n    key: \"_drawArgs\",\n    value: function _drawArgs(offset) {\n      var top = this.top,\n          left = this.left,\n          bottom = this.bottom,\n          right = this.right,\n          options = this.options;\n      var align = options.align;\n      var rotation = 0;\n      var maxWidth, titleX, titleY;\n\n      if (this.isHorizontal()) {\n        titleX = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"Y\"])(align, left, right);\n        titleY = top + offset;\n        maxWidth = right - left;\n      } else {\n        if (options.position === 'left') {\n          titleX = left + offset;\n          titleY = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"Y\"])(align, bottom, top);\n          rotation = _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"P\"] * -0.5;\n        } else {\n          titleX = right - offset;\n          titleY = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"Y\"])(align, top, bottom);\n          rotation = _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"P\"] * 0.5;\n        }\n\n        maxWidth = bottom - top;\n      }\n\n      return {\n        titleX: titleX,\n        titleY: titleY,\n        maxWidth: maxWidth,\n        rotation: rotation\n      };\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var me = this;\n      var ctx = me.ctx;\n      var opts = me.options;\n\n      if (!opts.display) {\n        return;\n      }\n\n      var fontOpts = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"W\"])(opts.font);\n      var lineHeight = fontOpts.lineHeight;\n      var offset = lineHeight / 2 + me._padding.top;\n\n      var _me$_drawArgs = me._drawArgs(offset),\n          titleX = _me$_drawArgs.titleX,\n          titleY = _me$_drawArgs.titleY,\n          maxWidth = _me$_drawArgs.maxWidth,\n          rotation = _me$_drawArgs.rotation;\n\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"V\"])(ctx, opts.text, 0, 0, fontOpts, {\n        color: opts.color,\n        maxWidth: maxWidth,\n        rotation: rotation,\n        textAlign: Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"X\"])(opts.align),\n        textBaseline: 'middle',\n        translation: [titleX, titleY]\n      });\n    }\n  }]);\n\n  return Title;\n}(Element);\n\nfunction createTitle(chart, titleOpts) {\n  var title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart: chart\n  });\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\n\nvar plugin_title = {\n  id: 'title',\n  _element: Title,\n  start: function start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n  stop: function stop(chart) {\n    var titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n  beforeUpdate: function beforeUpdate(chart, _args, options) {\n    var title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold'\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nvar positioners = {\n  average: function average(items) {\n    if (!items.length) {\n      return false;\n    }\n\n    var i, len;\n    var x = 0;\n    var y = 0;\n    var count = 0;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      var el = items[i].element;\n\n      if (el && el.hasValue()) {\n        var pos = el.tooltipPosition();\n        x += pos.x;\n        y += pos.y;\n        ++count;\n      }\n    }\n\n    return {\n      x: x / count,\n      y: y / count\n    };\n  },\n  nearest: function nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n\n    var x = eventPosition.x;\n    var y = eventPosition.y;\n    var minDistance = Number.POSITIVE_INFINITY;\n    var i, len, nearestElement;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      var el = items[i].element;\n\n      if (el && el.hasValue()) {\n        var center = el.getCenterPoint();\n        var d = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"ay\"])(eventPosition, center);\n\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n\n    if (nearestElement) {\n      var tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n\n    return {\n      x: x,\n      y: y\n    };\n  }\n};\n\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"b\"])(toPush)) {\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n\n  return base;\n}\n\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n\n  return str;\n}\n\nfunction createTooltipItem(chart, item) {\n  var element = item.element,\n      datasetIndex = item.datasetIndex,\n      index = item.index;\n  var controller = chart.getDatasetMeta(datasetIndex).controller;\n\n  var _controller$getLabelA = controller.getLabelAndValue(index),\n      label = _controller$getLabelA.label,\n      value = _controller$getLabelA.value;\n\n  return {\n    chart: chart,\n    label: label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex: datasetIndex,\n    element: element\n  };\n}\n\nfunction getTooltipSize(tooltip, options) {\n  var ctx = tooltip._chart.ctx;\n  var body = tooltip.body,\n      footer = tooltip.footer,\n      title = tooltip.title;\n  var boxWidth = options.boxWidth,\n      boxHeight = options.boxHeight;\n  var bodyFont = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"W\"])(options.bodyFont);\n  var titleFont = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"W\"])(options.titleFont);\n  var footerFont = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"W\"])(options.footerFont);\n  var titleLineCount = title.length;\n  var footerLineCount = footer.length;\n  var bodyLineItemCount = body.length;\n  var padding = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"C\"])(options.padding);\n  var height = padding.height;\n  var width = 0;\n  var combinedBodyLength = body.reduce(function (count, bodyItem) {\n    return count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;\n  }, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n  }\n\n  if (combinedBodyLength) {\n    var bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n  }\n\n  if (footerLineCount) {\n    height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n  }\n\n  var widthPadding = 0;\n\n  var maxLineWidth = function maxLineWidth(line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n\n  ctx.save();\n  ctx.font = titleFont.string;\n  Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"D\"])(tooltip.title, maxLineWidth);\n  ctx.font = bodyFont.string;\n  Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"D\"])(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n  widthPadding = options.displayColors ? boxWidth + 2 : 0;\n  Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"D\"])(body, function (bodyItem) {\n    Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"D\"])(bodyItem.before, maxLineWidth);\n    Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"D\"])(bodyItem.lines, maxLineWidth);\n    Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"D\"])(bodyItem.after, maxLineWidth);\n  });\n  widthPadding = 0;\n  ctx.font = footerFont.string;\n  Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"D\"])(tooltip.footer, maxLineWidth);\n  ctx.restore();\n  width += padding.width;\n  return {\n    width: width,\n    height: height\n  };\n}\n\nfunction determineYAlign(chart, size) {\n  var y = size.y,\n      height = size.height;\n\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > chart.height - height / 2) {\n    return 'bottom';\n  }\n\n  return 'center';\n}\n\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  var x = size.x,\n      width = size.width;\n  var caret = options.caretSize + options.caretPadding;\n\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\n\nfunction determineXAlign(chart, options, size, yAlign) {\n  var x = size.x,\n      width = size.width;\n  var chartWidth = chart.width,\n      _chart$chartArea = chart.chartArea,\n      left = _chart$chartArea.left,\n      right = _chart$chartArea.right;\n  var xAlign = 'center';\n\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n\n  return xAlign;\n}\n\nfunction determineAlignment(chart, options, size) {\n  var yAlign = options.yAlign || determineYAlign(chart, size);\n  return {\n    xAlign: options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign: yAlign\n  };\n}\n\nfunction alignX(size, xAlign) {\n  var x = size.x,\n      width = size.width;\n\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= width / 2;\n  }\n\n  return x;\n}\n\nfunction alignY(size, yAlign, paddingAndSize) {\n  var y = size.y,\n      height = size.height;\n\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= height / 2;\n  }\n\n  return y;\n}\n\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  var caretSize = options.caretSize,\n      caretPadding = options.caretPadding,\n      cornerRadius = options.cornerRadius;\n  var xAlign = alignment.xAlign,\n      yAlign = alignment.yAlign;\n  var paddingAndSize = caretSize + caretPadding;\n  var radiusAndPadding = cornerRadius + caretPadding;\n  var x = alignX(size, xAlign);\n  var y = alignY(size, yAlign, paddingAndSize);\n\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= radiusAndPadding;\n  } else if (xAlign === 'right') {\n    x += radiusAndPadding;\n  }\n\n  return {\n    x: Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"x\"])(x, 0, chart.width - size.width),\n    y: Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"x\"])(y, 0, chart.height - size.height)\n  };\n}\n\nfunction getAlignedX(tooltip, align, options) {\n  var padding = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"C\"])(options.padding);\n  return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\n\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\n\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return Object.assign(Object.create(parent), {\n    tooltip: tooltip,\n    tooltipItems: tooltipItems,\n    type: 'tooltip'\n  });\n}\n\nfunction overrideCallbacks(callbacks, context) {\n  var override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\n\nvar Tooltip = /*#__PURE__*/function (_Element8) {\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(Tooltip, _Element8);\n\n  var _super18 = _createSuper(Tooltip);\n\n  function Tooltip(config) {\n    var _this13;\n\n    Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this, Tooltip);\n\n    _this13 = _super18.call(this);\n    _this13.opacity = 0;\n    _this13._active = [];\n    _this13._chart = config._chart;\n    _this13._eventPosition = undefined;\n    _this13._size = undefined;\n    _this13._cachedAnimations = undefined;\n    _this13._tooltipItems = [];\n    _this13.$animations = undefined;\n    _this13.$context = undefined;\n    _this13.options = config.options;\n    _this13.dataPoints = undefined;\n    _this13.title = undefined;\n    _this13.beforeBody = undefined;\n    _this13.body = undefined;\n    _this13.afterBody = undefined;\n    _this13.footer = undefined;\n    _this13.xAlign = undefined;\n    _this13.yAlign = undefined;\n    _this13.x = undefined;\n    _this13.y = undefined;\n    _this13.height = undefined;\n    _this13.width = undefined;\n    _this13.caretX = undefined;\n    _this13.caretY = undefined;\n    _this13.labelColors = undefined;\n    _this13.labelPointStyles = undefined;\n    _this13.labelTextColors = undefined;\n    return _this13;\n  }\n\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(Tooltip, [{\n    key: \"initialize\",\n    value: function initialize(options) {\n      this.options = options;\n      this._cachedAnimations = undefined;\n      this.$context = undefined;\n    }\n  }, {\n    key: \"_resolveAnimations\",\n    value: function _resolveAnimations() {\n      var me = this;\n      var cached = me._cachedAnimations;\n\n      if (cached) {\n        return cached;\n      }\n\n      var chart = me._chart;\n      var options = me.options.setContext(me.getContext());\n      var opts = options.enabled && chart.options.animation && options.animations;\n      var animations = new Animations(me._chart, opts);\n\n      if (opts._cacheable) {\n        me._cachedAnimations = Object.freeze(animations);\n      }\n\n      return animations;\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext() {\n      var me = this;\n      return me.$context || (me.$context = createTooltipContext(me._chart.getContext(), me, me._tooltipItems));\n    }\n  }, {\n    key: \"getTitle\",\n    value: function getTitle(context, options) {\n      var me = this;\n      var callbacks = options.callbacks;\n      var beforeTitle = callbacks.beforeTitle.apply(me, [context]);\n      var title = callbacks.title.apply(me, [context]);\n      var afterTitle = callbacks.afterTitle.apply(me, [context]);\n      var lines = [];\n      lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n      lines = pushOrConcat(lines, splitNewlines(title));\n      lines = pushOrConcat(lines, splitNewlines(afterTitle));\n      return lines;\n    }\n  }, {\n    key: \"getBeforeBody\",\n    value: function getBeforeBody(tooltipItems, options) {\n      return getBeforeAfterBodyLines(options.callbacks.beforeBody.apply(this, [tooltipItems]));\n    }\n  }, {\n    key: \"getBody\",\n    value: function getBody(tooltipItems, options) {\n      var me = this;\n      var callbacks = options.callbacks;\n      var bodyItems = [];\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"D\"])(tooltipItems, function (context) {\n        var bodyItem = {\n          before: [],\n          lines: [],\n          after: []\n        };\n        var scoped = overrideCallbacks(callbacks, context);\n        pushOrConcat(bodyItem.before, splitNewlines(scoped.beforeLabel.call(me, context)));\n        pushOrConcat(bodyItem.lines, scoped.label.call(me, context));\n        pushOrConcat(bodyItem.after, splitNewlines(scoped.afterLabel.call(me, context)));\n        bodyItems.push(bodyItem);\n      });\n      return bodyItems;\n    }\n  }, {\n    key: \"getAfterBody\",\n    value: function getAfterBody(tooltipItems, options) {\n      return getBeforeAfterBodyLines(options.callbacks.afterBody.apply(this, [tooltipItems]));\n    }\n  }, {\n    key: \"getFooter\",\n    value: function getFooter(tooltipItems, options) {\n      var me = this;\n      var callbacks = options.callbacks;\n      var beforeFooter = callbacks.beforeFooter.apply(me, [tooltipItems]);\n      var footer = callbacks.footer.apply(me, [tooltipItems]);\n      var afterFooter = callbacks.afterFooter.apply(me, [tooltipItems]);\n      var lines = [];\n      lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n      lines = pushOrConcat(lines, splitNewlines(footer));\n      lines = pushOrConcat(lines, splitNewlines(afterFooter));\n      return lines;\n    }\n  }, {\n    key: \"_createItems\",\n    value: function _createItems(options) {\n      var me = this;\n      var active = me._active;\n      var data = me._chart.data;\n      var labelColors = [];\n      var labelPointStyles = [];\n      var labelTextColors = [];\n      var tooltipItems = [];\n      var i, len;\n\n      for (i = 0, len = active.length; i < len; ++i) {\n        tooltipItems.push(createTooltipItem(me._chart, active[i]));\n      }\n\n      if (options.filter) {\n        tooltipItems = tooltipItems.filter(function (element, index, array) {\n          return options.filter(element, index, array, data);\n        });\n      }\n\n      if (options.itemSort) {\n        tooltipItems = tooltipItems.sort(function (a, b) {\n          return options.itemSort(a, b, data);\n        });\n      }\n\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"D\"])(tooltipItems, function (context) {\n        var scoped = overrideCallbacks(options.callbacks, context);\n        labelColors.push(scoped.labelColor.call(me, context));\n        labelPointStyles.push(scoped.labelPointStyle.call(me, context));\n        labelTextColors.push(scoped.labelTextColor.call(me, context));\n      });\n      me.labelColors = labelColors;\n      me.labelPointStyles = labelPointStyles;\n      me.labelTextColors = labelTextColors;\n      me.dataPoints = tooltipItems;\n      return tooltipItems;\n    }\n  }, {\n    key: \"update\",\n    value: function update(changed, replay) {\n      var me = this;\n      var options = me.options.setContext(me.getContext());\n      var active = me._active;\n      var properties;\n      var tooltipItems = [];\n\n      if (!active.length) {\n        if (me.opacity !== 0) {\n          properties = {\n            opacity: 0\n          };\n        }\n      } else {\n        var position = positioners[options.position].call(me, active, me._eventPosition);\n        tooltipItems = me._createItems(options);\n        me.title = me.getTitle(tooltipItems, options);\n        me.beforeBody = me.getBeforeBody(tooltipItems, options);\n        me.body = me.getBody(tooltipItems, options);\n        me.afterBody = me.getAfterBody(tooltipItems, options);\n        me.footer = me.getFooter(tooltipItems, options);\n        var size = me._size = getTooltipSize(me, options);\n        var positionAndSize = Object.assign({}, position, size);\n        var alignment = determineAlignment(me._chart, options, positionAndSize);\n        var backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, me._chart);\n        me.xAlign = alignment.xAlign;\n        me.yAlign = alignment.yAlign;\n        properties = {\n          opacity: 1,\n          x: backgroundPoint.x,\n          y: backgroundPoint.y,\n          width: size.width,\n          height: size.height,\n          caretX: position.x,\n          caretY: position.y\n        };\n      }\n\n      me._tooltipItems = tooltipItems;\n      me.$context = undefined;\n\n      if (properties) {\n        me._resolveAnimations().update(me, properties);\n      }\n\n      if (changed && options.external) {\n        options.external.call(me, {\n          chart: me._chart,\n          tooltip: me,\n          replay: replay\n        });\n      }\n    }\n  }, {\n    key: \"drawCaret\",\n    value: function drawCaret(tooltipPoint, ctx, size, options) {\n      var caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n      ctx.lineTo(caretPosition.x1, caretPosition.y1);\n      ctx.lineTo(caretPosition.x2, caretPosition.y2);\n      ctx.lineTo(caretPosition.x3, caretPosition.y3);\n    }\n  }, {\n    key: \"getCaretPosition\",\n    value: function getCaretPosition(tooltipPoint, size, options) {\n      var xAlign = this.xAlign,\n          yAlign = this.yAlign;\n      var cornerRadius = options.cornerRadius,\n          caretSize = options.caretSize;\n      var ptX = tooltipPoint.x,\n          ptY = tooltipPoint.y;\n      var width = size.width,\n          height = size.height;\n      var x1, x2, x3, y1, y2, y3;\n\n      if (yAlign === 'center') {\n        y2 = ptY + height / 2;\n\n        if (xAlign === 'left') {\n          x1 = ptX;\n          x2 = x1 - caretSize;\n          y1 = y2 + caretSize;\n          y3 = y2 - caretSize;\n        } else {\n          x1 = ptX + width;\n          x2 = x1 + caretSize;\n          y1 = y2 - caretSize;\n          y3 = y2 + caretSize;\n        }\n\n        x3 = x1;\n      } else {\n        if (xAlign === 'left') {\n          x2 = ptX + cornerRadius + caretSize;\n        } else if (xAlign === 'right') {\n          x2 = ptX + width - cornerRadius - caretSize;\n        } else {\n          x2 = this.caretX;\n        }\n\n        if (yAlign === 'top') {\n          y1 = ptY;\n          y2 = y1 - caretSize;\n          x1 = x2 - caretSize;\n          x3 = x2 + caretSize;\n        } else {\n          y1 = ptY + height;\n          y2 = y1 + caretSize;\n          x1 = x2 + caretSize;\n          x3 = x2 - caretSize;\n        }\n\n        y3 = y1;\n      }\n\n      return {\n        x1: x1,\n        x2: x2,\n        x3: x3,\n        y1: y1,\n        y2: y2,\n        y3: y3\n      };\n    }\n  }, {\n    key: \"drawTitle\",\n    value: function drawTitle(pt, ctx, options) {\n      var me = this;\n      var title = me.title;\n      var length = title.length;\n      var titleFont, titleSpacing, i;\n\n      if (length) {\n        var rtlHelper = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"at\"])(options.rtl, me.x, me.width);\n        pt.x = getAlignedX(me, options.titleAlign, options);\n        ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n        ctx.textBaseline = 'middle';\n        titleFont = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"W\"])(options.titleFont);\n        titleSpacing = options.titleSpacing;\n        ctx.fillStyle = options.titleColor;\n        ctx.font = titleFont.string;\n\n        for (i = 0; i < length; ++i) {\n          ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n          pt.y += titleFont.lineHeight + titleSpacing;\n\n          if (i + 1 === length) {\n            pt.y += options.titleMarginBottom - titleSpacing;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_drawColorBox\",\n    value: function _drawColorBox(ctx, pt, i, rtlHelper, options) {\n      var me = this;\n      var labelColors = me.labelColors[i];\n      var labelPointStyle = me.labelPointStyles[i];\n      var boxHeight = options.boxHeight,\n          boxWidth = options.boxWidth;\n      var bodyFont = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"W\"])(options.bodyFont);\n      var colorX = getAlignedX(me, 'left', options);\n      var rtlColorX = rtlHelper.x(colorX);\n      var yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n      var colorY = pt.y + yOffSet;\n\n      if (options.usePointStyle) {\n        var drawOptions = {\n          radius: Math.min(boxWidth, boxHeight) / 2,\n          pointStyle: labelPointStyle.pointStyle,\n          rotation: labelPointStyle.rotation,\n          borderWidth: 1\n        };\n        var centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n        var centerY = colorY + boxHeight / 2;\n        ctx.strokeStyle = options.multiKeyBackground;\n        ctx.fillStyle = options.multiKeyBackground;\n        Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"an\"])(ctx, drawOptions, centerX, centerY);\n        ctx.strokeStyle = labelColors.borderColor;\n        ctx.fillStyle = labelColors.backgroundColor;\n        Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"an\"])(ctx, drawOptions, centerX, centerY);\n      } else {\n        ctx.lineWidth = labelColors.borderWidth || 1;\n        ctx.strokeStyle = labelColors.borderColor;\n        ctx.setLineDash(labelColors.borderDash || []);\n        ctx.lineDashOffset = labelColors.borderDashOffset || 0;\n        var outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n        var innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n        var borderRadius = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"aq\"])(labelColors.borderRadius);\n\n        if (Object.values(borderRadius).some(function (v) {\n          return v !== 0;\n        })) {\n          ctx.beginPath();\n          ctx.fillStyle = options.multiKeyBackground;\n          Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"ao\"])(ctx, {\n            x: outerX,\n            y: colorY,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius\n          });\n          ctx.fill();\n          ctx.stroke();\n          ctx.fillStyle = labelColors.backgroundColor;\n          ctx.beginPath();\n          Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"ao\"])(ctx, {\n            x: innerX,\n            y: colorY + 1,\n            w: boxWidth - 2,\n            h: boxHeight - 2,\n            radius: borderRadius\n          });\n          ctx.fill();\n        } else {\n          ctx.fillStyle = options.multiKeyBackground;\n          ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n          ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n          ctx.fillStyle = labelColors.backgroundColor;\n          ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n        }\n      }\n\n      ctx.fillStyle = me.labelTextColors[i];\n    }\n  }, {\n    key: \"drawBody\",\n    value: function drawBody(pt, ctx, options) {\n      var me = this;\n      var body = me.body;\n      var bodySpacing = options.bodySpacing,\n          bodyAlign = options.bodyAlign,\n          displayColors = options.displayColors,\n          boxHeight = options.boxHeight,\n          boxWidth = options.boxWidth;\n      var bodyFont = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"W\"])(options.bodyFont);\n      var bodyLineHeight = bodyFont.lineHeight;\n      var xLinePadding = 0;\n      var rtlHelper = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"at\"])(options.rtl, me.x, me.width);\n\n      var fillLineOfText = function fillLineOfText(line) {\n        ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n        pt.y += bodyLineHeight + bodySpacing;\n      };\n\n      var bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n      var bodyItem, textColor, lines, i, j, ilen, jlen;\n      ctx.textAlign = bodyAlign;\n      ctx.textBaseline = 'middle';\n      ctx.font = bodyFont.string;\n      pt.x = getAlignedX(me, bodyAlignForCalculation, options);\n      ctx.fillStyle = options.bodyColor;\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"D\"])(me.beforeBody, fillLineOfText);\n      xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + 1 : boxWidth + 2 : 0;\n\n      for (i = 0, ilen = body.length; i < ilen; ++i) {\n        bodyItem = body[i];\n        textColor = me.labelTextColors[i];\n        ctx.fillStyle = textColor;\n        Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"D\"])(bodyItem.before, fillLineOfText);\n        lines = bodyItem.lines;\n\n        if (displayColors && lines.length) {\n          me._drawColorBox(ctx, pt, i, rtlHelper, options);\n\n          bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n        }\n\n        for (j = 0, jlen = lines.length; j < jlen; ++j) {\n          fillLineOfText(lines[j]);\n          bodyLineHeight = bodyFont.lineHeight;\n        }\n\n        Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"D\"])(bodyItem.after, fillLineOfText);\n      }\n\n      xLinePadding = 0;\n      bodyLineHeight = bodyFont.lineHeight;\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"D\"])(me.afterBody, fillLineOfText);\n      pt.y -= bodySpacing;\n    }\n  }, {\n    key: \"drawFooter\",\n    value: function drawFooter(pt, ctx, options) {\n      var me = this;\n      var footer = me.footer;\n      var length = footer.length;\n      var footerFont, i;\n\n      if (length) {\n        var rtlHelper = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"at\"])(options.rtl, me.x, me.width);\n        pt.x = getAlignedX(me, options.footerAlign, options);\n        pt.y += options.footerMarginTop;\n        ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n        ctx.textBaseline = 'middle';\n        footerFont = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"W\"])(options.footerFont);\n        ctx.fillStyle = options.footerColor;\n        ctx.font = footerFont.string;\n\n        for (i = 0; i < length; ++i) {\n          ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n          pt.y += footerFont.lineHeight + options.footerSpacing;\n        }\n      }\n    }\n  }, {\n    key: \"drawBackground\",\n    value: function drawBackground(pt, ctx, tooltipSize, options) {\n      var xAlign = this.xAlign,\n          yAlign = this.yAlign;\n      var x = pt.x,\n          y = pt.y;\n      var width = tooltipSize.width,\n          height = tooltipSize.height;\n      var radius = options.cornerRadius;\n      ctx.fillStyle = options.backgroundColor;\n      ctx.strokeStyle = options.borderColor;\n      ctx.lineWidth = options.borderWidth;\n      ctx.beginPath();\n      ctx.moveTo(x + radius, y);\n\n      if (yAlign === 'top') {\n        this.drawCaret(pt, ctx, tooltipSize, options);\n      }\n\n      ctx.lineTo(x + width - radius, y);\n      ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n\n      if (yAlign === 'center' && xAlign === 'right') {\n        this.drawCaret(pt, ctx, tooltipSize, options);\n      }\n\n      ctx.lineTo(x + width, y + height - radius);\n      ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n\n      if (yAlign === 'bottom') {\n        this.drawCaret(pt, ctx, tooltipSize, options);\n      }\n\n      ctx.lineTo(x + radius, y + height);\n      ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n\n      if (yAlign === 'center' && xAlign === 'left') {\n        this.drawCaret(pt, ctx, tooltipSize, options);\n      }\n\n      ctx.lineTo(x, y + radius);\n      ctx.quadraticCurveTo(x, y, x + radius, y);\n      ctx.closePath();\n      ctx.fill();\n\n      if (options.borderWidth > 0) {\n        ctx.stroke();\n      }\n    }\n  }, {\n    key: \"_updateAnimationTarget\",\n    value: function _updateAnimationTarget(options) {\n      var me = this;\n      var chart = me._chart;\n      var anims = me.$animations;\n      var animX = anims && anims.x;\n      var animY = anims && anims.y;\n\n      if (animX || animY) {\n        var position = positioners[options.position].call(me, me._active, me._eventPosition);\n\n        if (!position) {\n          return;\n        }\n\n        var size = me._size = getTooltipSize(me, options);\n        var positionAndSize = Object.assign({}, position, me._size);\n        var alignment = determineAlignment(chart, options, positionAndSize);\n        var point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n\n        if (animX._to !== point.x || animY._to !== point.y) {\n          me.xAlign = alignment.xAlign;\n          me.yAlign = alignment.yAlign;\n          me.width = size.width;\n          me.height = size.height;\n          me.caretX = position.x;\n          me.caretY = position.y;\n\n          me._resolveAnimations().update(me, point);\n        }\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(ctx) {\n      var me = this;\n      var options = me.options.setContext(me.getContext());\n      var opacity = me.opacity;\n\n      if (!opacity) {\n        return;\n      }\n\n      me._updateAnimationTarget(options);\n\n      var tooltipSize = {\n        width: me.width,\n        height: me.height\n      };\n      var pt = {\n        x: me.x,\n        y: me.y\n      };\n      opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n      var padding = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"C\"])(options.padding);\n      var hasTooltipContent = me.title.length || me.beforeBody.length || me.body.length || me.afterBody.length || me.footer.length;\n\n      if (options.enabled && hasTooltipContent) {\n        ctx.save();\n        ctx.globalAlpha = opacity;\n        me.drawBackground(pt, ctx, tooltipSize, options);\n        Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"au\"])(ctx, options.textDirection);\n        pt.y += padding.top;\n        me.drawTitle(pt, ctx, options);\n        me.drawBody(pt, ctx, options);\n        me.drawFooter(pt, ctx, options);\n        Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"aw\"])(ctx, options.textDirection);\n        ctx.restore();\n      }\n    }\n  }, {\n    key: \"getActiveElements\",\n    value: function getActiveElements() {\n      return this._active || [];\n    }\n  }, {\n    key: \"setActiveElements\",\n    value: function setActiveElements(activeElements, eventPosition) {\n      var me = this;\n      var lastActive = me._active;\n      var active = activeElements.map(function (_ref7) {\n        var datasetIndex = _ref7.datasetIndex,\n            index = _ref7.index;\n\n        var meta = me._chart.getDatasetMeta(datasetIndex);\n\n        if (!meta) {\n          throw new Error('Cannot find a dataset at index ' + datasetIndex);\n        }\n\n        return {\n          datasetIndex: datasetIndex,\n          element: meta.data[index],\n          index: index\n        };\n      });\n      var changed = !Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"ac\"])(lastActive, active);\n\n      var positionChanged = me._positionChanged(active, eventPosition);\n\n      if (changed || positionChanged) {\n        me._active = active;\n        me._eventPosition = eventPosition;\n        me.update(true);\n      }\n    }\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(e, replay) {\n      var me = this;\n      var options = me.options;\n      var lastActive = me._active || [];\n      var changed = false;\n      var active = [];\n\n      if (e.type !== 'mouseout') {\n        active = me._chart.getElementsAtEventForMode(e, options.mode, options, replay);\n\n        if (options.reverse) {\n          active.reverse();\n        }\n      }\n\n      var positionChanged = me._positionChanged(active, e);\n\n      changed = replay || !Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"ac\"])(active, lastActive) || positionChanged;\n\n      if (changed) {\n        me._active = active;\n\n        if (options.enabled || options.external) {\n          me._eventPosition = {\n            x: e.x,\n            y: e.y\n          };\n          me.update(true, replay);\n        }\n      }\n\n      return changed;\n    }\n  }, {\n    key: \"_positionChanged\",\n    value: function _positionChanged(active, e) {\n      var caretX = this.caretX,\n          caretY = this.caretY,\n          options = this.options;\n      var position = positioners[options.position].call(this, active, e);\n      return position !== false && (caretX !== position.x || caretY !== position.y);\n    }\n  }]);\n\n  return Tooltip;\n}(Element);\n\nTooltip.positioners = positioners;\nvar plugin_tooltip = {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners: positioners,\n  afterInit: function afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({\n        _chart: chart,\n        options: options\n      });\n    }\n  },\n  beforeUpdate: function beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  reset: function reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  afterDraw: function afterDraw(chart) {\n    var tooltip = chart.tooltip;\n    var args = {\n      tooltip: tooltip\n    };\n\n    if (chart.notifyPlugins('beforeTooltipDraw', args) === false) {\n      return;\n    }\n\n    if (tooltip) {\n      tooltip.draw(chart.ctx);\n    }\n\n    chart.notifyPlugins('afterTooltipDraw', args);\n  },\n  afterEvent: function afterEvent(chart, args) {\n    if (chart.tooltip) {\n      var useFinalPosition = args.replay;\n\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition)) {\n        args.changed = true;\n      }\n    }\n  },\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold'\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {},\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold'\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: function boxHeight(ctx, opts) {\n      return opts.bodyFont.size;\n    },\n    boxWidth: function boxWidth(ctx, opts) {\n      return opts.bodyFont.size;\n    },\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart'\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY']\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: {\n      beforeTitle: _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"ax\"],\n      title: function title(tooltipItems) {\n        if (tooltipItems.length > 0) {\n          var item = tooltipItems[0];\n          var labels = item.chart.data.labels;\n          var labelCount = labels ? labels.length : 0;\n\n          if (this && this.options && this.options.mode === 'dataset') {\n            return item.dataset.label || '';\n          } else if (item.label) {\n            return item.label;\n          } else if (labelCount > 0 && item.dataIndex < labelCount) {\n            return labels[item.dataIndex];\n          }\n        }\n\n        return '';\n      },\n      afterTitle: _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"ax\"],\n      beforeBody: _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"ax\"],\n      beforeLabel: _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"ax\"],\n      label: function label(tooltipItem) {\n        if (this && this.options && this.options.mode === 'dataset') {\n          return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n        }\n\n        var label = tooltipItem.dataset.label || '';\n\n        if (label) {\n          label += ': ';\n        }\n\n        var value = tooltipItem.formattedValue;\n\n        if (!Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"j\"])(value)) {\n          label += value;\n        }\n\n        return label;\n      },\n      labelColor: function labelColor(tooltipItem) {\n        var meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        var options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n          borderColor: options.borderColor,\n          backgroundColor: options.backgroundColor,\n          borderWidth: options.borderWidth,\n          borderDash: options.borderDash,\n          borderDashOffset: options.borderDashOffset,\n          borderRadius: 0\n        };\n      },\n      labelTextColor: function labelTextColor() {\n        return this.options.bodyColor;\n      },\n      labelPointStyle: function labelPointStyle(tooltipItem) {\n        var meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        var options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n          pointStyle: options.pointStyle,\n          rotation: options.rotation\n        };\n      },\n      afterLabel: _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"ax\"],\n      afterBody: _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"ax\"],\n      beforeFooter: _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"ax\"],\n      footer: _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"ax\"],\n      afterFooter: _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"ax\"]\n    }\n  },\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n  descriptors: {\n    _scriptable: function _scriptable(name) {\n      return name !== 'filter' && name !== 'itemSort' && name !== 'external';\n    },\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n  additionalOptionScopes: ['interaction']\n};\nvar plugins = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Decimation: plugin_decimation,\n  Filler: plugin_filler,\n  Legend: plugin_legend,\n  Title: plugin_title,\n  Tooltip: plugin_tooltip\n});\n\nvar addIfString = function addIfString(labels, raw, index) {\n  return typeof raw === 'string' ? labels.push(raw) - 1 : isNaN(raw) ? null : index;\n};\n\nfunction findOrAddLabel(labels, raw, index) {\n  var first = labels.indexOf(raw);\n\n  if (first === -1) {\n    return addIfString(labels, raw, index);\n  }\n\n  var last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\n\nvar validIndex = function validIndex(index, max) {\n  return index === null ? null : Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"x\"])(Math.round(index), 0, max);\n};\n\nvar CategoryScale = /*#__PURE__*/function (_Scale) {\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(CategoryScale, _Scale);\n\n  var _super19 = _createSuper(CategoryScale);\n\n  function CategoryScale(cfg) {\n    var _this14;\n\n    Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this, CategoryScale);\n\n    _this14 = _super19.call(this, cfg);\n    _this14._startValue = undefined;\n    _this14._valueRange = 0;\n    return _this14;\n  }\n\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(CategoryScale, [{\n    key: \"parse\",\n    value: function parse(raw, index) {\n      if (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"j\"])(raw)) {\n        return null;\n      }\n\n      var labels = this.getLabels();\n      index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"v\"])(index, raw));\n      return validIndex(index, labels.length - 1);\n    }\n  }, {\n    key: \"determineDataLimits\",\n    value: function determineDataLimits() {\n      var me = this;\n\n      var _me$getUserBounds2 = me.getUserBounds(),\n          minDefined = _me$getUserBounds2.minDefined,\n          maxDefined = _me$getUserBounds2.maxDefined;\n\n      var _me$getMinMax = me.getMinMax(true),\n          min = _me$getMinMax.min,\n          max = _me$getMinMax.max;\n\n      if (me.options.bounds === 'ticks') {\n        if (!minDefined) {\n          min = 0;\n        }\n\n        if (!maxDefined) {\n          max = me.getLabels().length - 1;\n        }\n      }\n\n      me.min = min;\n      me.max = max;\n    }\n  }, {\n    key: \"buildTicks\",\n    value: function buildTicks() {\n      var me = this;\n      var min = me.min;\n      var max = me.max;\n      var offset = me.options.offset;\n      var ticks = [];\n      var labels = me.getLabels();\n      labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n      me._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n      me._startValue = me.min - (offset ? 0.5 : 0);\n\n      for (var value = min; value <= max; value++) {\n        ticks.push({\n          value: value\n        });\n      }\n\n      return ticks;\n    }\n  }, {\n    key: \"getLabelForValue\",\n    value: function getLabelForValue(value) {\n      var me = this;\n      var labels = me.getLabels();\n\n      if (value >= 0 && value < labels.length) {\n        return labels[value];\n      }\n\n      return value;\n    }\n  }, {\n    key: \"configure\",\n    value: function configure() {\n      var me = this;\n\n      Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(CategoryScale.prototype), \"configure\", this).call(this);\n\n      if (!me.isHorizontal()) {\n        me._reversePixels = !me._reversePixels;\n      }\n    }\n  }, {\n    key: \"getPixelForValue\",\n    value: function getPixelForValue(value) {\n      var me = this;\n\n      if (typeof value !== 'number') {\n        value = me.parse(value);\n      }\n\n      return value === null ? NaN : me.getPixelForDecimal((value - me._startValue) / me._valueRange);\n    }\n  }, {\n    key: \"getPixelForTick\",\n    value: function getPixelForTick(index) {\n      var me = this;\n      var ticks = me.ticks;\n\n      if (index < 0 || index > ticks.length - 1) {\n        return null;\n      }\n\n      return me.getPixelForValue(ticks[index].value);\n    }\n  }, {\n    key: \"getValueForPixel\",\n    value: function getValueForPixel(pixel) {\n      var me = this;\n      return Math.round(me._startValue + me.getDecimalForPixel(pixel) * me._valueRange);\n    }\n  }, {\n    key: \"getBasePixel\",\n    value: function getBasePixel() {\n      return this.bottom;\n    }\n  }]);\n\n  return CategoryScale;\n}(Scale);\n\nCategoryScale.id = 'category';\nCategoryScale.defaults = {\n  ticks: {\n    callback: CategoryScale.prototype.getLabelForValue\n  }\n};\n\nfunction generateTicks$1(generationOptions, dataRange) {\n  var ticks = [];\n  var MIN_SPACING = 1e-14;\n  var bounds = generationOptions.bounds,\n      step = generationOptions.step,\n      min = generationOptions.min,\n      max = generationOptions.max,\n      precision = generationOptions.precision,\n      count = generationOptions.count,\n      maxTicks = generationOptions.maxTicks,\n      maxDigits = generationOptions.maxDigits,\n      includeBounds = generationOptions.includeBounds;\n  var unit = step || 1;\n  var maxSpaces = maxTicks - 1;\n  var rmin = dataRange.min,\n      rmax = dataRange.max;\n  var minDefined = !Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"j\"])(min);\n  var maxDefined = !Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"j\"])(max);\n  var countDefined = !Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"j\"])(count);\n  var minSpacing = (rmax - rmin) / (maxDigits + 1);\n  var spacing = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"aA\"])((rmax - rmin) / maxSpaces / unit) * unit;\n  var factor, niceMin, niceMax, numSpaces;\n\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{\n      value: rmin\n    }, {\n      value: rmax\n    }];\n  }\n\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n\n  if (numSpaces > maxSpaces) {\n    spacing = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"aA\"])(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n\n  if (!Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"j\"])(precision)) {\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n\n  if (minDefined && maxDefined && step && Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"aB\"])((max - min) / step, spacing / 1000)) {\n    numSpaces = Math.min((max - min) / spacing, maxTicks);\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    numSpaces = (niceMax - niceMin) / spacing;\n\n    if (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"aC\"])(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n\n  var decimalPlaces = Math.max(Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"aD\"])(spacing), Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"aD\"])(niceMin));\n  factor = Math.pow(10, Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"j\"])(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n  var j = 0;\n\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({\n        value: min\n      });\n\n      if (niceMin < min) {\n        j++;\n      }\n\n      if (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"aC\"])(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n\n  for (; j < numSpaces; ++j) {\n    ticks.push({\n      value: Math.round((niceMin + j * spacing) * factor) / factor\n    });\n  }\n\n  if (maxDefined && includeBounds && niceMax !== max) {\n    if (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"aC\"])(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({\n        value: max\n      });\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({\n      value: niceMax\n    });\n  }\n\n  return ticks;\n}\n\nfunction relativeLabelSize(value, minSpacing, _ref8) {\n  var horizontal = _ref8.horizontal,\n      minRotation = _ref8.minRotation;\n  var rad = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"t\"])(minRotation);\n  var ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  var length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\n\nvar LinearScaleBase = /*#__PURE__*/function (_Scale2) {\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(LinearScaleBase, _Scale2);\n\n  var _super20 = _createSuper(LinearScaleBase);\n\n  function LinearScaleBase(cfg) {\n    var _this15;\n\n    Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this, LinearScaleBase);\n\n    _this15 = _super20.call(this, cfg);\n    _this15.start = undefined;\n    _this15.end = undefined;\n    _this15._startValue = undefined;\n    _this15._endValue = undefined;\n    _this15._valueRange = 0;\n    return _this15;\n  }\n\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(LinearScaleBase, [{\n    key: \"parse\",\n    value: function parse(raw, index) {\n      if (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"j\"])(raw)) {\n        return null;\n      }\n\n      if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n        return null;\n      }\n\n      return +raw;\n    }\n  }, {\n    key: \"handleTickRangeOptions\",\n    value: function handleTickRangeOptions() {\n      var me = this;\n      var beginAtZero = me.options.beginAtZero;\n\n      var _me$getUserBounds3 = me.getUserBounds(),\n          minDefined = _me$getUserBounds3.minDefined,\n          maxDefined = _me$getUserBounds3.maxDefined;\n\n      var min = me.min,\n          max = me.max;\n\n      var setMin = function setMin(v) {\n        return min = minDefined ? min : v;\n      };\n\n      var setMax = function setMax(v) {\n        return max = maxDefined ? max : v;\n      };\n\n      if (beginAtZero) {\n        var minSign = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"s\"])(min);\n        var maxSign = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"s\"])(max);\n\n        if (minSign < 0 && maxSign < 0) {\n          setMax(0);\n        } else if (minSign > 0 && maxSign > 0) {\n          setMin(0);\n        }\n      }\n\n      if (min === max) {\n        setMax(max + 1);\n\n        if (!beginAtZero) {\n          setMin(min - 1);\n        }\n      }\n\n      me.min = min;\n      me.max = max;\n    }\n  }, {\n    key: \"getTickLimit\",\n    value: function getTickLimit() {\n      var me = this;\n      var tickOpts = me.options.ticks;\n      var maxTicksLimit = tickOpts.maxTicksLimit,\n          stepSize = tickOpts.stepSize;\n      var maxTicks;\n\n      if (stepSize) {\n        maxTicks = Math.ceil(me.max / stepSize) - Math.floor(me.min / stepSize) + 1;\n      } else {\n        maxTicks = me.computeTickLimit();\n        maxTicksLimit = maxTicksLimit || 11;\n      }\n\n      if (maxTicksLimit) {\n        maxTicks = Math.min(maxTicksLimit, maxTicks);\n      }\n\n      return maxTicks;\n    }\n  }, {\n    key: \"computeTickLimit\",\n    value: function computeTickLimit() {\n      return Number.POSITIVE_INFINITY;\n    }\n  }, {\n    key: \"buildTicks\",\n    value: function buildTicks() {\n      var me = this;\n      var opts = me.options;\n      var tickOpts = opts.ticks;\n      var maxTicks = me.getTickLimit();\n      maxTicks = Math.max(2, maxTicks);\n      var numericGeneratorOptions = {\n        maxTicks: maxTicks,\n        bounds: opts.bounds,\n        min: opts.min,\n        max: opts.max,\n        precision: tickOpts.precision,\n        step: tickOpts.stepSize,\n        count: tickOpts.count,\n        maxDigits: me._maxDigits(),\n        horizontal: me.isHorizontal(),\n        minRotation: tickOpts.minRotation || 0,\n        includeBounds: tickOpts.includeBounds !== false\n      };\n      var dataRange = me._range || me;\n      var ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n\n      if (opts.bounds === 'ticks') {\n        Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"az\"])(ticks, me, 'value');\n      }\n\n      if (opts.reverse) {\n        ticks.reverse();\n        me.start = me.max;\n        me.end = me.min;\n      } else {\n        me.start = me.min;\n        me.end = me.max;\n      }\n\n      return ticks;\n    }\n  }, {\n    key: \"configure\",\n    value: function configure() {\n      var me = this;\n      var ticks = me.ticks;\n      var start = me.min;\n      var end = me.max;\n\n      Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(LinearScaleBase.prototype), \"configure\", this).call(this);\n\n      if (me.options.offset && ticks.length) {\n        var offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n        start -= offset;\n        end += offset;\n      }\n\n      me._startValue = start;\n      me._endValue = end;\n      me._valueRange = end - start;\n    }\n  }, {\n    key: \"getLabelForValue\",\n    value: function getLabelForValue(value) {\n      return Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"p\"])(value, this.chart.options.locale);\n    }\n  }]);\n\n  return LinearScaleBase;\n}(Scale);\n\nvar LinearScale = /*#__PURE__*/function (_LinearScaleBase) {\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(LinearScale, _LinearScaleBase);\n\n  var _super21 = _createSuper(LinearScale);\n\n  function LinearScale() {\n    Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this, LinearScale);\n\n    return _super21.apply(this, arguments);\n  }\n\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(LinearScale, [{\n    key: \"determineDataLimits\",\n    value: function determineDataLimits() {\n      var me = this;\n\n      var _me$getMinMax2 = me.getMinMax(true),\n          min = _me$getMinMax2.min,\n          max = _me$getMinMax2.max;\n\n      me.min = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"g\"])(min) ? min : 0;\n      me.max = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"g\"])(max) ? max : 1;\n      me.handleTickRangeOptions();\n    }\n  }, {\n    key: \"computeTickLimit\",\n    value: function computeTickLimit() {\n      var me = this;\n      var horizontal = me.isHorizontal();\n      var length = horizontal ? me.width : me.height;\n      var minRotation = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"t\"])(me.options.ticks.minRotation);\n      var ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n\n      var tickFont = me._resolveTickFontOptions(0);\n\n      return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n    }\n  }, {\n    key: \"getPixelForValue\",\n    value: function getPixelForValue(value) {\n      return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n  }, {\n    key: \"getValueForPixel\",\n    value: function getValueForPixel(pixel) {\n      return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n    }\n  }]);\n\n  return LinearScale;\n}(LinearScaleBase);\n\nLinearScale.id = 'linear';\nLinearScale.defaults = {\n  ticks: {\n    callback: Ticks.formatters.numeric\n  }\n};\n\nfunction isMajor(tickVal) {\n  var remain = tickVal / Math.pow(10, Math.floor(Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"K\"])(tickVal)));\n  return remain === 1;\n}\n\nfunction generateTicks(generationOptions, dataRange) {\n  var endExp = Math.floor(Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"K\"])(dataRange.max));\n  var endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));\n  var ticks = [];\n  var tickVal = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"M\"])(generationOptions.min, Math.pow(10, Math.floor(Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"K\"])(dataRange.min))));\n  var exp = Math.floor(Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"K\"])(tickVal));\n  var significand = Math.floor(tickVal / Math.pow(10, exp));\n  var precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n\n  do {\n    ticks.push({\n      value: tickVal,\n      major: isMajor(tickVal)\n    });\n    ++significand;\n\n    if (significand === 10) {\n      significand = 1;\n      ++exp;\n      precision = exp >= 0 ? 1 : precision;\n    }\n\n    tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;\n  } while (exp < endExp || exp === endExp && significand < endSignificand);\n\n  var lastTick = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"M\"])(generationOptions.max, tickVal);\n  ticks.push({\n    value: lastTick,\n    major: isMajor(tickVal)\n  });\n  return ticks;\n}\n\nvar LogarithmicScale = /*#__PURE__*/function (_Scale3) {\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(LogarithmicScale, _Scale3);\n\n  var _super22 = _createSuper(LogarithmicScale);\n\n  function LogarithmicScale(cfg) {\n    var _this16;\n\n    Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this, LogarithmicScale);\n\n    _this16 = _super22.call(this, cfg);\n    _this16.start = undefined;\n    _this16.end = undefined;\n    _this16._startValue = undefined;\n    _this16._valueRange = 0;\n    return _this16;\n  }\n\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(LogarithmicScale, [{\n    key: \"parse\",\n    value: function parse(raw, index) {\n      var value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n\n      if (value === 0) {\n        this._zero = true;\n        return undefined;\n      }\n\n      return Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"g\"])(value) && value > 0 ? value : null;\n    }\n  }, {\n    key: \"determineDataLimits\",\n    value: function determineDataLimits() {\n      var me = this;\n\n      var _me$getMinMax3 = me.getMinMax(true),\n          min = _me$getMinMax3.min,\n          max = _me$getMinMax3.max;\n\n      me.min = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"g\"])(min) ? Math.max(0, min) : null;\n      me.max = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"g\"])(max) ? Math.max(0, max) : null;\n\n      if (me.options.beginAtZero) {\n        me._zero = true;\n      }\n\n      me.handleTickRangeOptions();\n    }\n  }, {\n    key: \"handleTickRangeOptions\",\n    value: function handleTickRangeOptions() {\n      var me = this;\n\n      var _me$getUserBounds4 = me.getUserBounds(),\n          minDefined = _me$getUserBounds4.minDefined,\n          maxDefined = _me$getUserBounds4.maxDefined;\n\n      var min = me.min;\n      var max = me.max;\n\n      var setMin = function setMin(v) {\n        return min = minDefined ? min : v;\n      };\n\n      var setMax = function setMax(v) {\n        return max = maxDefined ? max : v;\n      };\n\n      var exp = function exp(v, m) {\n        return Math.pow(10, Math.floor(Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"K\"])(v)) + m);\n      };\n\n      if (min === max) {\n        if (min <= 0) {\n          setMin(1);\n          setMax(10);\n        } else {\n          setMin(exp(min, -1));\n          setMax(exp(max, +1));\n        }\n      }\n\n      if (min <= 0) {\n        setMin(exp(max, -1));\n      }\n\n      if (max <= 0) {\n        setMax(exp(min, +1));\n      }\n\n      if (me._zero && me.min !== me._suggestedMin && min === exp(me.min, 0)) {\n        setMin(exp(min, -1));\n      }\n\n      me.min = min;\n      me.max = max;\n    }\n  }, {\n    key: \"buildTicks\",\n    value: function buildTicks() {\n      var me = this;\n      var opts = me.options;\n      var generationOptions = {\n        min: me._userMin,\n        max: me._userMax\n      };\n      var ticks = generateTicks(generationOptions, me);\n\n      if (opts.bounds === 'ticks') {\n        Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"az\"])(ticks, me, 'value');\n      }\n\n      if (opts.reverse) {\n        ticks.reverse();\n        me.start = me.max;\n        me.end = me.min;\n      } else {\n        me.start = me.min;\n        me.end = me.max;\n      }\n\n      return ticks;\n    }\n  }, {\n    key: \"getLabelForValue\",\n    value: function getLabelForValue(value) {\n      return value === undefined ? '0' : Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"p\"])(value, this.chart.options.locale);\n    }\n  }, {\n    key: \"configure\",\n    value: function configure() {\n      var me = this;\n      var start = me.min;\n\n      Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(LogarithmicScale.prototype), \"configure\", this).call(this);\n\n      me._startValue = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"K\"])(start);\n      me._valueRange = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"K\"])(me.max) - Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"K\"])(start);\n    }\n  }, {\n    key: \"getPixelForValue\",\n    value: function getPixelForValue(value) {\n      var me = this;\n\n      if (value === undefined || value === 0) {\n        value = me.min;\n      }\n\n      if (value === null || isNaN(value)) {\n        return NaN;\n      }\n\n      return me.getPixelForDecimal(value === me.min ? 0 : (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"K\"])(value) - me._startValue) / me._valueRange);\n    }\n  }, {\n    key: \"getValueForPixel\",\n    value: function getValueForPixel(pixel) {\n      var me = this;\n      var decimal = me.getDecimalForPixel(pixel);\n      return Math.pow(10, me._startValue + decimal * me._valueRange);\n    }\n  }]);\n\n  return LogarithmicScale;\n}(Scale);\n\nLogarithmicScale.id = 'logarithmic';\nLogarithmicScale.defaults = {\n  ticks: {\n    callback: Ticks.formatters.logarithmic,\n    major: {\n      enabled: true\n    }\n  }\n};\n\nfunction getTickBackdropHeight(opts) {\n  var tickOpts = opts.ticks;\n\n  if (tickOpts.display && opts.display) {\n    var padding = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"C\"])(tickOpts.backdropPadding);\n    return Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"v\"])(tickOpts.font && tickOpts.font.size, _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"d\"].font.size) + padding.height;\n  }\n\n  return 0;\n}\n\nfunction measureLabelSize(ctx, lineHeight, label) {\n  if (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"b\"])(label)) {\n    return {\n      w: Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"aE\"])(ctx, ctx.font, label),\n      h: label.length * lineHeight\n    };\n  }\n\n  return {\n    w: ctx.measureText(label).width,\n    h: lineHeight\n  };\n}\n\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - size / 2,\n      end: pos + size / 2\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\n\nfunction fitWithPointLabels(scale) {\n  var furthestLimits = {\n    l: 0,\n    r: scale.width,\n    t: 0,\n    b: scale.height - scale.paddingTop\n  };\n  var furthestAngles = {};\n  var i, textSize, pointPosition;\n  var labelSizes = [];\n  var padding = [];\n  var valueCount = scale.getLabels().length;\n\n  for (i = 0; i < valueCount; i++) {\n    var _opts = scale.options.pointLabels.setContext(scale.getContext(i));\n\n    padding[i] = _opts.padding;\n    pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i]);\n    var plFont = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"W\"])(_opts.font);\n    scale.ctx.font = plFont.string;\n    textSize = measureLabelSize(scale.ctx, plFont.lineHeight, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n    var angleRadians = scale.getIndexAngle(i);\n    var angle = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"Q\"])(angleRadians);\n    var hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    var vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n\n    if (hLimits.start < furthestLimits.l) {\n      furthestLimits.l = hLimits.start;\n      furthestAngles.l = angleRadians;\n    }\n\n    if (hLimits.end > furthestLimits.r) {\n      furthestLimits.r = hLimits.end;\n      furthestAngles.r = angleRadians;\n    }\n\n    if (vLimits.start < furthestLimits.t) {\n      furthestLimits.t = vLimits.start;\n      furthestAngles.t = angleRadians;\n    }\n\n    if (vLimits.end > furthestLimits.b) {\n      furthestLimits.b = vLimits.end;\n      furthestAngles.b = angleRadians;\n    }\n  }\n\n  scale._setReductions(scale.drawingArea, furthestLimits, furthestAngles);\n\n  scale._pointLabelItems = [];\n  var opts = scale.options;\n  var tickBackdropHeight = getTickBackdropHeight(opts);\n  var outerDistance = scale.getDistanceFromCenterForValue(opts.ticks.reverse ? scale.min : scale.max);\n\n  for (i = 0; i < valueCount; i++) {\n    var extra = i === 0 ? tickBackdropHeight / 2 : 0;\n    var pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + padding[i]);\n\n    var _angle = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"Q\"])(scale.getIndexAngle(i));\n\n    var size = labelSizes[i];\n    adjustPointPositionForLabelHeight(_angle, size, pointLabelPosition);\n    var textAlign = getTextAlignForAngle(_angle);\n    var left = void 0;\n\n    if (textAlign === 'left') {\n      left = pointLabelPosition.x;\n    } else if (textAlign === 'center') {\n      left = pointLabelPosition.x - size.w / 2;\n    } else {\n      left = pointLabelPosition.x - size.w;\n    }\n\n    var right = left + size.w;\n    scale._pointLabelItems[i] = {\n      x: pointLabelPosition.x,\n      y: pointLabelPosition.y,\n      textAlign: textAlign,\n      left: left,\n      top: pointLabelPosition.y,\n      right: right,\n      bottom: pointLabelPosition.y + size.h\n    };\n  }\n}\n\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n\n  return 'right';\n}\n\nfunction adjustPointPositionForLabelHeight(angle, textSize, position) {\n  if (angle === 90 || angle === 270) {\n    position.y -= textSize.h / 2;\n  } else if (angle > 270 || angle < 90) {\n    position.y -= textSize.h;\n  }\n}\n\nfunction drawPointLabels(scale, labelCount) {\n  var ctx = scale.ctx,\n      pointLabels = scale.options.pointLabels;\n\n  for (var i = labelCount - 1; i >= 0; i--) {\n    var optsAtIndex = pointLabels.setContext(scale.getContext(i));\n    var plFont = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"W\"])(optsAtIndex.font);\n    var _scale$_pointLabelIte = scale._pointLabelItems[i],\n        x = _scale$_pointLabelIte.x,\n        y = _scale$_pointLabelIte.y,\n        textAlign = _scale$_pointLabelIte.textAlign,\n        left = _scale$_pointLabelIte.left,\n        top = _scale$_pointLabelIte.top,\n        right = _scale$_pointLabelIte.right,\n        bottom = _scale$_pointLabelIte.bottom;\n    var backdropColor = optsAtIndex.backdropColor;\n\n    if (!Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"j\"])(backdropColor)) {\n      var padding = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"C\"])(optsAtIndex.backdropPadding);\n      ctx.fillStyle = backdropColor;\n      ctx.fillRect(left - padding.left, top - padding.top, right - left + padding.width, bottom - top + padding.height);\n    }\n\n    Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"V\"])(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n      color: optsAtIndex.color,\n      textAlign: textAlign,\n      textBaseline: 'middle'\n    });\n  }\n}\n\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  var ctx = scale.ctx;\n\n  if (circular) {\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"T\"]);\n  } else {\n    var pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n\n    for (var i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\n\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount) {\n  var ctx = scale.ctx;\n  var circular = gridLineOpts.circular;\n  var color = gridLineOpts.color,\n      lineWidth = gridLineOpts.lineWidth;\n\n  if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n    return;\n  }\n\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(gridLineOpts.borderDash);\n  ctx.lineDashOffset = gridLineOpts.borderDashOffset;\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\n\nfunction numberOrZero(param) {\n  return Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"w\"])(param) ? param : 0;\n}\n\nvar RadialLinearScale = /*#__PURE__*/function (_LinearScaleBase2) {\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(RadialLinearScale, _LinearScaleBase2);\n\n  var _super23 = _createSuper(RadialLinearScale);\n\n  function RadialLinearScale(cfg) {\n    var _this17;\n\n    Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this, RadialLinearScale);\n\n    _this17 = _super23.call(this, cfg);\n    _this17.xCenter = undefined;\n    _this17.yCenter = undefined;\n    _this17.drawingArea = undefined;\n    _this17._pointLabels = [];\n    _this17._pointLabelItems = [];\n    return _this17;\n  }\n\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(RadialLinearScale, [{\n    key: \"setDimensions\",\n    value: function setDimensions() {\n      var me = this;\n      me.width = me.maxWidth;\n      me.height = me.maxHeight;\n      me.paddingTop = getTickBackdropHeight(me.options) / 2;\n      me.xCenter = Math.floor(me.width / 2);\n      me.yCenter = Math.floor((me.height - me.paddingTop) / 2);\n      me.drawingArea = Math.min(me.height - me.paddingTop, me.width) / 2;\n    }\n  }, {\n    key: \"determineDataLimits\",\n    value: function determineDataLimits() {\n      var me = this;\n\n      var _me$getMinMax4 = me.getMinMax(false),\n          min = _me$getMinMax4.min,\n          max = _me$getMinMax4.max;\n\n      me.min = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"g\"])(min) && !isNaN(min) ? min : 0;\n      me.max = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"g\"])(max) && !isNaN(max) ? max : 0;\n      me.handleTickRangeOptions();\n    }\n  }, {\n    key: \"computeTickLimit\",\n    value: function computeTickLimit() {\n      return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n    }\n  }, {\n    key: \"generateTickLabels\",\n    value: function generateTickLabels(ticks) {\n      var me = this;\n      LinearScaleBase.prototype.generateTickLabels.call(me, ticks);\n      me._pointLabels = me.getLabels().map(function (value, index) {\n        var label = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"N\"])(me.options.pointLabels.callback, [value, index], me);\n        return label || label === 0 ? label : '';\n      });\n    }\n  }, {\n    key: \"fit\",\n    value: function fit() {\n      var me = this;\n      var opts = me.options;\n\n      if (opts.display && opts.pointLabels.display) {\n        fitWithPointLabels(me);\n      } else {\n        me.setCenterPoint(0, 0, 0, 0);\n      }\n    }\n  }, {\n    key: \"_setReductions\",\n    value: function _setReductions(largestPossibleRadius, furthestLimits, furthestAngles) {\n      var me = this;\n      var radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);\n      var radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);\n      var radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);\n      var radiusReductionBottom = -Math.max(furthestLimits.b - (me.height - me.paddingTop), 0) / Math.cos(furthestAngles.b);\n      radiusReductionLeft = numberOrZero(radiusReductionLeft);\n      radiusReductionRight = numberOrZero(radiusReductionRight);\n      radiusReductionTop = numberOrZero(radiusReductionTop);\n      radiusReductionBottom = numberOrZero(radiusReductionBottom);\n      me.drawingArea = Math.max(largestPossibleRadius / 2, Math.min(Math.floor(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2), Math.floor(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2)));\n      me.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);\n    }\n  }, {\n    key: \"setCenterPoint\",\n    value: function setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n      var me = this;\n      var maxRight = me.width - rightMovement - me.drawingArea;\n      var maxLeft = leftMovement + me.drawingArea;\n      var maxTop = topMovement + me.drawingArea;\n      var maxBottom = me.height - me.paddingTop - bottomMovement - me.drawingArea;\n      me.xCenter = Math.floor((maxLeft + maxRight) / 2 + me.left);\n      me.yCenter = Math.floor((maxTop + maxBottom) / 2 + me.top + me.paddingTop);\n    }\n  }, {\n    key: \"getIndexAngle\",\n    value: function getIndexAngle(index) {\n      var angleMultiplier = _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"T\"] / this.getLabels().length;\n      var startAngle = this.options.startAngle || 0;\n      return Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"as\"])(index * angleMultiplier + Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"t\"])(startAngle));\n    }\n  }, {\n    key: \"getDistanceFromCenterForValue\",\n    value: function getDistanceFromCenterForValue(value) {\n      var me = this;\n\n      if (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"j\"])(value)) {\n        return NaN;\n      }\n\n      var scalingFactor = me.drawingArea / (me.max - me.min);\n\n      if (me.options.reverse) {\n        return (me.max - value) * scalingFactor;\n      }\n\n      return (value - me.min) * scalingFactor;\n    }\n  }, {\n    key: \"getValueForDistanceFromCenter\",\n    value: function getValueForDistanceFromCenter(distance) {\n      if (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"j\"])(distance)) {\n        return NaN;\n      }\n\n      var me = this;\n      var scaledDistance = distance / (me.drawingArea / (me.max - me.min));\n      return me.options.reverse ? me.max - scaledDistance : me.min + scaledDistance;\n    }\n  }, {\n    key: \"getPointPosition\",\n    value: function getPointPosition(index, distanceFromCenter) {\n      var me = this;\n      var angle = me.getIndexAngle(index) - _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"H\"];\n      return {\n        x: Math.cos(angle) * distanceFromCenter + me.xCenter,\n        y: Math.sin(angle) * distanceFromCenter + me.yCenter,\n        angle: angle\n      };\n    }\n  }, {\n    key: \"getPointPositionForValue\",\n    value: function getPointPositionForValue(index, value) {\n      return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n    }\n  }, {\n    key: \"getBasePosition\",\n    value: function getBasePosition(index) {\n      return this.getPointPositionForValue(index || 0, this.getBaseValue());\n    }\n  }, {\n    key: \"getPointLabelPosition\",\n    value: function getPointLabelPosition(index) {\n      var _this$_pointLabelItem = this._pointLabelItems[index],\n          left = _this$_pointLabelItem.left,\n          top = _this$_pointLabelItem.top,\n          right = _this$_pointLabelItem.right,\n          bottom = _this$_pointLabelItem.bottom;\n      return {\n        left: left,\n        top: top,\n        right: right,\n        bottom: bottom\n      };\n    }\n  }, {\n    key: \"drawBackground\",\n    value: function drawBackground() {\n      var me = this;\n      var _me$options7 = me.options,\n          backgroundColor = _me$options7.backgroundColor,\n          circular = _me$options7.grid.circular;\n\n      if (backgroundColor) {\n        var ctx = me.ctx;\n        ctx.save();\n        ctx.beginPath();\n        pathRadiusLine(me, me.getDistanceFromCenterForValue(me._endValue), circular, me.getLabels().length);\n        ctx.closePath();\n        ctx.fillStyle = backgroundColor;\n        ctx.fill();\n        ctx.restore();\n      }\n    }\n  }, {\n    key: \"drawGrid\",\n    value: function drawGrid() {\n      var me = this;\n      var ctx = me.ctx;\n      var opts = me.options;\n      var angleLines = opts.angleLines,\n          grid = opts.grid;\n      var labelCount = me.getLabels().length;\n      var i, offset, position;\n\n      if (opts.pointLabels.display) {\n        drawPointLabels(me, labelCount);\n      }\n\n      if (grid.display) {\n        me.ticks.forEach(function (tick, index) {\n          if (index !== 0) {\n            offset = me.getDistanceFromCenterForValue(tick.value);\n            var optsAtIndex = grid.setContext(me.getContext(index - 1));\n            drawRadiusLine(me, optsAtIndex, offset, labelCount);\n          }\n        });\n      }\n\n      if (angleLines.display) {\n        ctx.save();\n\n        for (i = me.getLabels().length - 1; i >= 0; i--) {\n          var optsAtIndex = angleLines.setContext(me.getContext(i));\n          var color = optsAtIndex.color,\n              lineWidth = optsAtIndex.lineWidth;\n\n          if (!lineWidth || !color) {\n            continue;\n          }\n\n          ctx.lineWidth = lineWidth;\n          ctx.strokeStyle = color;\n          ctx.setLineDash(optsAtIndex.borderDash);\n          ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n          offset = me.getDistanceFromCenterForValue(opts.ticks.reverse ? me.min : me.max);\n          position = me.getPointPosition(i, offset);\n          ctx.beginPath();\n          ctx.moveTo(me.xCenter, me.yCenter);\n          ctx.lineTo(position.x, position.y);\n          ctx.stroke();\n        }\n\n        ctx.restore();\n      }\n    }\n  }, {\n    key: \"drawBorder\",\n    value: function drawBorder() {}\n  }, {\n    key: \"drawLabels\",\n    value: function drawLabels() {\n      var me = this;\n      var ctx = me.ctx;\n      var opts = me.options;\n      var tickOpts = opts.ticks;\n\n      if (!tickOpts.display) {\n        return;\n      }\n\n      var startAngle = me.getIndexAngle(0);\n      var offset, width;\n      ctx.save();\n      ctx.translate(me.xCenter, me.yCenter);\n      ctx.rotate(startAngle);\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      me.ticks.forEach(function (tick, index) {\n        if (index === 0 && !opts.reverse) {\n          return;\n        }\n\n        var optsAtIndex = tickOpts.setContext(me.getContext(index));\n        var tickFont = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"W\"])(optsAtIndex.font);\n        offset = me.getDistanceFromCenterForValue(me.ticks[index].value);\n\n        if (optsAtIndex.showLabelBackdrop) {\n          width = ctx.measureText(tick.label).width;\n          ctx.fillStyle = optsAtIndex.backdropColor;\n          var padding = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"C\"])(optsAtIndex.backdropPadding);\n          ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n        }\n\n        Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"V\"])(ctx, tick.label, 0, -offset, tickFont, {\n          color: optsAtIndex.color\n        });\n      });\n      ctx.restore();\n    }\n  }, {\n    key: \"drawTitle\",\n    value: function drawTitle() {}\n  }]);\n\n  return RadialLinearScale;\n}(LinearScaleBase);\n\nRadialLinearScale.id = 'radialLinear';\nRadialLinearScale.defaults = {\n  display: true,\n  animate: true,\n  position: 'chartArea',\n  angleLines: {\n    display: true,\n    lineWidth: 1,\n    borderDash: [],\n    borderDashOffset: 0.0\n  },\n  grid: {\n    circular: false\n  },\n  startAngle: 0,\n  ticks: {\n    showLabelBackdrop: true,\n    callback: Ticks.formatters.numeric\n  },\n  pointLabels: {\n    backdropColor: undefined,\n    backdropPadding: 2,\n    display: true,\n    font: {\n      size: 10\n    },\n    callback: function callback(label) {\n      return label;\n    },\n    padding: 5\n  }\n};\nRadialLinearScale.defaultRoutes = {\n  'angleLines.color': 'borderColor',\n  'pointLabels.color': 'color',\n  'ticks.color': 'color'\n};\nRadialLinearScale.descriptors = {\n  angleLines: {\n    _fallback: 'grid'\n  }\n};\nvar INTERVALS = {\n  millisecond: {\n    common: true,\n    size: 1,\n    steps: 1000\n  },\n  second: {\n    common: true,\n    size: 1000,\n    steps: 60\n  },\n  minute: {\n    common: true,\n    size: 60000,\n    steps: 60\n  },\n  hour: {\n    common: true,\n    size: 3600000,\n    steps: 24\n  },\n  day: {\n    common: true,\n    size: 86400000,\n    steps: 30\n  },\n  week: {\n    common: false,\n    size: 604800000,\n    steps: 4\n  },\n  month: {\n    common: true,\n    size: 2.628e9,\n    steps: 12\n  },\n  quarter: {\n    common: false,\n    size: 7.884e9,\n    steps: 4\n  },\n  year: {\n    common: true,\n    size: 3.154e10\n  }\n};\nvar UNITS = Object.keys(INTERVALS);\n_c = UNITS;\n\nfunction sorter(a, b) {\n  return a - b;\n}\n\nfunction _parse(scale, input) {\n  if (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"j\"])(input)) {\n    return null;\n  }\n\n  var adapter = scale._adapter;\n  var _scale$_parseOpts = scale._parseOpts,\n      parser = _scale$_parseOpts.parser,\n      round = _scale$_parseOpts.round,\n      isoWeekday = _scale$_parseOpts.isoWeekday;\n  var value = input;\n\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n\n  if (!Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"g\"])(value)) {\n    value = typeof parser === 'string' ? adapter.parse(value, parser) : adapter.parse(value);\n  }\n\n  if (value === null) {\n    return null;\n  }\n\n  if (round) {\n    value = round === 'week' && (Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"w\"])(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n  }\n\n  return +value;\n}\n\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  var ilen = UNITS.length;\n\n  for (var i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    var interval = INTERVALS[UNITS[i]];\n    var factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n\n  return UNITS[ilen - 1];\n}\n\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (var i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    var unit = UNITS[i];\n\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n\nfunction determineMajorUnit(unit) {\n  for (var i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\n\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    var _lookup2 = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"aG\"])(timestamps, time),\n        lo = _lookup2.lo,\n        hi = _lookup2.hi;\n\n    var timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\n\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  var adapter = scale._adapter;\n  var first = +adapter.startOf(ticks[0].value, majorUnit);\n  var last = ticks[ticks.length - 1].value;\n  var major, index;\n\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n\n  return ticks;\n}\n\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  var ticks = [];\n  var map = {};\n  var ilen = values.length;\n  var i, value;\n\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n    ticks.push({\n      value: value,\n      major: false\n    });\n  }\n\n  return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\n\nvar TimeScale = /*#__PURE__*/function (_Scale4) {\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(TimeScale, _Scale4);\n\n  var _super24 = _createSuper(TimeScale);\n\n  function TimeScale(props) {\n    var _this18;\n\n    Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this, TimeScale);\n\n    _this18 = _super24.call(this, props);\n    _this18._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n    _this18._unit = 'day';\n    _this18._majorUnit = undefined;\n    _this18._offsets = {};\n    _this18._normalized = false;\n    _this18._parseOpts = undefined;\n    return _this18;\n  }\n\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(TimeScale, [{\n    key: \"init\",\n    value: function init(scaleOpts, opts) {\n      var time = scaleOpts.time || (scaleOpts.time = {});\n      var adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n      Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"a6\"])(time.displayFormats, adapter.formats());\n      this._parseOpts = {\n        parser: time.parser,\n        round: time.round,\n        isoWeekday: time.isoWeekday\n      };\n\n      Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(TimeScale.prototype), \"init\", this).call(this, scaleOpts);\n\n      this._normalized = opts.normalized;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(raw, index) {\n      if (raw === undefined) {\n        return null;\n      }\n\n      return _parse(this, raw);\n    }\n  }, {\n    key: \"beforeLayout\",\n    value: function beforeLayout() {\n      Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(TimeScale.prototype), \"beforeLayout\", this).call(this);\n\n      this._cache = {\n        data: [],\n        labels: [],\n        all: []\n      };\n    }\n  }, {\n    key: \"determineDataLimits\",\n    value: function determineDataLimits() {\n      var me = this;\n      var options = me.options;\n      var adapter = me._adapter;\n      var unit = options.time.unit || 'day';\n\n      var _me$getUserBounds5 = me.getUserBounds(),\n          min = _me$getUserBounds5.min,\n          max = _me$getUserBounds5.max,\n          minDefined = _me$getUserBounds5.minDefined,\n          maxDefined = _me$getUserBounds5.maxDefined;\n\n      function _applyBounds(bounds) {\n        if (!minDefined && !isNaN(bounds.min)) {\n          min = Math.min(min, bounds.min);\n        }\n\n        if (!maxDefined && !isNaN(bounds.max)) {\n          max = Math.max(max, bounds.max);\n        }\n      }\n\n      if (!minDefined || !maxDefined) {\n        _applyBounds(me._getLabelBounds());\n\n        if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n          _applyBounds(me.getMinMax(false));\n        }\n      }\n\n      min = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"g\"])(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n      max = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"g\"])(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n      me.min = Math.min(min, max - 1);\n      me.max = Math.max(min + 1, max);\n    }\n  }, {\n    key: \"_getLabelBounds\",\n    value: function _getLabelBounds() {\n      var arr = this.getLabelTimestamps();\n      var min = Number.POSITIVE_INFINITY;\n      var max = Number.NEGATIVE_INFINITY;\n\n      if (arr.length) {\n        min = arr[0];\n        max = arr[arr.length - 1];\n      }\n\n      return {\n        min: min,\n        max: max\n      };\n    }\n  }, {\n    key: \"buildTicks\",\n    value: function buildTicks() {\n      var me = this;\n      var options = me.options;\n      var timeOpts = options.time;\n      var tickOpts = options.ticks;\n      var timestamps = tickOpts.source === 'labels' ? me.getLabelTimestamps() : me._generate();\n\n      if (options.bounds === 'ticks' && timestamps.length) {\n        me.min = me._userMin || timestamps[0];\n        me.max = me._userMax || timestamps[timestamps.length - 1];\n      }\n\n      var min = me.min;\n      var max = me.max;\n\n      var ticks = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"aF\"])(timestamps, min, max);\n\n      me._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, me.min, me.max, me._getLabelCapacity(min)) : determineUnitForFormatting(me, ticks.length, timeOpts.minUnit, me.min, me.max));\n      me._majorUnit = !tickOpts.major.enabled || me._unit === 'year' ? undefined : determineMajorUnit(me._unit);\n      me.initOffsets(timestamps);\n\n      if (options.reverse) {\n        ticks.reverse();\n      }\n\n      return ticksFromTimestamps(me, ticks, me._majorUnit);\n    }\n  }, {\n    key: \"initOffsets\",\n    value: function initOffsets(timestamps) {\n      var me = this;\n      var start = 0;\n      var end = 0;\n      var first, last;\n\n      if (me.options.offset && timestamps.length) {\n        first = me.getDecimalForValue(timestamps[0]);\n\n        if (timestamps.length === 1) {\n          start = 1 - first;\n        } else {\n          start = (me.getDecimalForValue(timestamps[1]) - first) / 2;\n        }\n\n        last = me.getDecimalForValue(timestamps[timestamps.length - 1]);\n\n        if (timestamps.length === 1) {\n          end = last;\n        } else {\n          end = (last - me.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n        }\n      }\n\n      var limit = timestamps.length < 3 ? 0.5 : 0.25;\n      start = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"x\"])(start, 0, limit);\n      end = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"x\"])(end, 0, limit);\n      me._offsets = {\n        start: start,\n        end: end,\n        factor: 1 / (start + 1 + end)\n      };\n    }\n  }, {\n    key: \"_generate\",\n    value: function _generate() {\n      var me = this;\n      var adapter = me._adapter;\n      var min = me.min;\n      var max = me.max;\n      var options = me.options;\n      var timeOpts = options.time;\n      var minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, me._getLabelCapacity(min));\n      var stepSize = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"v\"])(timeOpts.stepSize, 1);\n      var weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n      var hasWeekday = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"w\"])(weekday) || weekday === true;\n      var ticks = {};\n      var first = min;\n      var time, count;\n\n      if (hasWeekday) {\n        first = +adapter.startOf(first, 'isoWeek', weekday);\n      }\n\n      first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n\n      if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n        throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n      }\n\n      var timestamps = options.ticks.source === 'data' && me.getDataTimestamps();\n\n      for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n        addTick(ticks, time, timestamps);\n      }\n\n      if (time === max || options.bounds === 'ticks' || count === 1) {\n        addTick(ticks, time, timestamps);\n      }\n\n      return Object.keys(ticks).sort(function (a, b) {\n        return a - b;\n      }).map(function (x) {\n        return +x;\n      });\n    }\n  }, {\n    key: \"getLabelForValue\",\n    value: function getLabelForValue(value) {\n      var me = this;\n      var adapter = me._adapter;\n      var timeOpts = me.options.time;\n\n      if (timeOpts.tooltipFormat) {\n        return adapter.format(value, timeOpts.tooltipFormat);\n      }\n\n      return adapter.format(value, timeOpts.displayFormats.datetime);\n    }\n  }, {\n    key: \"_tickFormatFunction\",\n    value: function _tickFormatFunction(time, index, ticks, format) {\n      var me = this;\n      var options = me.options;\n      var formats = options.time.displayFormats;\n      var unit = me._unit;\n      var majorUnit = me._majorUnit;\n      var minorFormat = unit && formats[unit];\n      var majorFormat = majorUnit && formats[majorUnit];\n      var tick = ticks[index];\n      var major = majorUnit && majorFormat && tick && tick.major;\n\n      var label = me._adapter.format(time, format || (major ? majorFormat : minorFormat));\n\n      var formatter = options.ticks.callback;\n      return formatter ? Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"N\"])(formatter, [label, index, ticks], me) : label;\n    }\n  }, {\n    key: \"generateTickLabels\",\n    value: function generateTickLabels(ticks) {\n      var i, ilen, tick;\n\n      for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n        tick = ticks[i];\n        tick.label = this._tickFormatFunction(tick.value, i, ticks);\n      }\n    }\n  }, {\n    key: \"getDecimalForValue\",\n    value: function getDecimalForValue(value) {\n      var me = this;\n      return value === null ? NaN : (value - me.min) / (me.max - me.min);\n    }\n  }, {\n    key: \"getPixelForValue\",\n    value: function getPixelForValue(value) {\n      var me = this;\n      var offsets = me._offsets;\n      var pos = me.getDecimalForValue(value);\n      return me.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n    }\n  }, {\n    key: \"getValueForPixel\",\n    value: function getValueForPixel(pixel) {\n      var me = this;\n      var offsets = me._offsets;\n      var pos = me.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n      return me.min + pos * (me.max - me.min);\n    }\n  }, {\n    key: \"_getLabelSize\",\n    value: function _getLabelSize(label) {\n      var me = this;\n      var ticksOpts = me.options.ticks;\n      var tickLabelWidth = me.ctx.measureText(label).width;\n      var angle = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"t\"])(me.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n      var cosRotation = Math.cos(angle);\n      var sinRotation = Math.sin(angle);\n\n      var tickFontSize = me._resolveTickFontOptions(0).size;\n\n      return {\n        w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n        h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n      };\n    }\n  }, {\n    key: \"_getLabelCapacity\",\n    value: function _getLabelCapacity(exampleTime) {\n      var me = this;\n      var timeOpts = me.options.time;\n      var displayFormats = timeOpts.displayFormats;\n      var format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n\n      var exampleLabel = me._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(me, [exampleTime], me._majorUnit), format);\n\n      var size = me._getLabelSize(exampleLabel);\n\n      var capacity = Math.floor(me.isHorizontal() ? me.width / size.w : me.height / size.h) - 1;\n      return capacity > 0 ? capacity : 1;\n    }\n  }, {\n    key: \"getDataTimestamps\",\n    value: function getDataTimestamps() {\n      var me = this;\n      var timestamps = me._cache.data || [];\n      var i, ilen;\n\n      if (timestamps.length) {\n        return timestamps;\n      }\n\n      var metas = me.getMatchingVisibleMetas();\n\n      if (me._normalized && metas.length) {\n        return me._cache.data = metas[0].controller.getAllParsedValues(me);\n      }\n\n      for (i = 0, ilen = metas.length; i < ilen; ++i) {\n        timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(me));\n      }\n\n      return me._cache.data = me.normalize(timestamps);\n    }\n  }, {\n    key: \"getLabelTimestamps\",\n    value: function getLabelTimestamps() {\n      var me = this;\n      var timestamps = me._cache.labels || [];\n      var i, ilen;\n\n      if (timestamps.length) {\n        return timestamps;\n      }\n\n      var labels = me.getLabels();\n\n      for (i = 0, ilen = labels.length; i < ilen; ++i) {\n        timestamps.push(_parse(me, labels[i]));\n      }\n\n      return me._cache.labels = me._normalized ? timestamps : me.normalize(timestamps);\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize(values) {\n      return Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"_\"])(values.sort(sorter));\n    }\n  }]);\n\n  return TimeScale;\n}(Scale);\n\nTimeScale.id = 'time';\nTimeScale.defaults = {\n  bounds: 'data',\n  adapters: {},\n  time: {\n    parser: false,\n    unit: false,\n    round: false,\n    isoWeekday: false,\n    minUnit: 'millisecond',\n    displayFormats: {}\n  },\n  ticks: {\n    source: 'auto',\n    major: {\n      enabled: false\n    }\n  }\n};\n\nfunction interpolate(table, val, reverse) {\n  var prevSource, nextSource, prevTarget, nextTarget;\n\n  if (reverse) {\n    prevSource = Math.floor(val);\n    nextSource = Math.ceil(val);\n    prevTarget = table[prevSource];\n    nextTarget = table[nextSource];\n  } else {\n    var result = Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"aG\"])(table, val);\n\n    prevTarget = result.lo;\n    nextTarget = result.hi;\n    prevSource = table[prevTarget];\n    nextSource = table[nextTarget];\n  }\n\n  var span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\n\nvar TimeSeriesScale = /*#__PURE__*/function (_TimeScale) {\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(TimeSeriesScale, _TimeScale);\n\n  var _super25 = _createSuper(TimeSeriesScale);\n\n  function TimeSeriesScale(props) {\n    var _this19;\n\n    Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this, TimeSeriesScale);\n\n    _this19 = _super25.call(this, props);\n    _this19._table = [];\n    _this19._maxIndex = undefined;\n    return _this19;\n  }\n\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(TimeSeriesScale, [{\n    key: \"initOffsets\",\n    value: function initOffsets() {\n      var me = this;\n\n      var timestamps = me._getTimestampsForTable();\n\n      me._table = me.buildLookupTable(timestamps);\n      me._maxIndex = me._table.length - 1;\n\n      Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(TimeSeriesScale.prototype), \"initOffsets\", this).call(this, timestamps);\n    }\n  }, {\n    key: \"buildLookupTable\",\n    value: function buildLookupTable(timestamps) {\n      var me = this;\n      var min = me.min,\n          max = me.max;\n\n      if (!timestamps.length) {\n        return [{\n          time: min,\n          pos: 0\n        }, {\n          time: max,\n          pos: 1\n        }];\n      }\n\n      var items = [min];\n      var i, ilen, curr;\n\n      for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n        curr = timestamps[i];\n\n        if (curr > min && curr < max) {\n          items.push(curr);\n        }\n      }\n\n      items.push(max);\n      return items;\n    }\n  }, {\n    key: \"_getTimestampsForTable\",\n    value: function _getTimestampsForTable() {\n      var me = this;\n      var timestamps = me._cache.all || [];\n\n      if (timestamps.length) {\n        return timestamps;\n      }\n\n      var data = me.getDataTimestamps();\n      var label = me.getLabelTimestamps();\n\n      if (data.length && label.length) {\n        timestamps = me.normalize(data.concat(label));\n      } else {\n        timestamps = data.length ? data : label;\n      }\n\n      timestamps = me._cache.all = timestamps;\n      return timestamps;\n    }\n  }, {\n    key: \"getPixelForValue\",\n    value: function getPixelForValue(value, index) {\n      var me = this;\n      var offsets = me._offsets;\n      var pos = me._normalized && me._maxIndex > 0 && !Object(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_10__[\"j\"])(index) ? index / me._maxIndex : me.getDecimalForValue(value);\n      return me.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n    }\n  }, {\n    key: \"getDecimalForValue\",\n    value: function getDecimalForValue(value) {\n      return interpolate(this._table, value) / this._maxIndex;\n    }\n  }, {\n    key: \"getValueForPixel\",\n    value: function getValueForPixel(pixel) {\n      var me = this;\n      var offsets = me._offsets;\n      var decimal = me.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n      return interpolate(me._table, decimal * this._maxIndex, true);\n    }\n  }]);\n\n  return TimeSeriesScale;\n}(TimeScale);\n\nTimeSeriesScale.id = 'timeseries';\nTimeSeriesScale.defaults = TimeScale.defaults;\nvar scales = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  CategoryScale: CategoryScale,\n  LinearScale: LinearScale,\n  LogarithmicScale: LogarithmicScale,\n  RadialLinearScale: RadialLinearScale,\n  TimeScale: TimeScale,\n  TimeSeriesScale: TimeSeriesScale\n});\nvar registerables = [controllers, elements, plugins, scales];\n\n\nvar _c;\n\n$RefreshReg$(_c, \"UNITS\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/chart.js/dist/chart.esm.js\n");

/***/ }),

/***/ "./node_modules/chart.js/dist/chunks/helpers.segment.js":
/*!**************************************************************!*\
  !*** ./node_modules/chart.js/dist/chunks/helpers.segment.js ***!
  \**************************************************************/
/*! exports provided: $, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, _, a, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, aA, aB, aC, aD, aE, aF, aG, aH, aI, aJ, aK, aL, aM, aN, aO, aP, aQ, aR, aS, aT, aU, aV, aW, aX, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"$\", function() { return merge; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"A\", function() { return _isPointInArea; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"B\", function() { return _rlookupByKey; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"C\", function() { return toPadding; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"D\", function() { return each; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"E\", function() { return getMaximumSize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"F\", function() { return _getParentNode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"G\", function() { return readUsedSize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"H\", function() { return HALF_PI; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"I\", function() { return throttled; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"J\", function() { return supportsEventListenerOptions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"K\", function() { return log10; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"L\", function() { return _factorize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"M\", function() { return finiteOrDefault; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"N\", function() { return callback; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"O\", function() { return _addGrace; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"P\", function() { return PI; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Q\", function() { return toDegrees; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"R\", function() { return _measureText; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"S\", function() { return _int16Range; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"T\", function() { return TAU; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"U\", function() { return _alignPixel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"V\", function() { return renderText; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"W\", function() { return toFont; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"X\", function() { return _toLeftRightCenter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Y\", function() { return _alignStartEnd; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Z\", function() { return overrides; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"_\", function() { return _arrayUnique; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return resolve; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a0\", function() { return _capitalize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a1\", function() { return descriptors; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a2\", function() { return isFunction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a3\", function() { return _attachContext; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a4\", function() { return _createResolver; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a5\", function() { return _descriptors; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a6\", function() { return mergeIf; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a7\", function() { return uid; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a8\", function() { return debounce; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a9\", function() { return retinaScale; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"aA\", function() { return niceNum; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"aB\", function() { return almostWhole; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"aC\", function() { return almostEquals; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"aD\", function() { return _decimalPlaces; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"aE\", function() { return _longestText; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"aF\", function() { return _filterBetween; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"aG\", function() { return _lookup; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"aH\", function() { return getHoverColor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"aI\", function() { return clone$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"aJ\", function() { return _merger; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"aK\", function() { return _mergerIf; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"aL\", function() { return _deprecated; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"aM\", function() { return toFontString; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"aN\", function() { return splineCurve; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"aO\", function() { return splineCurveMonotone; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"aP\", function() { return getStyle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"aQ\", function() { return fontString; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"aR\", function() { return toLineHeight; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"aS\", function() { return PITAU; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"aT\", function() { return INFINITY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"aU\", function() { return RAD_PER_DEG; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"aV\", function() { return QUARTER_PI; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"aW\", function() { return TWO_THIRDS_PI; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"aX\", function() { return _angleDiff; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"aa\", function() { return clearCanvas; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ab\", function() { return setsEqual; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ac\", function() { return _elementsEqual; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ad\", function() { return getAngleFromPoint; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ae\", function() { return _readValueToProps; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"af\", function() { return _updateBezierControlPoints; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ag\", function() { return _computeSegments; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ah\", function() { return _boundSegments; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ai\", function() { return _steppedInterpolation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"aj\", function() { return _bezierInterpolation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ak\", function() { return _pointInLine; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"al\", function() { return _steppedLineTo; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"am\", function() { return _bezierCurveTo; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"an\", function() { return drawPoint; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ao\", function() { return addRoundedRectPath; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ap\", function() { return toTRBL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"aq\", function() { return toTRBLCorners; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ar\", function() { return _boundSegment; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"as\", function() { return _normalizeAngle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"at\", function() { return getRtlAdapter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"au\", function() { return overrideTextDirection; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"av\", function() { return _textX; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"aw\", function() { return restoreTextDirection; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ax\", function() { return noop; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ay\", function() { return distanceBetweenPoints; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"az\", function() { return _setMinAndMaxByKey; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return isArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return color; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return defaults; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return effects; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return resolveObjectKey; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return isNumberFinite; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return defined; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return isObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"j\", function() { return isNullOrUndef; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"k\", function() { return clipArea; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"l\", function() { return listenArrayEvents; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"m\", function() { return unclipArea; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"n\", function() { return toPercentage; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"o\", function() { return toDimension; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"p\", function() { return formatNumber; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"q\", function() { return _angleBetween; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"r\", function() { return requestAnimFrame; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"s\", function() { return sign; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"t\", function() { return toRadians; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"u\", function() { return unlistenArrayEvents; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"v\", function() { return valueOrDefault; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"w\", function() { return isNumber; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"x\", function() { return _limitValue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"y\", function() { return _lookupByKey; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"z\", function() { return getRelativePosition; });\n/* harmony import */ var _Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray */ \"./node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\");\n/* harmony import */ var _Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty */ \"./node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck */ \"./node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass */ \"./node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass.js\");\n\n\n\n\n\nvar _s = $RefreshSig$();\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/*!\n * Chart.js v3.3.2\n * https://www.chartjs.org\n * (c) 2021 Chart.js Contributors\n * Released under the MIT License\n */\nfunction fontString(pixelSize, fontStyle, fontFamily) {\n  return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\n}\n\nvar requestAnimFrame = function () {\n  if (false) {}\n\n  return window.requestAnimationFrame;\n}();\n\nfunction throttled(fn, thisArg, updateFn) {\n  var updateArgs = updateFn || function (args) {\n    return Array.prototype.slice.call(args);\n  };\n\n  var ticking = false;\n  var args = [];\n  return function () {\n    for (var _len = arguments.length, rest = new Array(_len), _key = 0; _key < _len; _key++) {\n      rest[_key] = arguments[_key];\n    }\n\n    args = updateArgs(rest);\n\n    if (!ticking) {\n      ticking = true;\n      requestAnimFrame.call(window, function () {\n        ticking = false;\n        fn.apply(thisArg, args);\n      });\n    }\n  };\n}\n\nfunction debounce(fn, delay) {\n  var timeout;\n  return function () {\n    if (delay) {\n      clearTimeout(timeout);\n      timeout = setTimeout(fn, delay);\n    } else {\n      fn();\n    }\n\n    return delay;\n  };\n}\n\nvar _toLeftRightCenter = function _toLeftRightCenter(align) {\n  return align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';\n};\n\nvar _alignStartEnd = function _alignStartEnd(align, start, end) {\n  return align === 'start' ? start : align === 'end' ? end : (start + end) / 2;\n};\n\nvar _textX = function _textX(align, left, right) {\n  return align === 'right' ? right : align === 'center' ? (left + right) / 2 : left;\n};\n\nfunction noop() {}\n\nvar uid = function () {\n  var id = 0;\n  return function () {\n    return id++;\n  };\n}();\n\nfunction isNullOrUndef(value) {\n  return value === null || typeof value === 'undefined';\n}\n\nfunction isArray(value) {\n  if (Array.isArray && Array.isArray(value)) {\n    return true;\n  }\n\n  var type = Object.prototype.toString.call(value);\n\n  if (type.substr(0, 7) === '[object' && type.substr(-6) === 'Array]') {\n    return true;\n  }\n\n  return false;\n}\n\nfunction isObject(value) {\n  return value !== null && Object.prototype.toString.call(value) === '[object Object]';\n}\n\nvar isNumberFinite = function isNumberFinite(value) {\n  return (typeof value === 'number' || value instanceof Number) && isFinite(+value);\n};\n\nfunction finiteOrDefault(value, defaultValue) {\n  return isNumberFinite(value) ? value : defaultValue;\n}\n\nfunction valueOrDefault(value, defaultValue) {\n  return typeof value === 'undefined' ? defaultValue : value;\n}\n\nvar toPercentage = function toPercentage(value, dimension) {\n  return typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 : value / dimension;\n};\n\nvar toDimension = function toDimension(value, dimension) {\n  return typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 * dimension : +value;\n};\n\nfunction callback(fn, args, thisArg) {\n  if (fn && typeof fn.call === 'function') {\n    return fn.apply(thisArg, args);\n  }\n}\n\nfunction each(loopable, fn, thisArg, reverse) {\n  var i, len, keys;\n\n  if (isArray(loopable)) {\n    len = loopable.length;\n\n    if (reverse) {\n      for (i = len - 1; i >= 0; i--) {\n        fn.call(thisArg, loopable[i], i);\n      }\n    } else {\n      for (i = 0; i < len; i++) {\n        fn.call(thisArg, loopable[i], i);\n      }\n    }\n  } else if (isObject(loopable)) {\n    keys = Object.keys(loopable);\n    len = keys.length;\n\n    for (i = 0; i < len; i++) {\n      fn.call(thisArg, loopable[keys[i]], keys[i]);\n    }\n  }\n}\n\nfunction _elementsEqual(a0, a1) {\n  var i, ilen, v0, v1;\n\n  if (!a0 || !a1 || a0.length !== a1.length) {\n    return false;\n  }\n\n  for (i = 0, ilen = a0.length; i < ilen; ++i) {\n    v0 = a0[i];\n    v1 = a1[i];\n\n    if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction clone$1(source) {\n  if (isArray(source)) {\n    return source.map(clone$1);\n  }\n\n  if (isObject(source)) {\n    var target = Object.create(null);\n    var keys = Object.keys(source);\n    var klen = keys.length;\n    var k = 0;\n\n    for (; k < klen; ++k) {\n      target[keys[k]] = clone$1(source[keys[k]]);\n    }\n\n    return target;\n  }\n\n  return source;\n}\n\nfunction isValidKey(key) {\n  return ['__proto__', 'prototype', 'constructor'].indexOf(key) === -1;\n}\n\nfunction _merger(key, target, source, options) {\n  if (!isValidKey(key)) {\n    return;\n  }\n\n  var tval = target[key];\n  var sval = source[key];\n\n  if (isObject(tval) && isObject(sval)) {\n    merge(tval, sval, options);\n  } else {\n    target[key] = clone$1(sval);\n  }\n}\n\nfunction merge(target, source, options) {\n  var sources = isArray(source) ? source : [source];\n  var ilen = sources.length;\n\n  if (!isObject(target)) {\n    return target;\n  }\n\n  options = options || {};\n  var merger = options.merger || _merger;\n\n  for (var i = 0; i < ilen; ++i) {\n    source = sources[i];\n\n    if (!isObject(source)) {\n      continue;\n    }\n\n    var keys = Object.keys(source);\n\n    for (var k = 0, klen = keys.length; k < klen; ++k) {\n      merger(keys[k], target, source, options);\n    }\n  }\n\n  return target;\n}\n\nfunction mergeIf(target, source) {\n  return merge(target, source, {\n    merger: _mergerIf\n  });\n}\n\nfunction _mergerIf(key, target, source) {\n  if (!isValidKey(key)) {\n    return;\n  }\n\n  var tval = target[key];\n  var sval = source[key];\n\n  if (isObject(tval) && isObject(sval)) {\n    mergeIf(tval, sval);\n  } else if (!Object.prototype.hasOwnProperty.call(target, key)) {\n    target[key] = clone$1(sval);\n  }\n}\n\nfunction _deprecated(scope, value, previous, current) {\n  if (value !== undefined) {\n    console.warn(scope + ': \"' + previous + '\" is deprecated. Please use \"' + current + '\" instead');\n  }\n}\n\nvar emptyString = '';\nvar dot = '.';\n\nfunction indexOfDotOrLength(key, start) {\n  var idx = key.indexOf(dot, start);\n  return idx === -1 ? key.length : idx;\n}\n\nfunction resolveObjectKey(obj, key) {\n  if (key === emptyString) {\n    return obj;\n  }\n\n  var pos = 0;\n  var idx = indexOfDotOrLength(key, pos);\n\n  while (obj && idx > pos) {\n    obj = obj[key.substr(pos, idx - pos)];\n    pos = idx + 1;\n    idx = indexOfDotOrLength(key, pos);\n  }\n\n  return obj;\n}\n\nfunction _capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nvar defined = function defined(value) {\n  return typeof value !== 'undefined';\n};\n\nvar isFunction = function isFunction(value) {\n  return typeof value === 'function';\n};\n\nvar setsEqual = function setsEqual(a, b) {\n  if (a.size !== b.size) {\n    return false;\n  }\n\n  var _iterator = _createForOfIteratorHelper(a),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var item = _step.value;\n\n      if (!b.has(item)) {\n        return false;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return true;\n};\n\nvar PI = Math.PI;\nvar TAU = 2 * PI;\nvar PITAU = TAU + PI;\nvar INFINITY = Number.POSITIVE_INFINITY;\nvar RAD_PER_DEG = PI / 180;\nvar HALF_PI = PI / 2;\nvar QUARTER_PI = PI / 4;\nvar TWO_THIRDS_PI = PI * 2 / 3;\nvar log10 = Math.log10;\nvar sign = Math.sign;\n\nfunction niceNum(range) {\n  var niceRange = Math.pow(10, Math.floor(log10(range)));\n  var fraction = range / niceRange;\n  var niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;\n  return niceFraction * niceRange;\n}\n\nfunction _factorize(value) {\n  var result = [];\n  var sqrt = Math.sqrt(value);\n  var i;\n\n  for (i = 1; i < sqrt; i++) {\n    if (value % i === 0) {\n      result.push(i);\n      result.push(value / i);\n    }\n  }\n\n  if (sqrt === (sqrt | 0)) {\n    result.push(sqrt);\n  }\n\n  result.sort(function (a, b) {\n    return a - b;\n  }).pop();\n  return result;\n}\n\nfunction isNumber(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}\n\nfunction almostEquals(x, y, epsilon) {\n  return Math.abs(x - y) < epsilon;\n}\n\nfunction almostWhole(x, epsilon) {\n  var rounded = Math.round(x);\n  return rounded - epsilon <= x && rounded + epsilon >= x;\n}\n\nfunction _setMinAndMaxByKey(array, target, property) {\n  var i, ilen, value;\n\n  for (i = 0, ilen = array.length; i < ilen; i++) {\n    value = array[i][property];\n\n    if (!isNaN(value)) {\n      target.min = Math.min(target.min, value);\n      target.max = Math.max(target.max, value);\n    }\n  }\n}\n\nfunction toRadians(degrees) {\n  return degrees * (PI / 180);\n}\n\nfunction toDegrees(radians) {\n  return radians * (180 / PI);\n}\n\nfunction _decimalPlaces(x) {\n  if (!isNumberFinite(x)) {\n    return;\n  }\n\n  var e = 1;\n  var p = 0;\n\n  while (Math.round(x * e) / e !== x) {\n    e *= 10;\n    p++;\n  }\n\n  return p;\n}\n\nfunction getAngleFromPoint(centrePoint, anglePoint) {\n  var distanceFromXCenter = anglePoint.x - centrePoint.x;\n  var distanceFromYCenter = anglePoint.y - centrePoint.y;\n  var radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n  var angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\n\n  if (angle < -0.5 * PI) {\n    angle += TAU;\n  }\n\n  return {\n    angle: angle,\n    distance: radialDistanceFromCenter\n  };\n}\n\nfunction distanceBetweenPoints(pt1, pt2) {\n  return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n}\n\nfunction _angleDiff(a, b) {\n  return (a - b + PITAU) % TAU - PI;\n}\n\nfunction _normalizeAngle(a) {\n  return (a % TAU + TAU) % TAU;\n}\n\nfunction _angleBetween(angle, start, end, sameAngleIsFullCircle) {\n  var a = _normalizeAngle(angle);\n\n  var s = _normalizeAngle(start);\n\n  var e = _normalizeAngle(end);\n\n  var angleToStart = _normalizeAngle(s - a);\n\n  var angleToEnd = _normalizeAngle(e - a);\n\n  var startToAngle = _normalizeAngle(a - s);\n\n  var endToAngle = _normalizeAngle(a - e);\n\n  return a === s || a === e || sameAngleIsFullCircle && s === e || angleToStart > angleToEnd && startToAngle < endToAngle;\n}\n\nfunction _limitValue(value, min, max) {\n  return Math.max(min, Math.min(max, value));\n}\n\nfunction _int16Range(value) {\n  return _limitValue(value, -32768, 32767);\n}\n\nvar atEdge = function atEdge(t) {\n  return t === 0 || t === 1;\n};\n\nvar elasticIn = function elasticIn(t, s, p) {\n  return -(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));\n};\n\nvar elasticOut = function elasticOut(t, s, p) {\n  return Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;\n};\n\nvar effects = {\n  linear: function linear(t) {\n    return t;\n  },\n  easeInQuad: function easeInQuad(t) {\n    return t * t;\n  },\n  easeOutQuad: function easeOutQuad(t) {\n    return -t * (t - 2);\n  },\n  easeInOutQuad: function easeInOutQuad(t) {\n    return (t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1);\n  },\n  easeInCubic: function easeInCubic(t) {\n    return t * t * t;\n  },\n  easeOutCubic: function easeOutCubic(t) {\n    return (t -= 1) * t * t + 1;\n  },\n  easeInOutCubic: function easeInOutCubic(t) {\n    return (t /= 0.5) < 1 ? 0.5 * t * t * t : 0.5 * ((t -= 2) * t * t + 2);\n  },\n  easeInQuart: function easeInQuart(t) {\n    return t * t * t * t;\n  },\n  easeOutQuart: function easeOutQuart(t) {\n    return -((t -= 1) * t * t * t - 1);\n  },\n  easeInOutQuart: function easeInOutQuart(t) {\n    return (t /= 0.5) < 1 ? 0.5 * t * t * t * t : -0.5 * ((t -= 2) * t * t * t - 2);\n  },\n  easeInQuint: function easeInQuint(t) {\n    return t * t * t * t * t;\n  },\n  easeOutQuint: function easeOutQuint(t) {\n    return (t -= 1) * t * t * t * t + 1;\n  },\n  easeInOutQuint: function easeInOutQuint(t) {\n    return (t /= 0.5) < 1 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2) * t * t * t * t + 2);\n  },\n  easeInSine: function easeInSine(t) {\n    return -Math.cos(t * HALF_PI) + 1;\n  },\n  easeOutSine: function easeOutSine(t) {\n    return Math.sin(t * HALF_PI);\n  },\n  easeInOutSine: function easeInOutSine(t) {\n    return -0.5 * (Math.cos(PI * t) - 1);\n  },\n  easeInExpo: function easeInExpo(t) {\n    return t === 0 ? 0 : Math.pow(2, 10 * (t - 1));\n  },\n  easeOutExpo: function easeOutExpo(t) {\n    return t === 1 ? 1 : -Math.pow(2, -10 * t) + 1;\n  },\n  easeInOutExpo: function easeInOutExpo(t) {\n    return atEdge(t) ? t : t < 0.5 ? 0.5 * Math.pow(2, 10 * (t * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2);\n  },\n  easeInCirc: function easeInCirc(t) {\n    return t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1);\n  },\n  easeOutCirc: function easeOutCirc(t) {\n    return Math.sqrt(1 - (t -= 1) * t);\n  },\n  easeInOutCirc: function easeInOutCirc(t) {\n    return (t /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t * t) - 1) : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);\n  },\n  easeInElastic: function easeInElastic(t) {\n    return atEdge(t) ? t : elasticIn(t, 0.075, 0.3);\n  },\n  easeOutElastic: function easeOutElastic(t) {\n    return atEdge(t) ? t : elasticOut(t, 0.075, 0.3);\n  },\n  easeInOutElastic: function easeInOutElastic(t) {\n    var s = 0.1125;\n    var p = 0.45;\n    return atEdge(t) ? t : t < 0.5 ? 0.5 * elasticIn(t * 2, s, p) : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);\n  },\n  easeInBack: function easeInBack(t) {\n    var s = 1.70158;\n    return t * t * ((s + 1) * t - s);\n  },\n  easeOutBack: function easeOutBack(t) {\n    var s = 1.70158;\n    return (t -= 1) * t * ((s + 1) * t + s) + 1;\n  },\n  easeInOutBack: function easeInOutBack(t) {\n    var s = 1.70158;\n\n    if ((t /= 0.5) < 1) {\n      return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));\n    }\n\n    return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);\n  },\n  easeInBounce: function easeInBounce(t) {\n    return 1 - effects.easeOutBounce(1 - t);\n  },\n  easeOutBounce: function easeOutBounce(t) {\n    var m = 7.5625;\n    var d = 2.75;\n\n    if (t < 1 / d) {\n      return m * t * t;\n    }\n\n    if (t < 2 / d) {\n      return m * (t -= 1.5 / d) * t + 0.75;\n    }\n\n    if (t < 2.5 / d) {\n      return m * (t -= 2.25 / d) * t + 0.9375;\n    }\n\n    return m * (t -= 2.625 / d) * t + 0.984375;\n  },\n  easeInOutBounce: function easeInOutBounce(t) {\n    return t < 0.5 ? effects.easeInBounce(t * 2) * 0.5 : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5;\n  }\n};\n/*!\n * @kurkle/color v0.1.9\n * https://github.com/kurkle/color#readme\n * (c) 2020 Jukka Kurkela\n * Released under the MIT License\n */\n\nvar map = {\n  0: 0,\n  1: 1,\n  2: 2,\n  3: 3,\n  4: 4,\n  5: 5,\n  6: 6,\n  7: 7,\n  8: 8,\n  9: 9,\n  A: 10,\n  B: 11,\n  C: 12,\n  D: 13,\n  E: 14,\n  F: 15,\n  a: 10,\n  b: 11,\n  c: 12,\n  d: 13,\n  e: 14,\n  f: 15\n};\nvar hex = '0123456789ABCDEF';\n\nvar h1 = function h1(b) {\n  return hex[b & 0xF];\n};\n\nvar h2 = function h2(b) {\n  return hex[(b & 0xF0) >> 4] + hex[b & 0xF];\n};\n\nvar eq = function eq(b) {\n  return (b & 0xF0) >> 4 === (b & 0xF);\n};\n\nfunction isShort(v) {\n  return eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);\n}\n\nfunction hexParse(str) {\n  var len = str.length;\n  var ret;\n\n  if (str[0] === '#') {\n    if (len === 4 || len === 5) {\n      ret = {\n        r: 255 & map[str[1]] * 17,\n        g: 255 & map[str[2]] * 17,\n        b: 255 & map[str[3]] * 17,\n        a: len === 5 ? map[str[4]] * 17 : 255\n      };\n    } else if (len === 7 || len === 9) {\n      ret = {\n        r: map[str[1]] << 4 | map[str[2]],\n        g: map[str[3]] << 4 | map[str[4]],\n        b: map[str[5]] << 4 | map[str[6]],\n        a: len === 9 ? map[str[7]] << 4 | map[str[8]] : 255\n      };\n    }\n  }\n\n  return ret;\n}\n\nfunction _hexString(v) {\n  var f = isShort(v) ? h1 : h2;\n  return v ? '#' + f(v.r) + f(v.g) + f(v.b) + (v.a < 255 ? f(v.a) : '') : v;\n}\n\nfunction round(v) {\n  return v + 0.5 | 0;\n}\n\nvar lim = function lim(v, l, h) {\n  return Math.max(Math.min(v, h), l);\n};\n\nfunction p2b(v) {\n  return lim(round(v * 2.55), 0, 255);\n}\n\nfunction n2b(v) {\n  return lim(round(v * 255), 0, 255);\n}\n\nfunction b2n(v) {\n  return lim(round(v / 2.55) / 100, 0, 1);\n}\n\nfunction n2p(v) {\n  return lim(round(v * 100), 0, 100);\n}\n\nvar RGB_RE = /^rgba?\\(\\s*([-+.\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?(?:[\\s,/]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\n\nfunction rgbParse(str) {\n  var m = RGB_RE.exec(str);\n  var a = 255;\n  var r, g, b;\n\n  if (!m) {\n    return;\n  }\n\n  if (m[7] !== r) {\n    var v = +m[7];\n    a = 255 & (m[8] ? p2b(v) : v * 255);\n  }\n\n  r = +m[1];\n  g = +m[3];\n  b = +m[5];\n  r = 255 & (m[2] ? p2b(r) : r);\n  g = 255 & (m[4] ? p2b(g) : g);\n  b = 255 & (m[6] ? p2b(b) : b);\n  return {\n    r: r,\n    g: g,\n    b: b,\n    a: a\n  };\n}\n\nfunction _rgbString(v) {\n  return v && (v.a < 255 ? \"rgba(\".concat(v.r, \", \").concat(v.g, \", \").concat(v.b, \", \").concat(b2n(v.a), \")\") : \"rgb(\".concat(v.r, \", \").concat(v.g, \", \").concat(v.b, \")\"));\n}\n\nvar HUE_RE = /^(hsla?|hwb|hsv)\\(\\s*([-+.e\\d]+)(?:deg)?[\\s,]+([-+.e\\d]+)%[\\s,]+([-+.e\\d]+)%(?:[\\s,]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\n\nfunction hsl2rgbn(h, s, l) {\n  var a = s * Math.min(l, 1 - l);\n\n  var f = function f(n) {\n    var k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (n + h / 30) % 12;\n    return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  };\n\n  return [f(0), f(8), f(4)];\n}\n\nfunction hsv2rgbn(h, s, v) {\n  var f = function f(n) {\n    var k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (n + h / 60) % 6;\n    return v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n  };\n\n  return [f(5), f(3), f(1)];\n}\n\nfunction hwb2rgbn(h, w, b) {\n  var rgb = hsl2rgbn(h, 1, 0.5);\n  var i;\n\n  if (w + b > 1) {\n    i = 1 / (w + b);\n    w *= i;\n    b *= i;\n  }\n\n  for (i = 0; i < 3; i++) {\n    rgb[i] *= 1 - w - b;\n    rgb[i] += w;\n  }\n\n  return rgb;\n}\n\nfunction rgb2hsl(v) {\n  var range = 255;\n  var r = v.r / range;\n  var g = v.g / range;\n  var b = v.b / range;\n  var max = Math.max(r, g, b);\n  var min = Math.min(r, g, b);\n  var l = (max + min) / 2;\n  var h, s, d;\n\n  if (max !== min) {\n    d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;\n    h = h * 60 + 0.5;\n  }\n\n  return [h | 0, s || 0, l];\n}\n\nfunction calln(f, a, b, c) {\n  return (Array.isArray(a) ? f(a[0], a[1], a[2]) : f(a, b, c)).map(n2b);\n}\n\nfunction hsl2rgb(h, s, l) {\n  return calln(hsl2rgbn, h, s, l);\n}\n\nfunction hwb2rgb(h, w, b) {\n  return calln(hwb2rgbn, h, w, b);\n}\n\nfunction hsv2rgb(h, s, v) {\n  return calln(hsv2rgbn, h, s, v);\n}\n\nfunction hue(h) {\n  return (h % 360 + 360) % 360;\n}\n\nfunction hueParse(str) {\n  var m = HUE_RE.exec(str);\n  var a = 255;\n  var v;\n\n  if (!m) {\n    return;\n  }\n\n  if (m[5] !== v) {\n    a = m[6] ? p2b(+m[5]) : n2b(+m[5]);\n  }\n\n  var h = hue(+m[2]);\n  var p1 = +m[3] / 100;\n  var p2 = +m[4] / 100;\n\n  if (m[1] === 'hwb') {\n    v = hwb2rgb(h, p1, p2);\n  } else if (m[1] === 'hsv') {\n    v = hsv2rgb(h, p1, p2);\n  } else {\n    v = hsl2rgb(h, p1, p2);\n  }\n\n  return {\n    r: v[0],\n    g: v[1],\n    b: v[2],\n    a: a\n  };\n}\n\nfunction _rotate(v, deg) {\n  var h = rgb2hsl(v);\n  h[0] = hue(h[0] + deg);\n  h = hsl2rgb(h);\n  v.r = h[0];\n  v.g = h[1];\n  v.b = h[2];\n}\n\nfunction _hslString(v) {\n  if (!v) {\n    return;\n  }\n\n  var a = rgb2hsl(v);\n  var h = a[0];\n  var s = n2p(a[1]);\n  var l = n2p(a[2]);\n  return v.a < 255 ? \"hsla(\".concat(h, \", \").concat(s, \"%, \").concat(l, \"%, \").concat(b2n(v.a), \")\") : \"hsl(\".concat(h, \", \").concat(s, \"%, \").concat(l, \"%)\");\n}\n\nvar map$1 = {\n  x: 'dark',\n  Z: 'light',\n  Y: 're',\n  X: 'blu',\n  W: 'gr',\n  V: 'medium',\n  U: 'slate',\n  A: 'ee',\n  T: 'ol',\n  S: 'or',\n  B: 'ra',\n  C: 'lateg',\n  D: 'ights',\n  R: 'in',\n  Q: 'turquois',\n  E: 'hi',\n  P: 'ro',\n  O: 'al',\n  N: 'le',\n  M: 'de',\n  L: 'yello',\n  F: 'en',\n  K: 'ch',\n  G: 'arks',\n  H: 'ea',\n  I: 'ightg',\n  J: 'wh'\n};\nvar names = {\n  OiceXe: 'f0f8ff',\n  antiquewEte: 'faebd7',\n  aqua: 'ffff',\n  aquamarRe: '7fffd4',\n  azuY: 'f0ffff',\n  beige: 'f5f5dc',\n  bisque: 'ffe4c4',\n  black: '0',\n  blanKedOmond: 'ffebcd',\n  Xe: 'ff',\n  XeviTet: '8a2be2',\n  bPwn: 'a52a2a',\n  burlywood: 'deb887',\n  caMtXe: '5f9ea0',\n  KartYuse: '7fff00',\n  KocTate: 'd2691e',\n  cSO: 'ff7f50',\n  cSnflowerXe: '6495ed',\n  cSnsilk: 'fff8dc',\n  crimson: 'dc143c',\n  cyan: 'ffff',\n  xXe: '8b',\n  xcyan: '8b8b',\n  xgTMnPd: 'b8860b',\n  xWay: 'a9a9a9',\n  xgYF: '6400',\n  xgYy: 'a9a9a9',\n  xkhaki: 'bdb76b',\n  xmagFta: '8b008b',\n  xTivegYF: '556b2f',\n  xSange: 'ff8c00',\n  xScEd: '9932cc',\n  xYd: '8b0000',\n  xsOmon: 'e9967a',\n  xsHgYF: '8fbc8f',\n  xUXe: '483d8b',\n  xUWay: '2f4f4f',\n  xUgYy: '2f4f4f',\n  xQe: 'ced1',\n  xviTet: '9400d3',\n  dAppRk: 'ff1493',\n  dApskyXe: 'bfff',\n  dimWay: '696969',\n  dimgYy: '696969',\n  dodgerXe: '1e90ff',\n  fiYbrick: 'b22222',\n  flSOwEte: 'fffaf0',\n  foYstWAn: '228b22',\n  fuKsia: 'ff00ff',\n  gaRsbSo: 'dcdcdc',\n  ghostwEte: 'f8f8ff',\n  gTd: 'ffd700',\n  gTMnPd: 'daa520',\n  Way: '808080',\n  gYF: '8000',\n  gYFLw: 'adff2f',\n  gYy: '808080',\n  honeyMw: 'f0fff0',\n  hotpRk: 'ff69b4',\n  RdianYd: 'cd5c5c',\n  Rdigo: '4b0082',\n  ivSy: 'fffff0',\n  khaki: 'f0e68c',\n  lavFMr: 'e6e6fa',\n  lavFMrXsh: 'fff0f5',\n  lawngYF: '7cfc00',\n  NmoncEffon: 'fffacd',\n  ZXe: 'add8e6',\n  ZcSO: 'f08080',\n  Zcyan: 'e0ffff',\n  ZgTMnPdLw: 'fafad2',\n  ZWay: 'd3d3d3',\n  ZgYF: '90ee90',\n  ZgYy: 'd3d3d3',\n  ZpRk: 'ffb6c1',\n  ZsOmon: 'ffa07a',\n  ZsHgYF: '20b2aa',\n  ZskyXe: '87cefa',\n  ZUWay: '778899',\n  ZUgYy: '778899',\n  ZstAlXe: 'b0c4de',\n  ZLw: 'ffffe0',\n  lime: 'ff00',\n  limegYF: '32cd32',\n  lRF: 'faf0e6',\n  magFta: 'ff00ff',\n  maPon: '800000',\n  VaquamarRe: '66cdaa',\n  VXe: 'cd',\n  VScEd: 'ba55d3',\n  VpurpN: '9370db',\n  VsHgYF: '3cb371',\n  VUXe: '7b68ee',\n  VsprRggYF: 'fa9a',\n  VQe: '48d1cc',\n  VviTetYd: 'c71585',\n  midnightXe: '191970',\n  mRtcYam: 'f5fffa',\n  mistyPse: 'ffe4e1',\n  moccasR: 'ffe4b5',\n  navajowEte: 'ffdead',\n  navy: '80',\n  Tdlace: 'fdf5e6',\n  Tive: '808000',\n  TivedBb: '6b8e23',\n  Sange: 'ffa500',\n  SangeYd: 'ff4500',\n  ScEd: 'da70d6',\n  pOegTMnPd: 'eee8aa',\n  pOegYF: '98fb98',\n  pOeQe: 'afeeee',\n  pOeviTetYd: 'db7093',\n  papayawEp: 'ffefd5',\n  pHKpuff: 'ffdab9',\n  peru: 'cd853f',\n  pRk: 'ffc0cb',\n  plum: 'dda0dd',\n  powMrXe: 'b0e0e6',\n  purpN: '800080',\n  YbeccapurpN: '663399',\n  Yd: 'ff0000',\n  Psybrown: 'bc8f8f',\n  PyOXe: '4169e1',\n  saddNbPwn: '8b4513',\n  sOmon: 'fa8072',\n  sandybPwn: 'f4a460',\n  sHgYF: '2e8b57',\n  sHshell: 'fff5ee',\n  siFna: 'a0522d',\n  silver: 'c0c0c0',\n  skyXe: '87ceeb',\n  UXe: '6a5acd',\n  UWay: '708090',\n  UgYy: '708090',\n  snow: 'fffafa',\n  sprRggYF: 'ff7f',\n  stAlXe: '4682b4',\n  tan: 'd2b48c',\n  teO: '8080',\n  tEstN: 'd8bfd8',\n  tomato: 'ff6347',\n  Qe: '40e0d0',\n  viTet: 'ee82ee',\n  JHt: 'f5deb3',\n  wEte: 'ffffff',\n  wEtesmoke: 'f5f5f5',\n  Lw: 'ffff00',\n  LwgYF: '9acd32'\n};\n\nfunction unpack() {\n  var unpacked = {};\n  var keys = Object.keys(names);\n  var tkeys = Object.keys(map$1);\n  var i, j, k, ok, nk;\n\n  for (i = 0; i < keys.length; i++) {\n    ok = nk = keys[i];\n\n    for (j = 0; j < tkeys.length; j++) {\n      k = tkeys[j];\n      nk = nk.replace(k, map$1[k]);\n    }\n\n    k = parseInt(names[ok], 16);\n    unpacked[nk] = [k >> 16 & 0xFF, k >> 8 & 0xFF, k & 0xFF];\n  }\n\n  return unpacked;\n}\n\nvar names$1;\n\nfunction nameParse(str) {\n  if (!names$1) {\n    names$1 = unpack();\n    names$1.transparent = [0, 0, 0, 0];\n  }\n\n  var a = names$1[str.toLowerCase()];\n  return a && {\n    r: a[0],\n    g: a[1],\n    b: a[2],\n    a: a.length === 4 ? a[3] : 255\n  };\n}\n\nfunction modHSL(v, i, ratio) {\n  if (v) {\n    var tmp = rgb2hsl(v);\n    tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));\n    tmp = hsl2rgb(tmp);\n    v.r = tmp[0];\n    v.g = tmp[1];\n    v.b = tmp[2];\n  }\n}\n\nfunction clone(v, proto) {\n  return v ? Object.assign(proto || {}, v) : v;\n}\n\nfunction fromObject(input) {\n  var v = {\n    r: 0,\n    g: 0,\n    b: 0,\n    a: 255\n  };\n\n  if (Array.isArray(input)) {\n    if (input.length >= 3) {\n      v = {\n        r: input[0],\n        g: input[1],\n        b: input[2],\n        a: 255\n      };\n\n      if (input.length > 3) {\n        v.a = n2b(input[3]);\n      }\n    }\n  } else {\n    v = clone(input, {\n      r: 0,\n      g: 0,\n      b: 0,\n      a: 1\n    });\n    v.a = n2b(v.a);\n  }\n\n  return v;\n}\n\nfunction functionParse(str) {\n  if (str.charAt(0) === 'r') {\n    return rgbParse(str);\n  }\n\n  return hueParse(str);\n}\n\nvar Color = /*#__PURE__*/function () {\n  function Color(input) {\n    Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, Color);\n\n    if (input instanceof Color) {\n      return input;\n    }\n\n    var type = typeof input;\n    var v;\n\n    if (type === 'object') {\n      v = fromObject(input);\n    } else if (type === 'string') {\n      v = hexParse(input) || nameParse(input) || functionParse(input);\n    }\n\n    this._rgb = v;\n    this._valid = !!v;\n  }\n\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(Color, [{\n    key: \"rgbString\",\n    value: function rgbString() {\n      return this._valid ? _rgbString(this._rgb) : this._rgb;\n    }\n  }, {\n    key: \"hexString\",\n    value: function hexString() {\n      return this._valid ? _hexString(this._rgb) : this._rgb;\n    }\n  }, {\n    key: \"hslString\",\n    value: function hslString() {\n      return this._valid ? _hslString(this._rgb) : this._rgb;\n    }\n  }, {\n    key: \"mix\",\n    value: function mix(color, weight) {\n      var me = this;\n\n      if (color) {\n        var c1 = me.rgb;\n        var c2 = color.rgb;\n        var w2;\n        var p = weight === w2 ? 0.5 : weight;\n        var w = 2 * p - 1;\n        var a = c1.a - c2.a;\n        var w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n        w2 = 1 - w1;\n        c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;\n        c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;\n        c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;\n        c1.a = p * c1.a + (1 - p) * c2.a;\n        me.rgb = c1;\n      }\n\n      return me;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new Color(this.rgb);\n    }\n  }, {\n    key: \"alpha\",\n    value: function alpha(a) {\n      this._rgb.a = n2b(a);\n      return this;\n    }\n  }, {\n    key: \"clearer\",\n    value: function clearer(ratio) {\n      var rgb = this._rgb;\n      rgb.a *= 1 - ratio;\n      return this;\n    }\n  }, {\n    key: \"greyscale\",\n    value: function greyscale() {\n      var rgb = this._rgb;\n      var val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);\n      rgb.r = rgb.g = rgb.b = val;\n      return this;\n    }\n  }, {\n    key: \"opaquer\",\n    value: function opaquer(ratio) {\n      var rgb = this._rgb;\n      rgb.a *= 1 + ratio;\n      return this;\n    }\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      var v = this._rgb;\n      v.r = 255 - v.r;\n      v.g = 255 - v.g;\n      v.b = 255 - v.b;\n      return this;\n    }\n  }, {\n    key: \"lighten\",\n    value: function lighten(ratio) {\n      modHSL(this._rgb, 2, ratio);\n      return this;\n    }\n  }, {\n    key: \"darken\",\n    value: function darken(ratio) {\n      modHSL(this._rgb, 2, -ratio);\n      return this;\n    }\n  }, {\n    key: \"saturate\",\n    value: function saturate(ratio) {\n      modHSL(this._rgb, 1, ratio);\n      return this;\n    }\n  }, {\n    key: \"desaturate\",\n    value: function desaturate(ratio) {\n      modHSL(this._rgb, 1, -ratio);\n      return this;\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate(deg) {\n      _rotate(this._rgb, deg);\n\n      return this;\n    }\n  }, {\n    key: \"valid\",\n    get: function get() {\n      return this._valid;\n    }\n  }, {\n    key: \"rgb\",\n    get: function get() {\n      var v = clone(this._rgb);\n\n      if (v) {\n        v.a = b2n(v.a);\n      }\n\n      return v;\n    },\n    set: function set(obj) {\n      this._rgb = fromObject(obj);\n    }\n  }]);\n\n  return Color;\n}();\n\nfunction index_esm(input) {\n  return new Color(input);\n}\n\nvar isPatternOrGradient = function isPatternOrGradient(value) {\n  return value instanceof CanvasGradient || value instanceof CanvasPattern;\n};\n\nfunction color(value) {\n  return isPatternOrGradient(value) ? value : index_esm(value);\n}\n\nfunction getHoverColor(value) {\n  return isPatternOrGradient(value) ? value : index_esm(value).saturate(0.5).darken(0.1).hexString();\n}\n\nvar overrides = Object.create(null);\nvar descriptors = Object.create(null);\n\nfunction getScope$1(node, key) {\n  if (!key) {\n    return node;\n  }\n\n  var keys = key.split('.');\n\n  for (var i = 0, n = keys.length; i < n; ++i) {\n    var k = keys[i];\n    node = node[k] || (node[k] = Object.create(null));\n  }\n\n  return node;\n}\n\nfunction _set(root, scope, values) {\n  if (typeof scope === 'string') {\n    return merge(getScope$1(root, scope), values);\n  }\n\n  return merge(getScope$1(root, ''), scope);\n}\n\nvar Defaults = /*#__PURE__*/function () {\n  function Defaults(_descriptors) {\n    Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, Defaults);\n\n    this.animation = undefined;\n    this.backgroundColor = 'rgba(0,0,0,0.1)';\n    this.borderColor = 'rgba(0,0,0,0.1)';\n    this.color = '#666';\n    this.datasets = {};\n\n    this.devicePixelRatio = function (context) {\n      return context.chart.platform.getDevicePixelRatio();\n    };\n\n    this.elements = {};\n    this.events = ['mousemove', 'mouseout', 'click', 'touchstart', 'touchmove'];\n    this.font = {\n      family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n      size: 12,\n      style: 'normal',\n      lineHeight: 1.2,\n      weight: null\n    };\n    this.hover = {};\n\n    this.hoverBackgroundColor = function (ctx, options) {\n      return getHoverColor(options.backgroundColor);\n    };\n\n    this.hoverBorderColor = function (ctx, options) {\n      return getHoverColor(options.borderColor);\n    };\n\n    this.hoverColor = function (ctx, options) {\n      return getHoverColor(options.color);\n    };\n\n    this.indexAxis = 'x';\n    this.interaction = {\n      mode: 'nearest',\n      intersect: true\n    };\n    this.maintainAspectRatio = true;\n    this.onHover = null;\n    this.onClick = null;\n    this.parsing = true;\n    this.plugins = {};\n    this.responsive = true;\n    this.scale = undefined;\n    this.scales = {};\n    this.showLine = true;\n    this.describe(_descriptors);\n  }\n\n  Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(Defaults, [{\n    key: \"set\",\n    value: function set(scope, values) {\n      return _set(this, scope, values);\n    }\n  }, {\n    key: \"get\",\n    value: function get(scope) {\n      return getScope$1(this, scope);\n    }\n  }, {\n    key: \"describe\",\n    value: function describe(scope, values) {\n      return _set(descriptors, scope, values);\n    }\n  }, {\n    key: \"override\",\n    value: function override(scope, values) {\n      return _set(overrides, scope, values);\n    }\n  }, {\n    key: \"route\",\n    value: function route(scope, name, targetScope, targetName) {\n      var _Object$definePropert;\n\n      var scopeObject = getScope$1(this, scope);\n      var targetScopeObject = getScope$1(this, targetScope);\n      var privateName = '_' + name;\n      Object.defineProperties(scopeObject, (_Object$definePropert = {}, Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_Object$definePropert, privateName, {\n        value: scopeObject[name],\n        writable: true\n      }), Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_Object$definePropert, name, {\n        enumerable: true,\n        get: function get() {\n          var local = this[privateName];\n          var target = targetScopeObject[targetName];\n\n          if (isObject(local)) {\n            return Object.assign({}, target, local);\n          }\n\n          return valueOrDefault(local, target);\n        },\n        set: function set(value) {\n          this[privateName] = value;\n        }\n      }), _Object$definePropert));\n    }\n  }]);\n\n  return Defaults;\n}();\n\nvar defaults = new Defaults({\n  _scriptable: function _scriptable(name) {\n    return !name.startsWith('on');\n  },\n  _indexable: function _indexable(name) {\n    return name !== 'events';\n  },\n  hover: {\n    _fallback: 'interaction'\n  },\n  interaction: {\n    _scriptable: false,\n    _indexable: false\n  }\n});\n\nfunction toFontString(font) {\n  if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {\n    return null;\n  }\n\n  return (font.style ? font.style + ' ' : '') + (font.weight ? font.weight + ' ' : '') + font.size + 'px ' + font.family;\n}\n\nfunction _measureText(ctx, data, gc, longest, string) {\n  var textWidth = data[string];\n\n  if (!textWidth) {\n    textWidth = data[string] = ctx.measureText(string).width;\n    gc.push(string);\n  }\n\n  if (textWidth > longest) {\n    longest = textWidth;\n  }\n\n  return longest;\n}\n\nfunction _longestText(ctx, font, arrayOfThings, cache) {\n  cache = cache || {};\n  var data = cache.data = cache.data || {};\n  var gc = cache.garbageCollect = cache.garbageCollect || [];\n\n  if (cache.font !== font) {\n    data = cache.data = {};\n    gc = cache.garbageCollect = [];\n    cache.font = font;\n  }\n\n  ctx.save();\n  ctx.font = font;\n  var longest = 0;\n  var ilen = arrayOfThings.length;\n  var i, j, jlen, thing, nestedThing;\n\n  for (i = 0; i < ilen; i++) {\n    thing = arrayOfThings[i];\n\n    if (thing !== undefined && thing !== null && isArray(thing) !== true) {\n      longest = _measureText(ctx, data, gc, longest, thing);\n    } else if (isArray(thing)) {\n      for (j = 0, jlen = thing.length; j < jlen; j++) {\n        nestedThing = thing[j];\n\n        if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {\n          longest = _measureText(ctx, data, gc, longest, nestedThing);\n        }\n      }\n    }\n  }\n\n  ctx.restore();\n  var gcLen = gc.length / 2;\n\n  if (gcLen > arrayOfThings.length) {\n    for (i = 0; i < gcLen; i++) {\n      delete data[gc[i]];\n    }\n\n    gc.splice(0, gcLen);\n  }\n\n  return longest;\n}\n\nfunction _alignPixel(chart, pixel, width) {\n  var devicePixelRatio = chart.currentDevicePixelRatio;\n  var halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;\n  return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\n}\n\nfunction clearCanvas(canvas, ctx) {\n  ctx = ctx || canvas.getContext('2d');\n  ctx.save();\n  ctx.resetTransform();\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.restore();\n}\n\nfunction drawPoint(ctx, options, x, y) {\n  var type, xOffset, yOffset, size, cornerRadius;\n  var style = options.pointStyle;\n  var rotation = options.rotation;\n  var radius = options.radius;\n  var rad = (rotation || 0) * RAD_PER_DEG;\n\n  if (style && typeof style === 'object') {\n    type = style.toString();\n\n    if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n      ctx.save();\n      ctx.translate(x, y);\n      ctx.rotate(rad);\n      ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);\n      ctx.restore();\n      return;\n    }\n  }\n\n  if (isNaN(radius) || radius <= 0) {\n    return;\n  }\n\n  ctx.beginPath();\n\n  switch (style) {\n    default:\n      ctx.arc(x, y, radius, 0, TAU);\n      ctx.closePath();\n      break;\n\n    case 'triangle':\n      ctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n      rad += TWO_THIRDS_PI;\n      ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n      rad += TWO_THIRDS_PI;\n      ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n      ctx.closePath();\n      break;\n\n    case 'rectRounded':\n      cornerRadius = radius * 0.516;\n      size = radius - cornerRadius;\n      xOffset = Math.cos(rad + QUARTER_PI) * size;\n      yOffset = Math.sin(rad + QUARTER_PI) * size;\n      ctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\n      ctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - HALF_PI, rad);\n      ctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + HALF_PI);\n      ctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\n      ctx.closePath();\n      break;\n\n    case 'rect':\n      if (!rotation) {\n        size = Math.SQRT1_2 * radius;\n        ctx.rect(x - size, y - size, 2 * size, 2 * size);\n        break;\n      }\n\n      rad += QUARTER_PI;\n\n    case 'rectRot':\n      xOffset = Math.cos(rad) * radius;\n      yOffset = Math.sin(rad) * radius;\n      ctx.moveTo(x - xOffset, y - yOffset);\n      ctx.lineTo(x + yOffset, y - xOffset);\n      ctx.lineTo(x + xOffset, y + yOffset);\n      ctx.lineTo(x - yOffset, y + xOffset);\n      ctx.closePath();\n      break;\n\n    case 'crossRot':\n      rad += QUARTER_PI;\n\n    case 'cross':\n      xOffset = Math.cos(rad) * radius;\n      yOffset = Math.sin(rad) * radius;\n      ctx.moveTo(x - xOffset, y - yOffset);\n      ctx.lineTo(x + xOffset, y + yOffset);\n      ctx.moveTo(x + yOffset, y - xOffset);\n      ctx.lineTo(x - yOffset, y + xOffset);\n      break;\n\n    case 'star':\n      xOffset = Math.cos(rad) * radius;\n      yOffset = Math.sin(rad) * radius;\n      ctx.moveTo(x - xOffset, y - yOffset);\n      ctx.lineTo(x + xOffset, y + yOffset);\n      ctx.moveTo(x + yOffset, y - xOffset);\n      ctx.lineTo(x - yOffset, y + xOffset);\n      rad += QUARTER_PI;\n      xOffset = Math.cos(rad) * radius;\n      yOffset = Math.sin(rad) * radius;\n      ctx.moveTo(x - xOffset, y - yOffset);\n      ctx.lineTo(x + xOffset, y + yOffset);\n      ctx.moveTo(x + yOffset, y - xOffset);\n      ctx.lineTo(x - yOffset, y + xOffset);\n      break;\n\n    case 'line':\n      xOffset = Math.cos(rad) * radius;\n      yOffset = Math.sin(rad) * radius;\n      ctx.moveTo(x - xOffset, y - yOffset);\n      ctx.lineTo(x + xOffset, y + yOffset);\n      break;\n\n    case 'dash':\n      ctx.moveTo(x, y);\n      ctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);\n      break;\n  }\n\n  ctx.fill();\n\n  if (options.borderWidth > 0) {\n    ctx.stroke();\n  }\n}\n\nfunction _isPointInArea(point, area, margin) {\n  margin = margin || 0.5;\n  return point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;\n}\n\nfunction clipArea(ctx, area) {\n  ctx.save();\n  ctx.beginPath();\n  ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n  ctx.clip();\n}\n\nfunction unclipArea(ctx) {\n  ctx.restore();\n}\n\nfunction _steppedLineTo(ctx, previous, target, flip, mode) {\n  if (!previous) {\n    return ctx.lineTo(target.x, target.y);\n  }\n\n  if (mode === 'middle') {\n    var midpoint = (previous.x + target.x) / 2.0;\n    ctx.lineTo(midpoint, previous.y);\n    ctx.lineTo(midpoint, target.y);\n  } else if (mode === 'after' !== !!flip) {\n    ctx.lineTo(previous.x, target.y);\n  } else {\n    ctx.lineTo(target.x, previous.y);\n  }\n\n  ctx.lineTo(target.x, target.y);\n}\n\nfunction _bezierCurveTo(ctx, previous, target, flip) {\n  if (!previous) {\n    return ctx.lineTo(target.x, target.y);\n  }\n\n  ctx.bezierCurveTo(flip ? previous.cp1x : previous.cp2x, flip ? previous.cp1y : previous.cp2y, flip ? target.cp2x : target.cp1x, flip ? target.cp2y : target.cp1y, target.x, target.y);\n}\n\nfunction renderText(ctx, text, x, y, font) {\n  var opts = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n  var lines = isArray(text) ? text : [text];\n  var stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';\n  var i, line;\n  ctx.save();\n\n  if (opts.translation) {\n    ctx.translate(opts.translation[0], opts.translation[1]);\n  }\n\n  if (!isNullOrUndef(opts.rotation)) {\n    ctx.rotate(opts.rotation);\n  }\n\n  ctx.font = font.string;\n\n  if (opts.color) {\n    ctx.fillStyle = opts.color;\n  }\n\n  if (opts.textAlign) {\n    ctx.textAlign = opts.textAlign;\n  }\n\n  if (opts.textBaseline) {\n    ctx.textBaseline = opts.textBaseline;\n  }\n\n  for (i = 0; i < lines.length; ++i) {\n    line = lines[i];\n\n    if (stroke) {\n      if (opts.strokeColor) {\n        ctx.strokeStyle = opts.strokeColor;\n      }\n\n      if (!isNullOrUndef(opts.strokeWidth)) {\n        ctx.lineWidth = opts.strokeWidth;\n      }\n\n      ctx.strokeText(line, x, y, opts.maxWidth);\n    }\n\n    ctx.fillText(line, x, y, opts.maxWidth);\n\n    if (opts.strikethrough || opts.underline) {\n      var metrics = ctx.measureText(line);\n      var left = x - metrics.actualBoundingBoxLeft;\n      var right = x + metrics.actualBoundingBoxRight;\n      var top = y - metrics.actualBoundingBoxAscent;\n      var bottom = y + metrics.actualBoundingBoxDescent;\n      var yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;\n      ctx.strokeStyle = ctx.fillStyle;\n      ctx.beginPath();\n      ctx.lineWidth = opts.decorationWidth || 2;\n      ctx.moveTo(left, yDecoration);\n      ctx.lineTo(right, yDecoration);\n      ctx.stroke();\n    }\n\n    y += font.lineHeight;\n  }\n\n  ctx.restore();\n}\n\nfunction addRoundedRectPath(ctx, rect) {\n  var x = rect.x,\n      y = rect.y,\n      w = rect.w,\n      h = rect.h,\n      radius = rect.radius;\n  ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, -HALF_PI, PI, true);\n  ctx.lineTo(x, y + h - radius.bottomLeft);\n  ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);\n  ctx.lineTo(x + w - radius.bottomRight, y + h);\n  ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);\n  ctx.lineTo(x + w, y + radius.topRight);\n  ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);\n  ctx.lineTo(x + radius.topLeft, y);\n}\n\nvar LINE_HEIGHT = new RegExp(/^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/);\nvar FONT_STYLE = new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);\n\nfunction toLineHeight(value, size) {\n  var matches = ('' + value).match(LINE_HEIGHT);\n\n  if (!matches || matches[1] === 'normal') {\n    return size * 1.2;\n  }\n\n  value = +matches[2];\n\n  switch (matches[3]) {\n    case 'px':\n      return value;\n\n    case '%':\n      value /= 100;\n      break;\n  }\n\n  return size * value;\n}\n\nvar numberOrZero = function numberOrZero(v) {\n  return +v || 0;\n};\n\nfunction _readValueToProps(value, props) {\n  var ret = {};\n  var objProps = isObject(props);\n  var keys = objProps ? Object.keys(props) : props;\n  var read = isObject(value) ? objProps ? function (prop) {\n    return valueOrDefault(value[prop], value[props[prop]]);\n  } : function (prop) {\n    return value[prop];\n  } : function () {\n    return value;\n  };\n\n  var _iterator2 = _createForOfIteratorHelper(keys),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var prop = _step2.value;\n      ret[prop] = numberOrZero(read(prop));\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return ret;\n}\n\nfunction toTRBL(value) {\n  return _readValueToProps(value, {\n    top: 'y',\n    right: 'x',\n    bottom: 'y',\n    left: 'x'\n  });\n}\n\nfunction toTRBLCorners(value) {\n  return _readValueToProps(value, ['topLeft', 'topRight', 'bottomLeft', 'bottomRight']);\n}\n\nfunction toPadding(value) {\n  var obj = toTRBL(value);\n  obj.width = obj.left + obj.right;\n  obj.height = obj.top + obj.bottom;\n  return obj;\n}\n\nfunction toFont(options, fallback) {\n  options = options || {};\n  fallback = fallback || defaults.font;\n  var size = valueOrDefault(options.size, fallback.size);\n\n  if (typeof size === 'string') {\n    size = parseInt(size, 10);\n  }\n\n  var style = valueOrDefault(options.style, fallback.style);\n\n  if (style && !('' + style).match(FONT_STYLE)) {\n    console.warn('Invalid font style specified: \"' + style + '\"');\n    style = '';\n  }\n\n  var font = {\n    family: valueOrDefault(options.family, fallback.family),\n    lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),\n    size: size,\n    style: style,\n    weight: valueOrDefault(options.weight, fallback.weight),\n    string: ''\n  };\n  font.string = toFontString(font);\n  return font;\n}\n\nfunction resolve(inputs, context, index, info) {\n  var cacheable = true;\n  var i, ilen, value;\n\n  for (i = 0, ilen = inputs.length; i < ilen; ++i) {\n    value = inputs[i];\n\n    if (value === undefined) {\n      continue;\n    }\n\n    if (context !== undefined && typeof value === 'function') {\n      value = value(context);\n      cacheable = false;\n    }\n\n    if (index !== undefined && isArray(value)) {\n      value = value[index % value.length];\n      cacheable = false;\n    }\n\n    if (value !== undefined) {\n      if (info && !cacheable) {\n        info.cacheable = false;\n      }\n\n      return value;\n    }\n  }\n}\n\nfunction _addGrace(minmax, grace) {\n  var min = minmax.min,\n      max = minmax.max;\n  return {\n    min: min - Math.abs(toDimension(grace, min)),\n    max: max + toDimension(grace, max)\n  };\n}\n\nfunction _lookup(table, value, cmp) {\n  cmp = cmp || function (index) {\n    return table[index] < value;\n  };\n\n  var hi = table.length - 1;\n  var lo = 0;\n  var mid;\n\n  while (hi - lo > 1) {\n    mid = lo + hi >> 1;\n\n    if (cmp(mid)) {\n      lo = mid;\n    } else {\n      hi = mid;\n    }\n  }\n\n  return {\n    lo: lo,\n    hi: hi\n  };\n}\n\nvar _lookupByKey = function _lookupByKey(table, key, value) {\n  return _lookup(table, value, function (index) {\n    return table[index][key] < value;\n  });\n};\n\nvar _rlookupByKey = function _rlookupByKey(table, key, value) {\n  return _lookup(table, value, function (index) {\n    return table[index][key] >= value;\n  });\n};\n\nfunction _filterBetween(values, min, max) {\n  var start = 0;\n  var end = values.length;\n\n  while (start < end && values[start] < min) {\n    start++;\n  }\n\n  while (end > start && values[end - 1] > max) {\n    end--;\n  }\n\n  return start > 0 || end < values.length ? values.slice(start, end) : values;\n}\n\nvar arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];\n\nfunction listenArrayEvents(array, listener) {\n  if (array._chartjs) {\n    array._chartjs.listeners.push(listener);\n\n    return;\n  }\n\n  Object.defineProperty(array, '_chartjs', {\n    configurable: true,\n    enumerable: false,\n    value: {\n      listeners: [listener]\n    }\n  });\n  arrayEvents.forEach(function (key) {\n    var method = '_onData' + _capitalize(key);\n\n    var base = array[key];\n    Object.defineProperty(array, key, {\n      configurable: true,\n      enumerable: false,\n      value: function value() {\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        var res = base.apply(this, args);\n\n        array._chartjs.listeners.forEach(function (object) {\n          if (typeof object[method] === 'function') {\n            object[method].apply(object, args);\n          }\n        });\n\n        return res;\n      }\n    });\n  });\n}\n\nfunction unlistenArrayEvents(array, listener) {\n  var stub = array._chartjs;\n\n  if (!stub) {\n    return;\n  }\n\n  var listeners = stub.listeners;\n  var index = listeners.indexOf(listener);\n\n  if (index !== -1) {\n    listeners.splice(index, 1);\n  }\n\n  if (listeners.length > 0) {\n    return;\n  }\n\n  arrayEvents.forEach(function (key) {\n    delete array[key];\n  });\n  delete array._chartjs;\n}\n\nfunction _arrayUnique(items) {\n  var set = new Set();\n  var i, ilen;\n\n  for (i = 0, ilen = items.length; i < ilen; ++i) {\n    set.add(items[i]);\n  }\n\n  if (set.size === ilen) {\n    return items;\n  }\n\n  var result = [];\n  set.forEach(function (item) {\n    result.push(item);\n  });\n  return result;\n}\n\nfunction _createResolver(scopes) {\n  var _cache;\n\n  var prefixes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [''];\n  var rootScopes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : scopes;\n  var fallback = arguments.length > 3 ? arguments[3] : undefined;\n  var getTarget = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : function () {\n    return scopes[0];\n  };\n\n  if (!defined(fallback)) {\n    fallback = _resolve('_fallback', scopes);\n  }\n\n  var cache = (_cache = {}, Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_cache, Symbol.toStringTag, 'Object'), Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_cache, \"_cacheable\", true), Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_cache, \"_scopes\", scopes), Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_cache, \"_rootScopes\", rootScopes), Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_cache, \"_fallback\", fallback), Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_cache, \"_getTarget\", getTarget), Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_cache, \"override\", function override(scope) {\n    return _createResolver([scope].concat(Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(scopes)), prefixes, rootScopes, fallback);\n  }), _cache);\n  return new Proxy(cache, {\n    deleteProperty: function deleteProperty(target, prop) {\n      delete target[prop];\n      delete target._keys;\n      delete scopes[0][prop];\n      return true;\n    },\n    get: function get(target, prop) {\n      return _cached(target, prop, function () {\n        return _resolveWithPrefixes(prop, prefixes, scopes, target);\n      });\n    },\n    getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, prop) {\n      return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);\n    },\n    getPrototypeOf: function getPrototypeOf() {\n      return Reflect.getPrototypeOf(scopes[0]);\n    },\n    has: function has(target, prop) {\n      return getKeysFromAllScopes(target).includes(prop);\n    },\n    ownKeys: function ownKeys(target) {\n      return getKeysFromAllScopes(target);\n    },\n    set: function set(target, prop, value) {\n      var storage = target._storage || (target._storage = getTarget());\n      storage[prop] = value;\n      delete target[prop];\n      delete target._keys;\n      return true;\n    }\n  });\n}\n\nfunction _attachContext(proxy, context, subProxy, descriptorDefaults) {\n  var cache = {\n    _cacheable: false,\n    _proxy: proxy,\n    _context: context,\n    _subProxy: subProxy,\n    _stack: new Set(),\n    _descriptors: _descriptors(proxy, descriptorDefaults),\n    setContext: function setContext(ctx) {\n      return _attachContext(proxy, ctx, subProxy, descriptorDefaults);\n    },\n    override: function override(scope) {\n      return _attachContext(proxy.override(scope), context, subProxy, descriptorDefaults);\n    }\n  };\n  return new Proxy(cache, {\n    deleteProperty: function deleteProperty(target, prop) {\n      delete target[prop];\n      delete proxy[prop];\n      return true;\n    },\n    get: function get(target, prop, receiver) {\n      return _cached(target, prop, function () {\n        return _resolveWithContext(target, prop, receiver);\n      });\n    },\n    getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, prop) {\n      return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? {\n        enumerable: true,\n        configurable: true\n      } : undefined : Reflect.getOwnPropertyDescriptor(proxy, prop);\n    },\n    getPrototypeOf: function getPrototypeOf() {\n      return Reflect.getPrototypeOf(proxy);\n    },\n    has: function has(target, prop) {\n      return Reflect.has(proxy, prop);\n    },\n    ownKeys: function ownKeys() {\n      return Reflect.ownKeys(proxy);\n    },\n    set: function set(target, prop, value) {\n      proxy[prop] = value;\n      delete target[prop];\n      return true;\n    }\n  });\n}\n\nfunction _descriptors(proxy) {\n  var defaults = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    scriptable: true,\n    indexable: true\n  };\n\n  var _proxy$_scriptable = proxy._scriptable,\n      _scriptable = _proxy$_scriptable === void 0 ? defaults.scriptable : _proxy$_scriptable,\n      _proxy$_indexable = proxy._indexable,\n      _indexable = _proxy$_indexable === void 0 ? defaults.indexable : _proxy$_indexable,\n      _proxy$_allKeys = proxy._allKeys,\n      _allKeys = _proxy$_allKeys === void 0 ? defaults.allKeys : _proxy$_allKeys;\n\n  return {\n    allKeys: _allKeys,\n    scriptable: _scriptable,\n    indexable: _indexable,\n    isScriptable: isFunction(_scriptable) ? _scriptable : function () {\n      return _scriptable;\n    },\n    isIndexable: isFunction(_indexable) ? _indexable : function () {\n      return _indexable;\n    }\n  };\n}\n\nvar readKey = function readKey(prefix, name) {\n  return prefix ? prefix + _capitalize(name) : name;\n};\n\nvar needsSubResolver = function needsSubResolver(prop, value) {\n  return isObject(value) && prop !== 'adapters';\n};\n\nfunction _cached(target, prop, resolve) {\n  var value = target[prop];\n\n  if (defined(value)) {\n    return value;\n  }\n\n  value = resolve();\n\n  if (defined(value)) {\n    target[prop] = value;\n  }\n\n  return value;\n}\n\nfunction _resolveWithContext(target, prop, receiver) {\n  var _proxy = target._proxy,\n      _context = target._context,\n      _subProxy = target._subProxy,\n      descriptors = target._descriptors;\n  var value = _proxy[prop];\n\n  if (isFunction(value) && descriptors.isScriptable(prop)) {\n    value = _resolveScriptable(prop, value, target, receiver);\n  }\n\n  if (isArray(value) && value.length) {\n    value = _resolveArray(prop, value, target, descriptors.isIndexable);\n  }\n\n  if (needsSubResolver(prop, value)) {\n    value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);\n  }\n\n  return value;\n}\n\nfunction _resolveScriptable(prop, value, target, receiver) {\n  var _proxy = target._proxy,\n      _context = target._context,\n      _subProxy = target._subProxy,\n      _stack = target._stack;\n\n  if (_stack.has(prop)) {\n    throw new Error('Recursion detected: ' + Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_stack).join('->') + '->' + prop);\n  }\n\n  _stack.add(prop);\n\n  value = value(_context, _subProxy || receiver);\n\n  _stack[\"delete\"](prop);\n\n  if (isObject(value)) {\n    value = createSubResolver(_proxy._scopes, _proxy, prop, value);\n  }\n\n  return value;\n}\n\nfunction _resolveArray(prop, value, target, isIndexable) {\n  var _proxy = target._proxy,\n      _context = target._context,\n      _subProxy = target._subProxy,\n      descriptors = target._descriptors;\n\n  if (defined(_context.index) && isIndexable(prop)) {\n    value = value[_context.index % value.length];\n  } else if (isObject(value[0])) {\n    var arr = value;\n\n    var scopes = _proxy._scopes.filter(function (s) {\n      return s !== arr;\n    });\n\n    value = [];\n\n    var _iterator3 = _createForOfIteratorHelper(arr),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var item = _step3.value;\n        var resolver = createSubResolver(scopes, _proxy, prop, item);\n        value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  }\n\n  return value;\n}\n\nfunction resolveFallback(fallback, prop, value) {\n  return isFunction(fallback) ? fallback(prop, value) : fallback;\n}\n\nvar getScope = function getScope(key, parent) {\n  return key === true ? parent : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;\n};\n\nfunction addScopes(set, parentScopes, key, parentFallback) {\n  var _iterator4 = _createForOfIteratorHelper(parentScopes),\n      _step4;\n\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var parent = _step4.value;\n      var scope = getScope(key, parent);\n\n      if (scope) {\n        set.add(scope);\n        var fallback = resolveFallback(scope._fallback, key, scope);\n\n        if (defined(fallback) && fallback !== key && fallback !== parentFallback) {\n          return fallback;\n        }\n      } else if (scope === false && defined(parentFallback) && key !== parentFallback) {\n        return null;\n      }\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n\n  return false;\n}\n\nfunction createSubResolver(parentScopes, resolver, prop, value) {\n  var rootScopes = resolver._rootScopes;\n  var fallback = resolveFallback(resolver._fallback, prop, value);\n  var allScopes = [].concat(Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(parentScopes), Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(rootScopes));\n  var set = new Set();\n  set.add(value);\n  var key = addScopesFromKey(set, allScopes, prop, fallback || prop);\n\n  if (key === null) {\n    return false;\n  }\n\n  if (defined(fallback) && fallback !== prop) {\n    key = addScopesFromKey(set, allScopes, fallback, key);\n\n    if (key === null) {\n      return false;\n    }\n  }\n\n  return _createResolver(Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(set), [''], rootScopes, fallback, function () {\n    return subGetTarget(resolver, prop, value);\n  });\n}\n\nfunction addScopesFromKey(set, allScopes, key, fallback) {\n  while (key) {\n    key = addScopes(set, allScopes, key, fallback);\n  }\n\n  return key;\n}\n\nfunction subGetTarget(resolver, prop, value) {\n  var parent = resolver._getTarget();\n\n  if (!(prop in parent)) {\n    parent[prop] = {};\n  }\n\n  var target = parent[prop];\n\n  if (isArray(target) && isObject(value)) {\n    return value;\n  }\n\n  return target;\n}\n\nfunction _resolveWithPrefixes(prop, prefixes, scopes, proxy) {\n  var value;\n\n  var _iterator5 = _createForOfIteratorHelper(prefixes),\n      _step5;\n\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var prefix = _step5.value;\n      value = _resolve(readKey(prefix, prop), scopes);\n\n      if (defined(value)) {\n        return needsSubResolver(prop, value) ? createSubResolver(scopes, proxy, prop, value) : value;\n      }\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n}\n\nfunction _resolve(key, scopes) {\n  var _iterator6 = _createForOfIteratorHelper(scopes),\n      _step6;\n\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var scope = _step6.value;\n\n      if (!scope) {\n        continue;\n      }\n\n      var value = scope[key];\n\n      if (defined(value)) {\n        return value;\n      }\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n}\n\nfunction getKeysFromAllScopes(target) {\n  var keys = target._keys;\n\n  if (!keys) {\n    keys = target._keys = resolveKeysFromAllScopes(target._scopes);\n  }\n\n  return keys;\n}\n\nfunction resolveKeysFromAllScopes(scopes) {\n  var set = new Set();\n\n  var _iterator7 = _createForOfIteratorHelper(scopes),\n      _step7;\n\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var scope = _step7.value;\n\n      var _iterator8 = _createForOfIteratorHelper(Object.keys(scope).filter(function (k) {\n        return !k.startsWith('_');\n      })),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var key = _step8.value;\n          set.add(key);\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n\n  return Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(set);\n}\n\nvar EPSILON = Number.EPSILON || 1e-14;\n\nvar getPoint = function getPoint(points, i) {\n  return i < points.length && !points[i].skip && points[i];\n};\n\nvar getValueAxis = function getValueAxis(indexAxis) {\n  return indexAxis === 'x' ? 'y' : 'x';\n};\n\nfunction splineCurve(firstPoint, middlePoint, afterPoint, t) {\n  var previous = firstPoint.skip ? middlePoint : firstPoint;\n  var current = middlePoint;\n  var next = afterPoint.skip ? middlePoint : afterPoint;\n  var d01 = distanceBetweenPoints(current, previous);\n  var d12 = distanceBetweenPoints(next, current);\n  var s01 = d01 / (d01 + d12);\n  var s12 = d12 / (d01 + d12);\n  s01 = isNaN(s01) ? 0 : s01;\n  s12 = isNaN(s12) ? 0 : s12;\n  var fa = t * s01;\n  var fb = t * s12;\n  return {\n    previous: {\n      x: current.x - fa * (next.x - previous.x),\n      y: current.y - fa * (next.y - previous.y)\n    },\n    next: {\n      x: current.x + fb * (next.x - previous.x),\n      y: current.y + fb * (next.y - previous.y)\n    }\n  };\n}\n\nfunction monotoneAdjust(points, deltaK, mK) {\n  var pointsLen = points.length;\n  var alphaK, betaK, tauK, squaredMagnitude, pointCurrent;\n  var pointAfter = getPoint(points, 0);\n\n  for (var i = 0; i < pointsLen - 1; ++i) {\n    pointCurrent = pointAfter;\n    pointAfter = getPoint(points, i + 1);\n\n    if (!pointCurrent || !pointAfter) {\n      continue;\n    }\n\n    if (almostEquals(deltaK[i], 0, EPSILON)) {\n      mK[i] = mK[i + 1] = 0;\n      continue;\n    }\n\n    alphaK = mK[i] / deltaK[i];\n    betaK = mK[i + 1] / deltaK[i];\n    squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\n\n    if (squaredMagnitude <= 9) {\n      continue;\n    }\n\n    tauK = 3 / Math.sqrt(squaredMagnitude);\n    mK[i] = alphaK * tauK * deltaK[i];\n    mK[i + 1] = betaK * tauK * deltaK[i];\n  }\n}\n\nfunction monotoneCompute(points, mK) {\n  var indexAxis = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'x';\n  var valueAxis = getValueAxis(indexAxis);\n  var pointsLen = points.length;\n  var delta, pointBefore, pointCurrent;\n  var pointAfter = getPoint(points, 0);\n\n  for (var i = 0; i < pointsLen; ++i) {\n    pointBefore = pointCurrent;\n    pointCurrent = pointAfter;\n    pointAfter = getPoint(points, i + 1);\n\n    if (!pointCurrent) {\n      continue;\n    }\n\n    var iPixel = pointCurrent[indexAxis];\n    var vPixel = pointCurrent[valueAxis];\n\n    if (pointBefore) {\n      delta = (iPixel - pointBefore[indexAxis]) / 3;\n      pointCurrent[\"cp1\".concat(indexAxis)] = iPixel - delta;\n      pointCurrent[\"cp1\".concat(valueAxis)] = vPixel - delta * mK[i];\n    }\n\n    if (pointAfter) {\n      delta = (pointAfter[indexAxis] - iPixel) / 3;\n      pointCurrent[\"cp2\".concat(indexAxis)] = iPixel + delta;\n      pointCurrent[\"cp2\".concat(valueAxis)] = vPixel + delta * mK[i];\n    }\n  }\n}\n\nfunction splineCurveMonotone(points) {\n  var indexAxis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'x';\n  var valueAxis = getValueAxis(indexAxis);\n  var pointsLen = points.length;\n  var deltaK = Array(pointsLen).fill(0);\n  var mK = Array(pointsLen);\n  var i, pointBefore, pointCurrent;\n  var pointAfter = getPoint(points, 0);\n\n  for (i = 0; i < pointsLen; ++i) {\n    pointBefore = pointCurrent;\n    pointCurrent = pointAfter;\n    pointAfter = getPoint(points, i + 1);\n\n    if (!pointCurrent) {\n      continue;\n    }\n\n    if (pointAfter) {\n      var slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];\n      deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;\n    }\n\n    mK[i] = !pointBefore ? deltaK[i] : !pointAfter ? deltaK[i - 1] : sign(deltaK[i - 1]) !== sign(deltaK[i]) ? 0 : (deltaK[i - 1] + deltaK[i]) / 2;\n  }\n\n  monotoneAdjust(points, deltaK, mK);\n  monotoneCompute(points, mK, indexAxis);\n}\n\nfunction capControlPoint(pt, min, max) {\n  return Math.max(Math.min(pt, max), min);\n}\n\nfunction capBezierPoints(points, area) {\n  var i, ilen, point, inArea, inAreaPrev;\n\n  var inAreaNext = _isPointInArea(points[0], area);\n\n  for (i = 0, ilen = points.length; i < ilen; ++i) {\n    inAreaPrev = inArea;\n    inArea = inAreaNext;\n    inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);\n\n    if (!inArea) {\n      continue;\n    }\n\n    point = points[i];\n\n    if (inAreaPrev) {\n      point.cp1x = capControlPoint(point.cp1x, area.left, area.right);\n      point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);\n    }\n\n    if (inAreaNext) {\n      point.cp2x = capControlPoint(point.cp2x, area.left, area.right);\n      point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);\n    }\n  }\n}\n\nfunction _updateBezierControlPoints(points, options, area, loop, indexAxis) {\n  var i, ilen, point, controlPoints;\n\n  if (options.spanGaps) {\n    points = points.filter(function (pt) {\n      return !pt.skip;\n    });\n  }\n\n  if (options.cubicInterpolationMode === 'monotone') {\n    splineCurveMonotone(points, indexAxis);\n  } else {\n    var prev = loop ? points[points.length - 1] : points[0];\n\n    for (i = 0, ilen = points.length; i < ilen; ++i) {\n      point = points[i];\n      controlPoints = splineCurve(prev, point, points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen], options.tension);\n      point.cp1x = controlPoints.previous.x;\n      point.cp1y = controlPoints.previous.y;\n      point.cp2x = controlPoints.next.x;\n      point.cp2y = controlPoints.next.y;\n      prev = point;\n    }\n  }\n\n  if (options.capBezierPoints) {\n    capBezierPoints(points, area);\n  }\n}\n\nfunction _getParentNode(domNode) {\n  var parent = domNode.parentNode;\n\n  if (parent && parent.toString() === '[object ShadowRoot]') {\n    parent = parent.host;\n  }\n\n  return parent;\n}\n\nfunction parseMaxStyle(styleValue, node, parentProperty) {\n  var valueInPixels;\n\n  if (typeof styleValue === 'string') {\n    valueInPixels = parseInt(styleValue, 10);\n\n    if (styleValue.indexOf('%') !== -1) {\n      valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];\n    }\n  } else {\n    valueInPixels = styleValue;\n  }\n\n  return valueInPixels;\n}\n\nvar getComputedStyle = function getComputedStyle(element) {\n  return window.getComputedStyle(element, null);\n};\n\nfunction getStyle(el, property) {\n  return getComputedStyle(el).getPropertyValue(property);\n}\n\nvar positions = ['top', 'right', 'bottom', 'left'];\n\nfunction getPositionedStyle(styles, style, suffix) {\n  var result = {};\n  suffix = suffix ? '-' + suffix : '';\n\n  for (var i = 0; i < 4; i++) {\n    var pos = positions[i];\n    result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;\n  }\n\n  result.width = result.left + result.right;\n  result.height = result.top + result.bottom;\n  return result;\n}\n\nvar useOffsetPos = function useOffsetPos(x, y, target) {\n  return (x > 0 || y > 0) && (!target || !target.shadowRoot);\n};\n\nfunction getCanvasPosition(evt, canvas) {\n  _s();\n\n  var e = evt[\"native\"] || evt;\n  var touches = e.touches;\n  var source = touches && touches.length ? touches[0] : e;\n  var offsetX = source.offsetX,\n      offsetY = source.offsetY;\n  var box = false;\n  var x, y;\n\n  if (useOffsetPos(offsetX, offsetY, e.target)) {\n    x = offsetX;\n    y = offsetY;\n  } else {\n    var rect = canvas.getBoundingClientRect();\n    x = source.clientX - rect.left;\n    y = source.clientY - rect.top;\n    box = true;\n  }\n\n  return {\n    x: x,\n    y: y,\n    box: box\n  };\n}\n\n_s(getCanvasPosition, \"TaN0hAexdpaD4eVsFTeI6MwcRTY=\", false, function () {\n  return [useOffsetPos];\n});\n\nfunction getRelativePosition(evt, chart) {\n  var canvas = chart.canvas,\n      currentDevicePixelRatio = chart.currentDevicePixelRatio;\n  var style = getComputedStyle(canvas);\n  var borderBox = style.boxSizing === 'border-box';\n  var paddings = getPositionedStyle(style, 'padding');\n  var borders = getPositionedStyle(style, 'border', 'width');\n\n  var _getCanvasPosition = getCanvasPosition(evt, canvas),\n      x = _getCanvasPosition.x,\n      y = _getCanvasPosition.y,\n      box = _getCanvasPosition.box;\n\n  var xOffset = paddings.left + (box && borders.left);\n  var yOffset = paddings.top + (box && borders.top);\n  var width = chart.width,\n      height = chart.height;\n\n  if (borderBox) {\n    width -= paddings.width + borders.width;\n    height -= paddings.height + borders.height;\n  }\n\n  return {\n    x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),\n    y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)\n  };\n}\n\nfunction getContainerSize(canvas, width, height) {\n  var maxWidth, maxHeight;\n\n  if (width === undefined || height === undefined) {\n    var container = _getParentNode(canvas);\n\n    if (!container) {\n      width = canvas.clientWidth;\n      height = canvas.clientHeight;\n    } else {\n      var rect = container.getBoundingClientRect();\n      var containerStyle = getComputedStyle(container);\n      var containerBorder = getPositionedStyle(containerStyle, 'border', 'width');\n      var containerPadding = getPositionedStyle(containerStyle, 'padding');\n      width = rect.width - containerPadding.width - containerBorder.width;\n      height = rect.height - containerPadding.height - containerBorder.height;\n      maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');\n      maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');\n    }\n  }\n\n  return {\n    width: width,\n    height: height,\n    maxWidth: maxWidth || INFINITY,\n    maxHeight: maxHeight || INFINITY\n  };\n}\n\nvar round1 = function round1(v) {\n  return Math.round(v * 10) / 10;\n};\n\nfunction getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {\n  var style = getComputedStyle(canvas);\n  var margins = getPositionedStyle(style, 'margin');\n  var maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;\n  var maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;\n  var containerSize = getContainerSize(canvas, bbWidth, bbHeight);\n  var width = containerSize.width,\n      height = containerSize.height;\n\n  if (style.boxSizing === 'content-box') {\n    var borders = getPositionedStyle(style, 'border', 'width');\n    var paddings = getPositionedStyle(style, 'padding');\n    width -= paddings.width + borders.width;\n    height -= paddings.height + borders.height;\n  }\n\n  width = Math.max(0, width - margins.width);\n  height = Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height - margins.height);\n  width = round1(Math.min(width, maxWidth, containerSize.maxWidth));\n  height = round1(Math.min(height, maxHeight, containerSize.maxHeight));\n\n  if (width && !height) {\n    height = round1(width / 2);\n  }\n\n  return {\n    width: width,\n    height: height\n  };\n}\n\nfunction retinaScale(chart, forceRatio, forceStyle) {\n  var pixelRatio = forceRatio || 1;\n  var deviceHeight = Math.floor(chart.height * pixelRatio);\n  var deviceWidth = Math.floor(chart.width * pixelRatio);\n  chart.height = deviceHeight / pixelRatio;\n  chart.width = deviceWidth / pixelRatio;\n  var canvas = chart.canvas;\n\n  if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {\n    canvas.style.height = \"\".concat(chart.height, \"px\");\n    canvas.style.width = \"\".concat(chart.width, \"px\");\n  }\n\n  if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {\n    chart.currentDevicePixelRatio = pixelRatio;\n    canvas.height = deviceHeight;\n    canvas.width = deviceWidth;\n    chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n    return true;\n  }\n\n  return false;\n}\n\nvar supportsEventListenerOptions = function () {\n  var passiveSupported = false;\n\n  try {\n    var options = {\n      get passive() {\n        passiveSupported = true;\n        return false;\n      }\n\n    };\n    window.addEventListener('test', null, options);\n    window.removeEventListener('test', null, options);\n  } catch (e) {}\n\n  return passiveSupported;\n}();\n\nfunction readUsedSize(element, property) {\n  var value = getStyle(element, property);\n  var matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\n  return matches ? +matches[1] : undefined;\n}\n\nfunction _pointInLine(p1, p2, t, mode) {\n  return {\n    x: p1.x + t * (p2.x - p1.x),\n    y: p1.y + t * (p2.y - p1.y)\n  };\n}\n\nfunction _steppedInterpolation(p1, p2, t, mode) {\n  return {\n    x: p1.x + t * (p2.x - p1.x),\n    y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y : mode === 'after' ? t < 1 ? p1.y : p2.y : t > 0 ? p2.y : p1.y\n  };\n}\n\nfunction _bezierInterpolation(p1, p2, t, mode) {\n  var cp1 = {\n    x: p1.cp2x,\n    y: p1.cp2y\n  };\n  var cp2 = {\n    x: p2.cp1x,\n    y: p2.cp1y\n  };\n\n  var a = _pointInLine(p1, cp1, t);\n\n  var b = _pointInLine(cp1, cp2, t);\n\n  var c = _pointInLine(cp2, p2, t);\n\n  var d = _pointInLine(a, b, t);\n\n  var e = _pointInLine(b, c, t);\n\n  return _pointInLine(d, e, t);\n}\n\nvar intlCache = new Map();\n\nfunction getNumberFormat(locale, options) {\n  options = options || {};\n  var cacheKey = locale + JSON.stringify(options);\n  var formatter = intlCache.get(cacheKey);\n\n  if (!formatter) {\n    formatter = new Intl.NumberFormat(locale, options);\n    intlCache.set(cacheKey, formatter);\n  }\n\n  return formatter;\n}\n\nfunction formatNumber(num, locale, options) {\n  return getNumberFormat(locale, options).format(num);\n}\n\nvar getRightToLeftAdapter = function getRightToLeftAdapter(rectX, width) {\n  return {\n    x: function x(_x) {\n      return rectX + rectX + width - _x;\n    },\n    setWidth: function setWidth(w) {\n      width = w;\n    },\n    textAlign: function textAlign(align) {\n      if (align === 'center') {\n        return align;\n      }\n\n      return align === 'right' ? 'left' : 'right';\n    },\n    xPlus: function xPlus(x, value) {\n      return x - value;\n    },\n    leftForLtr: function leftForLtr(x, itemWidth) {\n      return x - itemWidth;\n    }\n  };\n};\n\nvar getLeftToRightAdapter = function getLeftToRightAdapter() {\n  return {\n    x: function x(_x2) {\n      return _x2;\n    },\n    setWidth: function setWidth(w) {},\n    textAlign: function textAlign(align) {\n      return align;\n    },\n    xPlus: function xPlus(x, value) {\n      return x + value;\n    },\n    leftForLtr: function leftForLtr(x, _itemWidth) {\n      return x;\n    }\n  };\n};\n\nfunction getRtlAdapter(rtl, rectX, width) {\n  return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();\n}\n\nfunction overrideTextDirection(ctx, direction) {\n  var style, original;\n\n  if (direction === 'ltr' || direction === 'rtl') {\n    style = ctx.canvas.style;\n    original = [style.getPropertyValue('direction'), style.getPropertyPriority('direction')];\n    style.setProperty('direction', direction, 'important');\n    ctx.prevTextDirection = original;\n  }\n}\n\nfunction restoreTextDirection(ctx, original) {\n  if (original !== undefined) {\n    delete ctx.prevTextDirection;\n    ctx.canvas.style.setProperty('direction', original[0], original[1]);\n  }\n}\n\nfunction propertyFn(property) {\n  if (property === 'angle') {\n    return {\n      between: _angleBetween,\n      compare: _angleDiff,\n      normalize: _normalizeAngle\n    };\n  }\n\n  return {\n    between: function between(n, s, e) {\n      return n >= Math.min(s, e) && n <= Math.max(e, s);\n    },\n    compare: function compare(a, b) {\n      return a - b;\n    },\n    normalize: function normalize(x) {\n      return x;\n    }\n  };\n}\n\nfunction normalizeSegment(_ref) {\n  var start = _ref.start,\n      end = _ref.end,\n      count = _ref.count,\n      loop = _ref.loop,\n      style = _ref.style;\n  return {\n    start: start % count,\n    end: end % count,\n    loop: loop && (end - start + 1) % count === 0,\n    style: style\n  };\n}\n\nfunction getSegment(segment, points, bounds) {\n  var property = bounds.property,\n      startBound = bounds.start,\n      endBound = bounds.end;\n\n  var _propertyFn = propertyFn(property),\n      between = _propertyFn.between,\n      normalize = _propertyFn.normalize;\n\n  var count = points.length;\n  var start = segment.start,\n      end = segment.end,\n      loop = segment.loop;\n  var i, ilen;\n\n  if (loop) {\n    start += count;\n    end += count;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      if (!between(normalize(points[start % count][property]), startBound, endBound)) {\n        break;\n      }\n\n      start--;\n      end--;\n    }\n\n    start %= count;\n    end %= count;\n  }\n\n  if (end < start) {\n    end += count;\n  }\n\n  return {\n    start: start,\n    end: end,\n    loop: loop,\n    style: segment.style\n  };\n}\n\nfunction _boundSegment(segment, points, bounds) {\n  if (!bounds) {\n    return [segment];\n  }\n\n  var property = bounds.property,\n      startBound = bounds.start,\n      endBound = bounds.end;\n  var count = points.length;\n\n  var _propertyFn2 = propertyFn(property),\n      compare = _propertyFn2.compare,\n      between = _propertyFn2.between,\n      normalize = _propertyFn2.normalize;\n\n  var _getSegment = getSegment(segment, points, bounds),\n      start = _getSegment.start,\n      end = _getSegment.end,\n      loop = _getSegment.loop,\n      style = _getSegment.style;\n\n  var result = [];\n  var inside = false;\n  var subStart = null;\n  var value, point, prevValue;\n\n  var startIsBefore = function startIsBefore() {\n    return between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;\n  };\n\n  var endIsBefore = function endIsBefore() {\n    return compare(endBound, value) === 0 || between(endBound, prevValue, value);\n  };\n\n  var shouldStart = function shouldStart() {\n    return inside || startIsBefore();\n  };\n\n  var shouldStop = function shouldStop() {\n    return !inside || endIsBefore();\n  };\n\n  for (var i = start, prev = start; i <= end; ++i) {\n    point = points[i % count];\n\n    if (point.skip) {\n      continue;\n    }\n\n    value = normalize(point[property]);\n\n    if (value === prevValue) {\n      continue;\n    }\n\n    inside = between(value, startBound, endBound);\n\n    if (subStart === null && shouldStart()) {\n      subStart = compare(value, startBound) === 0 ? i : prev;\n    }\n\n    if (subStart !== null && shouldStop()) {\n      result.push(normalizeSegment({\n        start: subStart,\n        end: i,\n        loop: loop,\n        count: count,\n        style: style\n      }));\n      subStart = null;\n    }\n\n    prev = i;\n    prevValue = value;\n  }\n\n  if (subStart !== null) {\n    result.push(normalizeSegment({\n      start: subStart,\n      end: end,\n      loop: loop,\n      count: count,\n      style: style\n    }));\n  }\n\n  return result;\n}\n\nfunction _boundSegments(line, bounds) {\n  var result = [];\n  var segments = line.segments;\n\n  for (var i = 0; i < segments.length; i++) {\n    var sub = _boundSegment(segments[i], line.points, bounds);\n\n    if (sub.length) {\n      result.push.apply(result, Object(_Users_brunoazevedo_programming_Subvisual_snarks_for_the_world_node_modules_next_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(sub));\n    }\n  }\n\n  return result;\n}\n\nfunction findStartAndEnd(points, count, loop, spanGaps) {\n  var start = 0;\n  var end = count - 1;\n\n  if (loop && !spanGaps) {\n    while (start < count && !points[start].skip) {\n      start++;\n    }\n  }\n\n  while (start < count && points[start].skip) {\n    start++;\n  }\n\n  start %= count;\n\n  if (loop) {\n    end += start;\n  }\n\n  while (end > start && points[end % count].skip) {\n    end--;\n  }\n\n  end %= count;\n  return {\n    start: start,\n    end: end\n  };\n}\n\nfunction solidSegments(points, start, max, loop) {\n  var count = points.length;\n  var result = [];\n  var last = start;\n  var prev = points[start];\n  var end;\n\n  for (end = start + 1; end <= max; ++end) {\n    var cur = points[end % count];\n\n    if (cur.skip || cur.stop) {\n      if (!prev.skip) {\n        loop = false;\n        result.push({\n          start: start % count,\n          end: (end - 1) % count,\n          loop: loop\n        });\n        start = last = cur.stop ? end : null;\n      }\n    } else {\n      last = end;\n\n      if (prev.skip) {\n        start = end;\n      }\n    }\n\n    prev = cur;\n  }\n\n  if (last !== null) {\n    result.push({\n      start: start % count,\n      end: last % count,\n      loop: loop\n    });\n  }\n\n  return result;\n}\n\nfunction _computeSegments(line, segmentOptions) {\n  var points = line.points;\n  var spanGaps = line.options.spanGaps;\n  var count = points.length;\n\n  if (!count) {\n    return [];\n  }\n\n  var loop = !!line._loop;\n\n  var _findStartAndEnd = findStartAndEnd(points, count, loop, spanGaps),\n      start = _findStartAndEnd.start,\n      end = _findStartAndEnd.end;\n\n  if (spanGaps === true) {\n    return splitByStyles([{\n      start: start,\n      end: end,\n      loop: loop\n    }], points, segmentOptions);\n  }\n\n  var max = end < start ? end + count : end;\n  var completeLoop = !!line._fullLoop && start === 0 && end === count - 1;\n  return splitByStyles(solidSegments(points, start, max, completeLoop), points, segmentOptions);\n}\n\nfunction splitByStyles(segments, points, segmentOptions) {\n  if (!segmentOptions || !segmentOptions.setContext || !points) {\n    return segments;\n  }\n\n  return doSplitByStyles(segments, points, segmentOptions);\n}\n\nfunction doSplitByStyles(segments, points, segmentOptions) {\n  var count = points.length;\n  var result = [];\n  var start = segments[0].start;\n  var i = start;\n\n  var _iterator9 = _createForOfIteratorHelper(segments),\n      _step9;\n\n  try {\n    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n      var segment = _step9.value;\n      var prevStyle = void 0,\n          style = void 0;\n      var prev = points[start % count];\n\n      for (i = start + 1; i <= segment.end; i++) {\n        var pt = points[i % count];\n        style = readStyle(segmentOptions.setContext({\n          type: 'segment',\n          p0: prev,\n          p1: pt\n        }));\n\n        if (styleChanged(style, prevStyle)) {\n          result.push({\n            start: start,\n            end: i - 1,\n            loop: segment.loop,\n            style: prevStyle\n          });\n          prevStyle = style;\n          start = i - 1;\n        }\n\n        prev = pt;\n        prevStyle = style;\n      }\n\n      if (start < i - 1) {\n        result.push({\n          start: start,\n          end: i - 1,\n          loop: segment.loop,\n          style: style\n        });\n        start = i - 1;\n      }\n    }\n  } catch (err) {\n    _iterator9.e(err);\n  } finally {\n    _iterator9.f();\n  }\n\n  return result;\n}\n\nfunction readStyle(options) {\n  return {\n    backgroundColor: options.backgroundColor,\n    borderCapStyle: options.borderCapStyle,\n    borderDash: options.borderDash,\n    borderDashOffset: options.borderDashOffset,\n    borderJoinStyle: options.borderJoinStyle,\n    borderWidth: options.borderWidth,\n    borderColor: options.borderColor\n  };\n}\n\nfunction styleChanged(style, prevStyle) {\n  return prevStyle && JSON.stringify(style) !== JSON.stringify(prevStyle);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL2Rpc3QvY2h1bmtzL2hlbHBlcnMuc2VnbWVudC5qcz9kZDNkIl0sIm5hbWVzIjpbImZvbnRTdHJpbmciLCJwaXhlbFNpemUiLCJmb250U3R5bGUiLCJmb250RmFtaWx5IiwicmVxdWVzdEFuaW1GcmFtZSIsIndpbmRvdyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInRocm90dGxlZCIsImZuIiwidGhpc0FyZyIsInVwZGF0ZUZuIiwidXBkYXRlQXJncyIsImFyZ3MiLCJBcnJheSIsInByb3RvdHlwZSIsInNsaWNlIiwiY2FsbCIsInRpY2tpbmciLCJyZXN0IiwiYXBwbHkiLCJkZWJvdW5jZSIsImRlbGF5IiwidGltZW91dCIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJfdG9MZWZ0UmlnaHRDZW50ZXIiLCJhbGlnbiIsIl9hbGlnblN0YXJ0RW5kIiwic3RhcnQiLCJlbmQiLCJfdGV4dFgiLCJsZWZ0IiwicmlnaHQiLCJub29wIiwidWlkIiwiaWQiLCJpc051bGxPclVuZGVmIiwidmFsdWUiLCJpc0FycmF5IiwidHlwZSIsIk9iamVjdCIsInRvU3RyaW5nIiwic3Vic3RyIiwiaXNPYmplY3QiLCJpc051bWJlckZpbml0ZSIsIk51bWJlciIsImlzRmluaXRlIiwiZmluaXRlT3JEZWZhdWx0IiwiZGVmYXVsdFZhbHVlIiwidmFsdWVPckRlZmF1bHQiLCJ0b1BlcmNlbnRhZ2UiLCJkaW1lbnNpb24iLCJlbmRzV2l0aCIsInBhcnNlRmxvYXQiLCJ0b0RpbWVuc2lvbiIsImNhbGxiYWNrIiwiZWFjaCIsImxvb3BhYmxlIiwicmV2ZXJzZSIsImkiLCJsZW4iLCJrZXlzIiwibGVuZ3RoIiwiX2VsZW1lbnRzRXF1YWwiLCJhMCIsImExIiwiaWxlbiIsInYwIiwidjEiLCJkYXRhc2V0SW5kZXgiLCJpbmRleCIsImNsb25lJDEiLCJzb3VyY2UiLCJtYXAiLCJ0YXJnZXQiLCJjcmVhdGUiLCJrbGVuIiwiayIsImlzVmFsaWRLZXkiLCJrZXkiLCJpbmRleE9mIiwiX21lcmdlciIsIm9wdGlvbnMiLCJ0dmFsIiwic3ZhbCIsIm1lcmdlIiwic291cmNlcyIsIm1lcmdlciIsIm1lcmdlSWYiLCJfbWVyZ2VySWYiLCJoYXNPd25Qcm9wZXJ0eSIsIl9kZXByZWNhdGVkIiwic2NvcGUiLCJwcmV2aW91cyIsImN1cnJlbnQiLCJ1bmRlZmluZWQiLCJjb25zb2xlIiwid2FybiIsImVtcHR5U3RyaW5nIiwiZG90IiwiaW5kZXhPZkRvdE9yTGVuZ3RoIiwiaWR4IiwicmVzb2x2ZU9iamVjdEtleSIsIm9iaiIsInBvcyIsIl9jYXBpdGFsaXplIiwic3RyIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJkZWZpbmVkIiwiaXNGdW5jdGlvbiIsInNldHNFcXVhbCIsImEiLCJiIiwic2l6ZSIsIml0ZW0iLCJoYXMiLCJQSSIsIk1hdGgiLCJUQVUiLCJQSVRBVSIsIklORklOSVRZIiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJSQURfUEVSX0RFRyIsIkhBTEZfUEkiLCJRVUFSVEVSX1BJIiwiVFdPX1RISVJEU19QSSIsImxvZzEwIiwic2lnbiIsIm5pY2VOdW0iLCJyYW5nZSIsIm5pY2VSYW5nZSIsInBvdyIsImZsb29yIiwiZnJhY3Rpb24iLCJuaWNlRnJhY3Rpb24iLCJfZmFjdG9yaXplIiwicmVzdWx0Iiwic3FydCIsInB1c2giLCJzb3J0IiwicG9wIiwiaXNOdW1iZXIiLCJuIiwiaXNOYU4iLCJhbG1vc3RFcXVhbHMiLCJ4IiwieSIsImVwc2lsb24iLCJhYnMiLCJhbG1vc3RXaG9sZSIsInJvdW5kZWQiLCJyb3VuZCIsIl9zZXRNaW5BbmRNYXhCeUtleSIsImFycmF5IiwicHJvcGVydHkiLCJtaW4iLCJtYXgiLCJ0b1JhZGlhbnMiLCJkZWdyZWVzIiwidG9EZWdyZWVzIiwicmFkaWFucyIsIl9kZWNpbWFsUGxhY2VzIiwiZSIsInAiLCJnZXRBbmdsZUZyb21Qb2ludCIsImNlbnRyZVBvaW50IiwiYW5nbGVQb2ludCIsImRpc3RhbmNlRnJvbVhDZW50ZXIiLCJkaXN0YW5jZUZyb21ZQ2VudGVyIiwicmFkaWFsRGlzdGFuY2VGcm9tQ2VudGVyIiwiYW5nbGUiLCJhdGFuMiIsImRpc3RhbmNlIiwiZGlzdGFuY2VCZXR3ZWVuUG9pbnRzIiwicHQxIiwicHQyIiwiX2FuZ2xlRGlmZiIsIl9ub3JtYWxpemVBbmdsZSIsIl9hbmdsZUJldHdlZW4iLCJzYW1lQW5nbGVJc0Z1bGxDaXJjbGUiLCJzIiwiYW5nbGVUb1N0YXJ0IiwiYW5nbGVUb0VuZCIsInN0YXJ0VG9BbmdsZSIsImVuZFRvQW5nbGUiLCJfbGltaXRWYWx1ZSIsIl9pbnQxNlJhbmdlIiwiYXRFZGdlIiwidCIsImVsYXN0aWNJbiIsInNpbiIsImVsYXN0aWNPdXQiLCJlZmZlY3RzIiwibGluZWFyIiwiZWFzZUluUXVhZCIsImVhc2VPdXRRdWFkIiwiZWFzZUluT3V0UXVhZCIsImVhc2VJbkN1YmljIiwiZWFzZU91dEN1YmljIiwiZWFzZUluT3V0Q3ViaWMiLCJlYXNlSW5RdWFydCIsImVhc2VPdXRRdWFydCIsImVhc2VJbk91dFF1YXJ0IiwiZWFzZUluUXVpbnQiLCJlYXNlT3V0UXVpbnQiLCJlYXNlSW5PdXRRdWludCIsImVhc2VJblNpbmUiLCJjb3MiLCJlYXNlT3V0U2luZSIsImVhc2VJbk91dFNpbmUiLCJlYXNlSW5FeHBvIiwiZWFzZU91dEV4cG8iLCJlYXNlSW5PdXRFeHBvIiwiZWFzZUluQ2lyYyIsImVhc2VPdXRDaXJjIiwiZWFzZUluT3V0Q2lyYyIsImVhc2VJbkVsYXN0aWMiLCJlYXNlT3V0RWxhc3RpYyIsImVhc2VJbk91dEVsYXN0aWMiLCJlYXNlSW5CYWNrIiwiZWFzZU91dEJhY2siLCJlYXNlSW5PdXRCYWNrIiwiZWFzZUluQm91bmNlIiwiZWFzZU91dEJvdW5jZSIsIm0iLCJkIiwiZWFzZUluT3V0Qm91bmNlIiwiQSIsIkIiLCJDIiwiRCIsIkUiLCJGIiwiYyIsImYiLCJoZXgiLCJoMSIsImgyIiwiZXEiLCJpc1Nob3J0IiwidiIsInIiLCJnIiwiaGV4UGFyc2UiLCJyZXQiLCJoZXhTdHJpbmciLCJsaW0iLCJsIiwiaCIsInAyYiIsIm4yYiIsImIybiIsIm4ycCIsIlJHQl9SRSIsInJnYlBhcnNlIiwiZXhlYyIsInJnYlN0cmluZyIsIkhVRV9SRSIsImhzbDJyZ2JuIiwiaHN2MnJnYm4iLCJod2IycmdibiIsInciLCJyZ2IiLCJyZ2IyaHNsIiwiY2FsbG4iLCJoc2wycmdiIiwiaHdiMnJnYiIsImhzdjJyZ2IiLCJodWUiLCJodWVQYXJzZSIsInAxIiwicDIiLCJyb3RhdGUiLCJkZWciLCJoc2xTdHJpbmciLCJtYXAkMSIsIloiLCJZIiwiWCIsIlciLCJWIiwiVSIsIlQiLCJTIiwiUiIsIlEiLCJQIiwiTyIsIk4iLCJNIiwiTCIsIksiLCJHIiwiSCIsIkkiLCJKIiwibmFtZXMiLCJPaWNlWGUiLCJhbnRpcXVld0V0ZSIsImFxdWEiLCJhcXVhbWFyUmUiLCJhenVZIiwiYmVpZ2UiLCJiaXNxdWUiLCJibGFjayIsImJsYW5LZWRPbW9uZCIsIlhlIiwiWGV2aVRldCIsImJQd24iLCJidXJseXdvb2QiLCJjYU10WGUiLCJLYXJ0WXVzZSIsIktvY1RhdGUiLCJjU08iLCJjU25mbG93ZXJYZSIsImNTbnNpbGsiLCJjcmltc29uIiwiY3lhbiIsInhYZSIsInhjeWFuIiwieGdUTW5QZCIsInhXYXkiLCJ4Z1lGIiwieGdZeSIsInhraGFraSIsInhtYWdGdGEiLCJ4VGl2ZWdZRiIsInhTYW5nZSIsInhTY0VkIiwieFlkIiwieHNPbW9uIiwieHNIZ1lGIiwieFVYZSIsInhVV2F5IiwieFVnWXkiLCJ4UWUiLCJ4dmlUZXQiLCJkQXBwUmsiLCJkQXBza3lYZSIsImRpbVdheSIsImRpbWdZeSIsImRvZGdlclhlIiwiZmlZYnJpY2siLCJmbFNPd0V0ZSIsImZvWXN0V0FuIiwiZnVLc2lhIiwiZ2FSc2JTbyIsImdob3N0d0V0ZSIsImdUZCIsImdUTW5QZCIsIldheSIsImdZRiIsImdZRkx3IiwiZ1l5IiwiaG9uZXlNdyIsImhvdHBSayIsIlJkaWFuWWQiLCJSZGlnbyIsIml2U3kiLCJraGFraSIsImxhdkZNciIsImxhdkZNclhzaCIsImxhd25nWUYiLCJObW9uY0VmZm9uIiwiWlhlIiwiWmNTTyIsIlpjeWFuIiwiWmdUTW5QZEx3IiwiWldheSIsIlpnWUYiLCJaZ1l5IiwiWnBSayIsIlpzT21vbiIsIlpzSGdZRiIsIlpza3lYZSIsIlpVV2F5IiwiWlVnWXkiLCJac3RBbFhlIiwiWkx3IiwibGltZSIsImxpbWVnWUYiLCJsUkYiLCJtYWdGdGEiLCJtYVBvbiIsIlZhcXVhbWFyUmUiLCJWWGUiLCJWU2NFZCIsIlZwdXJwTiIsIlZzSGdZRiIsIlZVWGUiLCJWc3ByUmdnWUYiLCJWUWUiLCJWdmlUZXRZZCIsIm1pZG5pZ2h0WGUiLCJtUnRjWWFtIiwibWlzdHlQc2UiLCJtb2NjYXNSIiwibmF2YWpvd0V0ZSIsIm5hdnkiLCJUZGxhY2UiLCJUaXZlIiwiVGl2ZWRCYiIsIlNhbmdlIiwiU2FuZ2VZZCIsIlNjRWQiLCJwT2VnVE1uUGQiLCJwT2VnWUYiLCJwT2VRZSIsInBPZXZpVGV0WWQiLCJwYXBheWF3RXAiLCJwSEtwdWZmIiwicGVydSIsInBSayIsInBsdW0iLCJwb3dNclhlIiwicHVycE4iLCJZYmVjY2FwdXJwTiIsIllkIiwiUHN5YnJvd24iLCJQeU9YZSIsInNhZGROYlB3biIsInNPbW9uIiwic2FuZHliUHduIiwic0hnWUYiLCJzSHNoZWxsIiwic2lGbmEiLCJzaWx2ZXIiLCJza3lYZSIsIlVYZSIsIlVXYXkiLCJVZ1l5Iiwic25vdyIsInNwclJnZ1lGIiwic3RBbFhlIiwidGFuIiwidGVPIiwidEVzdE4iLCJ0b21hdG8iLCJRZSIsInZpVGV0IiwiSkh0Iiwid0V0ZSIsIndFdGVzbW9rZSIsIkx3IiwiTHdnWUYiLCJ1bnBhY2siLCJ1bnBhY2tlZCIsInRrZXlzIiwiaiIsIm9rIiwibmsiLCJyZXBsYWNlIiwicGFyc2VJbnQiLCJuYW1lcyQxIiwibmFtZVBhcnNlIiwidHJhbnNwYXJlbnQiLCJ0b0xvd2VyQ2FzZSIsIm1vZEhTTCIsInJhdGlvIiwidG1wIiwiY2xvbmUiLCJwcm90byIsImFzc2lnbiIsImZyb21PYmplY3QiLCJpbnB1dCIsImZ1bmN0aW9uUGFyc2UiLCJDb2xvciIsIl9yZ2IiLCJfdmFsaWQiLCJjb2xvciIsIndlaWdodCIsIm1lIiwiYzEiLCJjMiIsIncyIiwidzEiLCJ2YWwiLCJpbmRleF9lc20iLCJpc1BhdHRlcm5PckdyYWRpZW50IiwiQ2FudmFzR3JhZGllbnQiLCJDYW52YXNQYXR0ZXJuIiwiZ2V0SG92ZXJDb2xvciIsInNhdHVyYXRlIiwiZGFya2VuIiwib3ZlcnJpZGVzIiwiZGVzY3JpcHRvcnMiLCJnZXRTY29wZSQxIiwibm9kZSIsInNwbGl0Iiwic2V0Iiwicm9vdCIsInZhbHVlcyIsIkRlZmF1bHRzIiwiX2Rlc2NyaXB0b3JzIiwiYW5pbWF0aW9uIiwiYmFja2dyb3VuZENvbG9yIiwiYm9yZGVyQ29sb3IiLCJkYXRhc2V0cyIsImRldmljZVBpeGVsUmF0aW8iLCJjb250ZXh0IiwiY2hhcnQiLCJwbGF0Zm9ybSIsImdldERldmljZVBpeGVsUmF0aW8iLCJlbGVtZW50cyIsImV2ZW50cyIsImZvbnQiLCJmYW1pbHkiLCJzdHlsZSIsImxpbmVIZWlnaHQiLCJob3ZlciIsImhvdmVyQmFja2dyb3VuZENvbG9yIiwiY3R4IiwiaG92ZXJCb3JkZXJDb2xvciIsImhvdmVyQ29sb3IiLCJpbmRleEF4aXMiLCJpbnRlcmFjdGlvbiIsIm1vZGUiLCJpbnRlcnNlY3QiLCJtYWludGFpbkFzcGVjdFJhdGlvIiwib25Ib3ZlciIsIm9uQ2xpY2siLCJwYXJzaW5nIiwicGx1Z2lucyIsInJlc3BvbnNpdmUiLCJzY2FsZSIsInNjYWxlcyIsInNob3dMaW5lIiwiZGVzY3JpYmUiLCJuYW1lIiwidGFyZ2V0U2NvcGUiLCJ0YXJnZXROYW1lIiwic2NvcGVPYmplY3QiLCJ0YXJnZXRTY29wZU9iamVjdCIsInByaXZhdGVOYW1lIiwiZGVmaW5lUHJvcGVydGllcyIsIndyaXRhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsImxvY2FsIiwiZGVmYXVsdHMiLCJfc2NyaXB0YWJsZSIsInN0YXJ0c1dpdGgiLCJfaW5kZXhhYmxlIiwiX2ZhbGxiYWNrIiwidG9Gb250U3RyaW5nIiwiX21lYXN1cmVUZXh0IiwiZGF0YSIsImdjIiwibG9uZ2VzdCIsInN0cmluZyIsInRleHRXaWR0aCIsIm1lYXN1cmVUZXh0Iiwid2lkdGgiLCJfbG9uZ2VzdFRleHQiLCJhcnJheU9mVGhpbmdzIiwiY2FjaGUiLCJnYXJiYWdlQ29sbGVjdCIsInNhdmUiLCJqbGVuIiwidGhpbmciLCJuZXN0ZWRUaGluZyIsInJlc3RvcmUiLCJnY0xlbiIsInNwbGljZSIsIl9hbGlnblBpeGVsIiwicGl4ZWwiLCJjdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyIsImhhbGZXaWR0aCIsImNsZWFyQ2FudmFzIiwiY2FudmFzIiwiZ2V0Q29udGV4dCIsInJlc2V0VHJhbnNmb3JtIiwiY2xlYXJSZWN0IiwiaGVpZ2h0IiwiZHJhd1BvaW50IiwieE9mZnNldCIsInlPZmZzZXQiLCJjb3JuZXJSYWRpdXMiLCJwb2ludFN0eWxlIiwicm90YXRpb24iLCJyYWRpdXMiLCJyYWQiLCJ0cmFuc2xhdGUiLCJkcmF3SW1hZ2UiLCJiZWdpblBhdGgiLCJhcmMiLCJjbG9zZVBhdGgiLCJtb3ZlVG8iLCJsaW5lVG8iLCJTUVJUMV8yIiwicmVjdCIsImZpbGwiLCJib3JkZXJXaWR0aCIsInN0cm9rZSIsIl9pc1BvaW50SW5BcmVhIiwicG9pbnQiLCJhcmVhIiwibWFyZ2luIiwidG9wIiwiYm90dG9tIiwiY2xpcEFyZWEiLCJjbGlwIiwidW5jbGlwQXJlYSIsIl9zdGVwcGVkTGluZVRvIiwiZmxpcCIsIm1pZHBvaW50IiwiX2JlemllckN1cnZlVG8iLCJiZXppZXJDdXJ2ZVRvIiwiY3AxeCIsImNwMngiLCJjcDF5IiwiY3AyeSIsInJlbmRlclRleHQiLCJ0ZXh0Iiwib3B0cyIsImxpbmVzIiwic3Ryb2tlV2lkdGgiLCJzdHJva2VDb2xvciIsImxpbmUiLCJ0cmFuc2xhdGlvbiIsImZpbGxTdHlsZSIsInRleHRBbGlnbiIsInRleHRCYXNlbGluZSIsInN0cm9rZVN0eWxlIiwibGluZVdpZHRoIiwic3Ryb2tlVGV4dCIsIm1heFdpZHRoIiwiZmlsbFRleHQiLCJzdHJpa2V0aHJvdWdoIiwidW5kZXJsaW5lIiwibWV0cmljcyIsImFjdHVhbEJvdW5kaW5nQm94TGVmdCIsImFjdHVhbEJvdW5kaW5nQm94UmlnaHQiLCJhY3R1YWxCb3VuZGluZ0JveEFzY2VudCIsImFjdHVhbEJvdW5kaW5nQm94RGVzY2VudCIsInlEZWNvcmF0aW9uIiwiZGVjb3JhdGlvbldpZHRoIiwiYWRkUm91bmRlZFJlY3RQYXRoIiwidG9wTGVmdCIsImJvdHRvbUxlZnQiLCJib3R0b21SaWdodCIsInRvcFJpZ2h0IiwiTElORV9IRUlHSFQiLCJSZWdFeHAiLCJGT05UX1NUWUxFIiwidG9MaW5lSGVpZ2h0IiwibWF0Y2hlcyIsIm1hdGNoIiwibnVtYmVyT3JaZXJvIiwiX3JlYWRWYWx1ZVRvUHJvcHMiLCJwcm9wcyIsIm9ialByb3BzIiwicmVhZCIsInByb3AiLCJ0b1RSQkwiLCJ0b1RSQkxDb3JuZXJzIiwidG9QYWRkaW5nIiwidG9Gb250IiwiZmFsbGJhY2siLCJyZXNvbHZlIiwiaW5wdXRzIiwiaW5mbyIsImNhY2hlYWJsZSIsIl9hZGRHcmFjZSIsIm1pbm1heCIsImdyYWNlIiwiX2xvb2t1cCIsInRhYmxlIiwiY21wIiwiaGkiLCJsbyIsIm1pZCIsIl9sb29rdXBCeUtleSIsIl9ybG9va3VwQnlLZXkiLCJfZmlsdGVyQmV0d2VlbiIsImFycmF5RXZlbnRzIiwibGlzdGVuQXJyYXlFdmVudHMiLCJsaXN0ZW5lciIsIl9jaGFydGpzIiwibGlzdGVuZXJzIiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJmb3JFYWNoIiwibWV0aG9kIiwiYmFzZSIsInJlcyIsIm9iamVjdCIsInVubGlzdGVuQXJyYXlFdmVudHMiLCJzdHViIiwiX2FycmF5VW5pcXVlIiwiaXRlbXMiLCJTZXQiLCJhZGQiLCJfY3JlYXRlUmVzb2x2ZXIiLCJzY29wZXMiLCJwcmVmaXhlcyIsInJvb3RTY29wZXMiLCJnZXRUYXJnZXQiLCJfcmVzb2x2ZSIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiUHJveHkiLCJkZWxldGVQcm9wZXJ0eSIsIl9rZXlzIiwiX2NhY2hlZCIsIl9yZXNvbHZlV2l0aFByZWZpeGVzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiUmVmbGVjdCIsIl9zY29wZXMiLCJnZXRQcm90b3R5cGVPZiIsImdldEtleXNGcm9tQWxsU2NvcGVzIiwiaW5jbHVkZXMiLCJvd25LZXlzIiwic3RvcmFnZSIsIl9zdG9yYWdlIiwiX2F0dGFjaENvbnRleHQiLCJwcm94eSIsInN1YlByb3h5IiwiZGVzY3JpcHRvckRlZmF1bHRzIiwiX2NhY2hlYWJsZSIsIl9wcm94eSIsIl9jb250ZXh0IiwiX3N1YlByb3h5IiwiX3N0YWNrIiwic2V0Q29udGV4dCIsIm92ZXJyaWRlIiwicmVjZWl2ZXIiLCJfcmVzb2x2ZVdpdGhDb250ZXh0IiwiYWxsS2V5cyIsInNjcmlwdGFibGUiLCJpbmRleGFibGUiLCJfYWxsS2V5cyIsImlzU2NyaXB0YWJsZSIsImlzSW5kZXhhYmxlIiwicmVhZEtleSIsInByZWZpeCIsIm5lZWRzU3ViUmVzb2x2ZXIiLCJfcmVzb2x2ZVNjcmlwdGFibGUiLCJfcmVzb2x2ZUFycmF5IiwiRXJyb3IiLCJqb2luIiwiY3JlYXRlU3ViUmVzb2x2ZXIiLCJhcnIiLCJmaWx0ZXIiLCJyZXNvbHZlciIsInJlc29sdmVGYWxsYmFjayIsImdldFNjb3BlIiwicGFyZW50IiwiYWRkU2NvcGVzIiwicGFyZW50U2NvcGVzIiwicGFyZW50RmFsbGJhY2siLCJfcm9vdFNjb3BlcyIsImFsbFNjb3BlcyIsImFkZFNjb3Blc0Zyb21LZXkiLCJzdWJHZXRUYXJnZXQiLCJfZ2V0VGFyZ2V0IiwicmVzb2x2ZUtleXNGcm9tQWxsU2NvcGVzIiwiRVBTSUxPTiIsImdldFBvaW50IiwicG9pbnRzIiwic2tpcCIsImdldFZhbHVlQXhpcyIsInNwbGluZUN1cnZlIiwiZmlyc3RQb2ludCIsIm1pZGRsZVBvaW50IiwiYWZ0ZXJQb2ludCIsIm5leHQiLCJkMDEiLCJkMTIiLCJzMDEiLCJzMTIiLCJmYSIsImZiIiwibW9ub3RvbmVBZGp1c3QiLCJkZWx0YUsiLCJtSyIsInBvaW50c0xlbiIsImFscGhhSyIsImJldGFLIiwidGF1SyIsInNxdWFyZWRNYWduaXR1ZGUiLCJwb2ludEN1cnJlbnQiLCJwb2ludEFmdGVyIiwibW9ub3RvbmVDb21wdXRlIiwidmFsdWVBeGlzIiwiZGVsdGEiLCJwb2ludEJlZm9yZSIsImlQaXhlbCIsInZQaXhlbCIsInNwbGluZUN1cnZlTW9ub3RvbmUiLCJzbG9wZURlbHRhIiwiY2FwQ29udHJvbFBvaW50IiwicHQiLCJjYXBCZXppZXJQb2ludHMiLCJpbkFyZWEiLCJpbkFyZWFQcmV2IiwiaW5BcmVhTmV4dCIsIl91cGRhdGVCZXppZXJDb250cm9sUG9pbnRzIiwibG9vcCIsImNvbnRyb2xQb2ludHMiLCJzcGFuR2FwcyIsImN1YmljSW50ZXJwb2xhdGlvbk1vZGUiLCJwcmV2IiwidGVuc2lvbiIsIl9nZXRQYXJlbnROb2RlIiwiZG9tTm9kZSIsInBhcmVudE5vZGUiLCJob3N0IiwicGFyc2VNYXhTdHlsZSIsInN0eWxlVmFsdWUiLCJwYXJlbnRQcm9wZXJ0eSIsInZhbHVlSW5QaXhlbHMiLCJnZXRDb21wdXRlZFN0eWxlIiwiZWxlbWVudCIsImdldFN0eWxlIiwiZWwiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicG9zaXRpb25zIiwiZ2V0UG9zaXRpb25lZFN0eWxlIiwic3R5bGVzIiwic3VmZml4IiwidXNlT2Zmc2V0UG9zIiwic2hhZG93Um9vdCIsImdldENhbnZhc1Bvc2l0aW9uIiwiZXZ0IiwidG91Y2hlcyIsIm9mZnNldFgiLCJvZmZzZXRZIiwiYm94IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY2xpZW50WCIsImNsaWVudFkiLCJnZXRSZWxhdGl2ZVBvc2l0aW9uIiwiYm9yZGVyQm94IiwiYm94U2l6aW5nIiwicGFkZGluZ3MiLCJib3JkZXJzIiwiZ2V0Q29udGFpbmVyU2l6ZSIsIm1heEhlaWdodCIsImNvbnRhaW5lciIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwiY29udGFpbmVyU3R5bGUiLCJjb250YWluZXJCb3JkZXIiLCJjb250YWluZXJQYWRkaW5nIiwicm91bmQxIiwiZ2V0TWF4aW11bVNpemUiLCJiYldpZHRoIiwiYmJIZWlnaHQiLCJhc3BlY3RSYXRpbyIsIm1hcmdpbnMiLCJjb250YWluZXJTaXplIiwicmV0aW5hU2NhbGUiLCJmb3JjZVJhdGlvIiwiZm9yY2VTdHlsZSIsInBpeGVsUmF0aW8iLCJkZXZpY2VIZWlnaHQiLCJkZXZpY2VXaWR0aCIsInNldFRyYW5zZm9ybSIsInN1cHBvcnRzRXZlbnRMaXN0ZW5lck9wdGlvbnMiLCJwYXNzaXZlU3VwcG9ydGVkIiwicGFzc2l2ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVhZFVzZWRTaXplIiwiX3BvaW50SW5MaW5lIiwiX3N0ZXBwZWRJbnRlcnBvbGF0aW9uIiwiX2JlemllckludGVycG9sYXRpb24iLCJjcDEiLCJjcDIiLCJpbnRsQ2FjaGUiLCJNYXAiLCJnZXROdW1iZXJGb3JtYXQiLCJsb2NhbGUiLCJjYWNoZUtleSIsIkpTT04iLCJzdHJpbmdpZnkiLCJmb3JtYXR0ZXIiLCJJbnRsIiwiTnVtYmVyRm9ybWF0IiwiZm9ybWF0TnVtYmVyIiwibnVtIiwiZm9ybWF0IiwiZ2V0UmlnaHRUb0xlZnRBZGFwdGVyIiwicmVjdFgiLCJzZXRXaWR0aCIsInhQbHVzIiwibGVmdEZvckx0ciIsIml0ZW1XaWR0aCIsImdldExlZnRUb1JpZ2h0QWRhcHRlciIsIl9pdGVtV2lkdGgiLCJnZXRSdGxBZGFwdGVyIiwicnRsIiwib3ZlcnJpZGVUZXh0RGlyZWN0aW9uIiwiZGlyZWN0aW9uIiwib3JpZ2luYWwiLCJnZXRQcm9wZXJ0eVByaW9yaXR5Iiwic2V0UHJvcGVydHkiLCJwcmV2VGV4dERpcmVjdGlvbiIsInJlc3RvcmVUZXh0RGlyZWN0aW9uIiwicHJvcGVydHlGbiIsImJldHdlZW4iLCJjb21wYXJlIiwibm9ybWFsaXplIiwibm9ybWFsaXplU2VnbWVudCIsImNvdW50IiwiZ2V0U2VnbWVudCIsInNlZ21lbnQiLCJib3VuZHMiLCJzdGFydEJvdW5kIiwiZW5kQm91bmQiLCJfYm91bmRTZWdtZW50IiwiaW5zaWRlIiwic3ViU3RhcnQiLCJwcmV2VmFsdWUiLCJzdGFydElzQmVmb3JlIiwiZW5kSXNCZWZvcmUiLCJzaG91bGRTdGFydCIsInNob3VsZFN0b3AiLCJfYm91bmRTZWdtZW50cyIsInNlZ21lbnRzIiwic3ViIiwiZmluZFN0YXJ0QW5kRW5kIiwic29saWRTZWdtZW50cyIsImxhc3QiLCJjdXIiLCJzdG9wIiwiX2NvbXB1dGVTZWdtZW50cyIsInNlZ21lbnRPcHRpb25zIiwiX2xvb3AiLCJzcGxpdEJ5U3R5bGVzIiwiY29tcGxldGVMb29wIiwiX2Z1bGxMb29wIiwiZG9TcGxpdEJ5U3R5bGVzIiwicHJldlN0eWxlIiwicmVhZFN0eWxlIiwicDAiLCJzdHlsZUNoYW5nZWQiLCJib3JkZXJDYXBTdHlsZSIsImJvcmRlckRhc2giLCJib3JkZXJEYXNoT2Zmc2V0IiwiYm9yZGVySm9pblN0eWxlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQSxVQUFULENBQW9CQyxTQUFwQixFQUErQkMsU0FBL0IsRUFBMENDLFVBQTFDLEVBQXNEO0FBQ3BELFNBQU9ELFNBQVMsR0FBRyxHQUFaLEdBQWtCRCxTQUFsQixHQUE4QixLQUE5QixHQUFzQ0UsVUFBN0M7QUFDRDs7QUFDRCxJQUFNQyxnQkFBZ0IsR0FBSSxZQUFXO0FBQ25DLGFBQW1DLEVBSWxDOztBQUNELFNBQU9DLE1BQU0sQ0FBQ0MscUJB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Q0FBWjtBQUNEO0FBQ0Y7QUF2QndEO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBd0J6RCxTQUFPOEUsTUFBUDtBQUNEOztBQUNELFNBQVMreEIsU0FBVCxDQUFtQnQxQixPQUFuQixFQUE0QjtBQUMxQixTQUFPO0FBQ0w4WixtQkFBZSxFQUFFOVosT0FBTyxDQUFDOFosZUFEcEI7QUFFTDJiLGtCQUFjLEVBQUV6MUIsT0FBTyxDQUFDeTFCLGNBRm5CO0FBR0xDLGNBQVUsRUFBRTExQixPQUFPLENBQUMwMUIsVUFIZjtBQUlMQyxvQkFBZ0IsRUFBRTMxQixPQUFPLENBQUMyMUIsZ0JBSnJCO0FBS0xDLG1CQUFlLEVBQUU1MUIsT0FBTyxDQUFDNDFCLGVBTHBCO0FBTUw3VixlQUFXLEVBQUUvZixPQUFPLENBQUMrZixXQU5oQjtBQU9MaEcsZUFBVyxFQUFFL1osT0FBTyxDQUFDK1o7QUFQaEIsR0FBUDtBQVNEOztBQUNELFNBQVN5YixZQUFULENBQXNCOWEsS0FBdEIsRUFBNkIyYSxTQUE3QixFQUF3QztBQUN0QyxTQUFPQSxTQUFTLElBQUkzRCxJQUFJLENBQUNDLFNBQUwsQ0FBZWpYLEtBQWYsTUFBMEJnWCxJQUFJLENBQUNDLFNBQUwsQ0FBZTBELFNBQWYsQ0FBOUM7QUFDRCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9jaGFydC5qcy9kaXN0L2NodW5rcy9oZWxwZXJzLnNlZ21lbnQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIENoYXJ0LmpzIHYzLjMuMlxuICogaHR0cHM6Ly93d3cuY2hhcnRqcy5vcmdcbiAqIChjKSAyMDIxIENoYXJ0LmpzIENvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKi9cbmZ1bmN0aW9uIGZvbnRTdHJpbmcocGl4ZWxTaXplLCBmb250U3R5bGUsIGZvbnRGYW1pbHkpIHtcbiAgcmV0dXJuIGZvbnRTdHlsZSArICcgJyArIHBpeGVsU2l6ZSArICdweCAnICsgZm9udEZhbWlseTtcbn1cbmNvbnN0IHJlcXVlc3RBbmltRnJhbWUgPSAoZnVuY3Rpb24oKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZTtcbn0oKSk7XG5mdW5jdGlvbiB0aHJvdHRsZWQoZm4sIHRoaXNBcmcsIHVwZGF0ZUZuKSB7XG4gIGNvbnN0IHVwZGF0ZUFyZ3MgPSB1cGRhdGVGbiB8fCAoKGFyZ3MpID0+IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3MpKTtcbiAgbGV0IHRpY2tpbmcgPSBmYWxzZTtcbiAgbGV0IGFyZ3MgPSBbXTtcbiAgcmV0dXJuIGZ1bmN0aW9uKC4uLnJlc3QpIHtcbiAgICBhcmdzID0gdXBkYXRlQXJncyhyZXN0KTtcbiAgICBpZiAoIXRpY2tpbmcpIHtcbiAgICAgIHRpY2tpbmcgPSB0cnVlO1xuICAgICAgcmVxdWVzdEFuaW1GcmFtZS5jYWxsKHdpbmRvdywgKCkgPT4ge1xuICAgICAgICB0aWNraW5nID0gZmFsc2U7XG4gICAgICAgIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gZGVib3VuY2UoZm4sIGRlbGF5KSB7XG4gIGxldCB0aW1lb3V0O1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgaWYgKGRlbGF5KSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChmbiwgZGVsYXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmbigpO1xuICAgIH1cbiAgICByZXR1cm4gZGVsYXk7XG4gIH07XG59XG5jb25zdCBfdG9MZWZ0UmlnaHRDZW50ZXIgPSAoYWxpZ24pID0+IGFsaWduID09PSAnc3RhcnQnID8gJ2xlZnQnIDogYWxpZ24gPT09ICdlbmQnID8gJ3JpZ2h0JyA6ICdjZW50ZXInO1xuY29uc3QgX2FsaWduU3RhcnRFbmQgPSAoYWxpZ24sIHN0YXJ0LCBlbmQpID0+IGFsaWduID09PSAnc3RhcnQnID8gc3RhcnQgOiBhbGlnbiA9PT0gJ2VuZCcgPyBlbmQgOiAoc3RhcnQgKyBlbmQpIC8gMjtcbmNvbnN0IF90ZXh0WCA9IChhbGlnbiwgbGVmdCwgcmlnaHQpID0+IGFsaWduID09PSAncmlnaHQnID8gcmlnaHQgOiBhbGlnbiA9PT0gJ2NlbnRlcicgPyAobGVmdCArIHJpZ2h0KSAvIDIgOiBsZWZ0O1xuXG5mdW5jdGlvbiBub29wKCkge31cbmNvbnN0IHVpZCA9IChmdW5jdGlvbigpIHtcbiAgbGV0IGlkID0gMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBpZCsrO1xuICB9O1xufSgpKTtcbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWYodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCc7XG59XG5mdW5jdGlvbiBpc0FycmF5KHZhbHVlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5ICYmIEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgY29uc3QgdHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh0eXBlLnN1YnN0cigwLCA3KSA9PT0gJ1tvYmplY3QnICYmIHR5cGUuc3Vic3RyKC02KSA9PT0gJ0FycmF5XScpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XG59XG5jb25zdCBpc051bWJlckZpbml0ZSA9ICh2YWx1ZSkgPT4gKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHwgdmFsdWUgaW5zdGFuY2VvZiBOdW1iZXIpICYmIGlzRmluaXRlKCt2YWx1ZSk7XG5mdW5jdGlvbiBmaW5pdGVPckRlZmF1bHQodmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICByZXR1cm4gaXNOdW1iZXJGaW5pdGUodmFsdWUpID8gdmFsdWUgOiBkZWZhdWx0VmFsdWU7XG59XG5mdW5jdGlvbiB2YWx1ZU9yRGVmYXVsdCh2YWx1ZSwgZGVmYXVsdFZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gZGVmYXVsdFZhbHVlIDogdmFsdWU7XG59XG5jb25zdCB0b1BlcmNlbnRhZ2UgPSAodmFsdWUsIGRpbWVuc2lvbikgPT5cbiAgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS5lbmRzV2l0aCgnJScpID9cbiAgICBwYXJzZUZsb2F0KHZhbHVlKSAvIDEwMFxuICAgIDogdmFsdWUgLyBkaW1lbnNpb247XG5jb25zdCB0b0RpbWVuc2lvbiA9ICh2YWx1ZSwgZGltZW5zaW9uKSA9PlxuICB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlLmVuZHNXaXRoKCclJykgP1xuICAgIHBhcnNlRmxvYXQodmFsdWUpIC8gMTAwICogZGltZW5zaW9uXG4gICAgOiArdmFsdWU7XG5mdW5jdGlvbiBjYWxsYmFjayhmbiwgYXJncywgdGhpc0FyZykge1xuICBpZiAoZm4gJiYgdHlwZW9mIGZuLmNhbGwgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH1cbn1cbmZ1bmN0aW9uIGVhY2gobG9vcGFibGUsIGZuLCB0aGlzQXJnLCByZXZlcnNlKSB7XG4gIGxldCBpLCBsZW4sIGtleXM7XG4gIGlmIChpc0FycmF5KGxvb3BhYmxlKSkge1xuICAgIGxlbiA9IGxvb3BhYmxlLmxlbmd0aDtcbiAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgZm4uY2FsbCh0aGlzQXJnLCBsb29wYWJsZVtpXSwgaSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBmbi5jYWxsKHRoaXNBcmcsIGxvb3BhYmxlW2ldLCBpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QobG9vcGFibGUpKSB7XG4gICAga2V5cyA9IE9iamVjdC5rZXlzKGxvb3BhYmxlKTtcbiAgICBsZW4gPSBrZXlzLmxlbmd0aDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGZuLmNhbGwodGhpc0FyZywgbG9vcGFibGVba2V5c1tpXV0sIGtleXNbaV0pO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gX2VsZW1lbnRzRXF1YWwoYTAsIGExKSB7XG4gIGxldCBpLCBpbGVuLCB2MCwgdjE7XG4gIGlmICghYTAgfHwgIWExIHx8IGEwLmxlbmd0aCAhPT0gYTEubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZvciAoaSA9IDAsIGlsZW4gPSBhMC5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICB2MCA9IGEwW2ldO1xuICAgIHYxID0gYTFbaV07XG4gICAgaWYgKHYwLmRhdGFzZXRJbmRleCAhPT0gdjEuZGF0YXNldEluZGV4IHx8IHYwLmluZGV4ICE9PSB2MS5pbmRleCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGNsb25lJDEoc291cmNlKSB7XG4gIGlmIChpc0FycmF5KHNvdXJjZSkpIHtcbiAgICByZXR1cm4gc291cmNlLm1hcChjbG9uZSQxKTtcbiAgfVxuICBpZiAoaXNPYmplY3Qoc291cmNlKSkge1xuICAgIGNvbnN0IHRhcmdldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gICAgY29uc3Qga2xlbiA9IGtleXMubGVuZ3RoO1xuICAgIGxldCBrID0gMDtcbiAgICBmb3IgKDsgayA8IGtsZW47ICsraykge1xuICAgICAgdGFyZ2V0W2tleXNba11dID0gY2xvbmUkMShzb3VyY2Vba2V5c1trXV0pO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG4gIHJldHVybiBzb3VyY2U7XG59XG5mdW5jdGlvbiBpc1ZhbGlkS2V5KGtleSkge1xuICByZXR1cm4gWydfX3Byb3RvX18nLCAncHJvdG90eXBlJywgJ2NvbnN0cnVjdG9yJ10uaW5kZXhPZihrZXkpID09PSAtMTtcbn1cbmZ1bmN0aW9uIF9tZXJnZXIoa2V5LCB0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuICBpZiAoIWlzVmFsaWRLZXkoa2V5KSkge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCB0dmFsID0gdGFyZ2V0W2tleV07XG4gIGNvbnN0IHN2YWwgPSBzb3VyY2Vba2V5XTtcbiAgaWYgKGlzT2JqZWN0KHR2YWwpICYmIGlzT2JqZWN0KHN2YWwpKSB7XG4gICAgbWVyZ2UodHZhbCwgc3ZhbCwgb3B0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0W2tleV0gPSBjbG9uZSQxKHN2YWwpO1xuICB9XG59XG5mdW5jdGlvbiBtZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuICBjb25zdCBzb3VyY2VzID0gaXNBcnJheShzb3VyY2UpID8gc291cmNlIDogW3NvdXJjZV07XG4gIGNvbnN0IGlsZW4gPSBzb3VyY2VzLmxlbmd0aDtcbiAgaWYgKCFpc09iamVjdCh0YXJnZXQpKSB7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgY29uc3QgbWVyZ2VyID0gb3B0aW9ucy5tZXJnZXIgfHwgX21lcmdlcjtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbGVuOyArK2kpIHtcbiAgICBzb3VyY2UgPSBzb3VyY2VzW2ldO1xuICAgIGlmICghaXNPYmplY3Qoc291cmNlKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICAgIGZvciAobGV0IGsgPSAwLCBrbGVuID0ga2V5cy5sZW5ndGg7IGsgPCBrbGVuOyArK2spIHtcbiAgICAgIG1lcmdlcihrZXlzW2tdLCB0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucyk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0YXJnZXQ7XG59XG5mdW5jdGlvbiBtZXJnZUlmKHRhcmdldCwgc291cmNlKSB7XG4gIHJldHVybiBtZXJnZSh0YXJnZXQsIHNvdXJjZSwge21lcmdlcjogX21lcmdlcklmfSk7XG59XG5mdW5jdGlvbiBfbWVyZ2VySWYoa2V5LCB0YXJnZXQsIHNvdXJjZSkge1xuICBpZiAoIWlzVmFsaWRLZXkoa2V5KSkge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCB0dmFsID0gdGFyZ2V0W2tleV07XG4gIGNvbnN0IHN2YWwgPSBzb3VyY2Vba2V5XTtcbiAgaWYgKGlzT2JqZWN0KHR2YWwpICYmIGlzT2JqZWN0KHN2YWwpKSB7XG4gICAgbWVyZ2VJZih0dmFsLCBzdmFsKTtcbiAgfSBlbHNlIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRhcmdldCwga2V5KSkge1xuICAgIHRhcmdldFtrZXldID0gY2xvbmUkMShzdmFsKTtcbiAgfVxufVxuZnVuY3Rpb24gX2RlcHJlY2F0ZWQoc2NvcGUsIHZhbHVlLCBwcmV2aW91cywgY3VycmVudCkge1xuICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnNvbGUud2FybihzY29wZSArICc6IFwiJyArIHByZXZpb3VzICtcblx0XHRcdCdcIiBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIFwiJyArIGN1cnJlbnQgKyAnXCIgaW5zdGVhZCcpO1xuICB9XG59XG5jb25zdCBlbXB0eVN0cmluZyA9ICcnO1xuY29uc3QgZG90ID0gJy4nO1xuZnVuY3Rpb24gaW5kZXhPZkRvdE9yTGVuZ3RoKGtleSwgc3RhcnQpIHtcbiAgY29uc3QgaWR4ID0ga2V5LmluZGV4T2YoZG90LCBzdGFydCk7XG4gIHJldHVybiBpZHggPT09IC0xID8ga2V5Lmxlbmd0aCA6IGlkeDtcbn1cbmZ1bmN0aW9uIHJlc29sdmVPYmplY3RLZXkob2JqLCBrZXkpIHtcbiAgaWYgKGtleSA9PT0gZW1wdHlTdHJpbmcpIHtcbiAgICByZXR1cm4gb2JqO1xuICB9XG4gIGxldCBwb3MgPSAwO1xuICBsZXQgaWR4ID0gaW5kZXhPZkRvdE9yTGVuZ3RoKGtleSwgcG9zKTtcbiAgd2hpbGUgKG9iaiAmJiBpZHggPiBwb3MpIHtcbiAgICBvYmogPSBvYmpba2V5LnN1YnN0cihwb3MsIGlkeCAtIHBvcyldO1xuICAgIHBvcyA9IGlkeCArIDE7XG4gICAgaWR4ID0gaW5kZXhPZkRvdE9yTGVuZ3RoKGtleSwgcG9zKTtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuZnVuY3Rpb24gX2NhcGl0YWxpemUoc3RyKSB7XG4gIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSk7XG59XG5jb25zdCBkZWZpbmVkID0gKHZhbHVlKSA9PiB0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnO1xuY29uc3QgaXNGdW5jdGlvbiA9ICh2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xuY29uc3Qgc2V0c0VxdWFsID0gKGEsIGIpID0+IHtcbiAgaWYgKGEuc2l6ZSAhPT0gYi5zaXplKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZvciAoY29uc3QgaXRlbSBvZiBhKSB7XG4gICAgaWYgKCFiLmhhcyhpdGVtKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmNvbnN0IFBJID0gTWF0aC5QSTtcbmNvbnN0IFRBVSA9IDIgKiBQSTtcbmNvbnN0IFBJVEFVID0gVEFVICsgUEk7XG5jb25zdCBJTkZJTklUWSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbmNvbnN0IFJBRF9QRVJfREVHID0gUEkgLyAxODA7XG5jb25zdCBIQUxGX1BJID0gUEkgLyAyO1xuY29uc3QgUVVBUlRFUl9QSSA9IFBJIC8gNDtcbmNvbnN0IFRXT19USElSRFNfUEkgPSBQSSAqIDIgLyAzO1xuY29uc3QgbG9nMTAgPSBNYXRoLmxvZzEwO1xuY29uc3Qgc2lnbiA9IE1hdGguc2lnbjtcbmZ1bmN0aW9uIG5pY2VOdW0ocmFuZ2UpIHtcbiAgY29uc3QgbmljZVJhbmdlID0gTWF0aC5wb3coMTAsIE1hdGguZmxvb3IobG9nMTAocmFuZ2UpKSk7XG4gIGNvbnN0IGZyYWN0aW9uID0gcmFuZ2UgLyBuaWNlUmFuZ2U7XG4gIGNvbnN0IG5pY2VGcmFjdGlvbiA9IGZyYWN0aW9uIDw9IDEgPyAxIDogZnJhY3Rpb24gPD0gMiA/IDIgOiBmcmFjdGlvbiA8PSA1ID8gNSA6IDEwO1xuICByZXR1cm4gbmljZUZyYWN0aW9uICogbmljZVJhbmdlO1xufVxuZnVuY3Rpb24gX2ZhY3Rvcml6ZSh2YWx1ZSkge1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgY29uc3Qgc3FydCA9IE1hdGguc3FydCh2YWx1ZSk7XG4gIGxldCBpO1xuICBmb3IgKGkgPSAxOyBpIDwgc3FydDsgaSsrKSB7XG4gICAgaWYgKHZhbHVlICUgaSA9PT0gMCkge1xuICAgICAgcmVzdWx0LnB1c2goaSk7XG4gICAgICByZXN1bHQucHVzaCh2YWx1ZSAvIGkpO1xuICAgIH1cbiAgfVxuICBpZiAoc3FydCA9PT0gKHNxcnQgfCAwKSkge1xuICAgIHJlc3VsdC5wdXNoKHNxcnQpO1xuICB9XG4gIHJlc3VsdC5zb3J0KChhLCBiKSA9PiBhIC0gYikucG9wKCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBpc051bWJlcihuKSB7XG4gIHJldHVybiAhaXNOYU4ocGFyc2VGbG9hdChuKSkgJiYgaXNGaW5pdGUobik7XG59XG5mdW5jdGlvbiBhbG1vc3RFcXVhbHMoeCwgeSwgZXBzaWxvbikge1xuICByZXR1cm4gTWF0aC5hYnMoeCAtIHkpIDwgZXBzaWxvbjtcbn1cbmZ1bmN0aW9uIGFsbW9zdFdob2xlKHgsIGVwc2lsb24pIHtcbiAgY29uc3Qgcm91bmRlZCA9IE1hdGgucm91bmQoeCk7XG4gIHJldHVybiAoKHJvdW5kZWQgLSBlcHNpbG9uKSA8PSB4KSAmJiAoKHJvdW5kZWQgKyBlcHNpbG9uKSA+PSB4KTtcbn1cbmZ1bmN0aW9uIF9zZXRNaW5BbmRNYXhCeUtleShhcnJheSwgdGFyZ2V0LCBwcm9wZXJ0eSkge1xuICBsZXQgaSwgaWxlbiwgdmFsdWU7XG4gIGZvciAoaSA9IDAsIGlsZW4gPSBhcnJheS5sZW5ndGg7IGkgPCBpbGVuOyBpKyspIHtcbiAgICB2YWx1ZSA9IGFycmF5W2ldW3Byb3BlcnR5XTtcbiAgICBpZiAoIWlzTmFOKHZhbHVlKSkge1xuICAgICAgdGFyZ2V0Lm1pbiA9IE1hdGgubWluKHRhcmdldC5taW4sIHZhbHVlKTtcbiAgICAgIHRhcmdldC5tYXggPSBNYXRoLm1heCh0YXJnZXQubWF4LCB2YWx1ZSk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiB0b1JhZGlhbnMoZGVncmVlcykge1xuICByZXR1cm4gZGVncmVlcyAqIChQSSAvIDE4MCk7XG59XG5mdW5jdGlvbiB0b0RlZ3JlZXMocmFkaWFucykge1xuICByZXR1cm4gcmFkaWFucyAqICgxODAgLyBQSSk7XG59XG5mdW5jdGlvbiBfZGVjaW1hbFBsYWNlcyh4KSB7XG4gIGlmICghaXNOdW1iZXJGaW5pdGUoeCkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgbGV0IGUgPSAxO1xuICBsZXQgcCA9IDA7XG4gIHdoaWxlIChNYXRoLnJvdW5kKHggKiBlKSAvIGUgIT09IHgpIHtcbiAgICBlICo9IDEwO1xuICAgIHArKztcbiAgfVxuICByZXR1cm4gcDtcbn1cbmZ1bmN0aW9uIGdldEFuZ2xlRnJvbVBvaW50KGNlbnRyZVBvaW50LCBhbmdsZVBvaW50KSB7XG4gIGNvbnN0IGRpc3RhbmNlRnJvbVhDZW50ZXIgPSBhbmdsZVBvaW50LnggLSBjZW50cmVQb2ludC54O1xuICBjb25zdCBkaXN0YW5jZUZyb21ZQ2VudGVyID0gYW5nbGVQb2ludC55IC0gY2VudHJlUG9pbnQueTtcbiAgY29uc3QgcmFkaWFsRGlzdGFuY2VGcm9tQ2VudGVyID0gTWF0aC5zcXJ0KGRpc3RhbmNlRnJvbVhDZW50ZXIgKiBkaXN0YW5jZUZyb21YQ2VudGVyICsgZGlzdGFuY2VGcm9tWUNlbnRlciAqIGRpc3RhbmNlRnJvbVlDZW50ZXIpO1xuICBsZXQgYW5nbGUgPSBNYXRoLmF0YW4yKGRpc3RhbmNlRnJvbVlDZW50ZXIsIGRpc3RhbmNlRnJvbVhDZW50ZXIpO1xuICBpZiAoYW5nbGUgPCAoLTAuNSAqIFBJKSkge1xuICAgIGFuZ2xlICs9IFRBVTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGFuZ2xlLFxuICAgIGRpc3RhbmNlOiByYWRpYWxEaXN0YW5jZUZyb21DZW50ZXJcbiAgfTtcbn1cbmZ1bmN0aW9uIGRpc3RhbmNlQmV0d2VlblBvaW50cyhwdDEsIHB0Mikge1xuICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHB0Mi54IC0gcHQxLngsIDIpICsgTWF0aC5wb3cocHQyLnkgLSBwdDEueSwgMikpO1xufVxuZnVuY3Rpb24gX2FuZ2xlRGlmZihhLCBiKSB7XG4gIHJldHVybiAoYSAtIGIgKyBQSVRBVSkgJSBUQVUgLSBQSTtcbn1cbmZ1bmN0aW9uIF9ub3JtYWxpemVBbmdsZShhKSB7XG4gIHJldHVybiAoYSAlIFRBVSArIFRBVSkgJSBUQVU7XG59XG5mdW5jdGlvbiBfYW5nbGVCZXR3ZWVuKGFuZ2xlLCBzdGFydCwgZW5kLCBzYW1lQW5nbGVJc0Z1bGxDaXJjbGUpIHtcbiAgY29uc3QgYSA9IF9ub3JtYWxpemVBbmdsZShhbmdsZSk7XG4gIGNvbnN0IHMgPSBfbm9ybWFsaXplQW5nbGUoc3RhcnQpO1xuICBjb25zdCBlID0gX25vcm1hbGl6ZUFuZ2xlKGVuZCk7XG4gIGNvbnN0IGFuZ2xlVG9TdGFydCA9IF9ub3JtYWxpemVBbmdsZShzIC0gYSk7XG4gIGNvbnN0IGFuZ2xlVG9FbmQgPSBfbm9ybWFsaXplQW5nbGUoZSAtIGEpO1xuICBjb25zdCBzdGFydFRvQW5nbGUgPSBfbm9ybWFsaXplQW5nbGUoYSAtIHMpO1xuICBjb25zdCBlbmRUb0FuZ2xlID0gX25vcm1hbGl6ZUFuZ2xlKGEgLSBlKTtcbiAgcmV0dXJuIGEgPT09IHMgfHwgYSA9PT0gZSB8fCAoc2FtZUFuZ2xlSXNGdWxsQ2lyY2xlICYmIHMgPT09IGUpXG4gICAgfHwgKGFuZ2xlVG9TdGFydCA+IGFuZ2xlVG9FbmQgJiYgc3RhcnRUb0FuZ2xlIDwgZW5kVG9BbmdsZSk7XG59XG5mdW5jdGlvbiBfbGltaXRWYWx1ZSh2YWx1ZSwgbWluLCBtYXgpIHtcbiAgcmV0dXJuIE1hdGgubWF4KG1pbiwgTWF0aC5taW4obWF4LCB2YWx1ZSkpO1xufVxuZnVuY3Rpb24gX2ludDE2UmFuZ2UodmFsdWUpIHtcbiAgcmV0dXJuIF9saW1pdFZhbHVlKHZhbHVlLCAtMzI3NjgsIDMyNzY3KTtcbn1cblxuY29uc3QgYXRFZGdlID0gKHQpID0+IHQgPT09IDAgfHwgdCA9PT0gMTtcbmNvbnN0IGVsYXN0aWNJbiA9ICh0LCBzLCBwKSA9PiAtKE1hdGgucG93KDIsIDEwICogKHQgLT0gMSkpICogTWF0aC5zaW4oKHQgLSBzKSAqIFRBVSAvIHApKTtcbmNvbnN0IGVsYXN0aWNPdXQgPSAodCwgcywgcCkgPT4gTWF0aC5wb3coMiwgLTEwICogdCkgKiBNYXRoLnNpbigodCAtIHMpICogVEFVIC8gcCkgKyAxO1xuY29uc3QgZWZmZWN0cyA9IHtcbiAgbGluZWFyOiB0ID0+IHQsXG4gIGVhc2VJblF1YWQ6IHQgPT4gdCAqIHQsXG4gIGVhc2VPdXRRdWFkOiB0ID0+IC10ICogKHQgLSAyKSxcbiAgZWFzZUluT3V0UXVhZDogdCA9PiAoKHQgLz0gMC41KSA8IDEpXG4gICAgPyAwLjUgKiB0ICogdFxuICAgIDogLTAuNSAqICgoLS10KSAqICh0IC0gMikgLSAxKSxcbiAgZWFzZUluQ3ViaWM6IHQgPT4gdCAqIHQgKiB0LFxuICBlYXNlT3V0Q3ViaWM6IHQgPT4gKHQgLT0gMSkgKiB0ICogdCArIDEsXG4gIGVhc2VJbk91dEN1YmljOiB0ID0+ICgodCAvPSAwLjUpIDwgMSlcbiAgICA/IDAuNSAqIHQgKiB0ICogdFxuICAgIDogMC41ICogKCh0IC09IDIpICogdCAqIHQgKyAyKSxcbiAgZWFzZUluUXVhcnQ6IHQgPT4gdCAqIHQgKiB0ICogdCxcbiAgZWFzZU91dFF1YXJ0OiB0ID0+IC0oKHQgLT0gMSkgKiB0ICogdCAqIHQgLSAxKSxcbiAgZWFzZUluT3V0UXVhcnQ6IHQgPT4gKCh0IC89IDAuNSkgPCAxKVxuICAgID8gMC41ICogdCAqIHQgKiB0ICogdFxuICAgIDogLTAuNSAqICgodCAtPSAyKSAqIHQgKiB0ICogdCAtIDIpLFxuICBlYXNlSW5RdWludDogdCA9PiB0ICogdCAqIHQgKiB0ICogdCxcbiAgZWFzZU91dFF1aW50OiB0ID0+ICh0IC09IDEpICogdCAqIHQgKiB0ICogdCArIDEsXG4gIGVhc2VJbk91dFF1aW50OiB0ID0+ICgodCAvPSAwLjUpIDwgMSlcbiAgICA/IDAuNSAqIHQgKiB0ICogdCAqIHQgKiB0XG4gICAgOiAwLjUgKiAoKHQgLT0gMikgKiB0ICogdCAqIHQgKiB0ICsgMiksXG4gIGVhc2VJblNpbmU6IHQgPT4gLU1hdGguY29zKHQgKiBIQUxGX1BJKSArIDEsXG4gIGVhc2VPdXRTaW5lOiB0ID0+IE1hdGguc2luKHQgKiBIQUxGX1BJKSxcbiAgZWFzZUluT3V0U2luZTogdCA9PiAtMC41ICogKE1hdGguY29zKFBJICogdCkgLSAxKSxcbiAgZWFzZUluRXhwbzogdCA9PiAodCA9PT0gMCkgPyAwIDogTWF0aC5wb3coMiwgMTAgKiAodCAtIDEpKSxcbiAgZWFzZU91dEV4cG86IHQgPT4gKHQgPT09IDEpID8gMSA6IC1NYXRoLnBvdygyLCAtMTAgKiB0KSArIDEsXG4gIGVhc2VJbk91dEV4cG86IHQgPT4gYXRFZGdlKHQpID8gdCA6IHQgPCAwLjVcbiAgICA/IDAuNSAqIE1hdGgucG93KDIsIDEwICogKHQgKiAyIC0gMSkpXG4gICAgOiAwLjUgKiAoLU1hdGgucG93KDIsIC0xMCAqICh0ICogMiAtIDEpKSArIDIpLFxuICBlYXNlSW5DaXJjOiB0ID0+ICh0ID49IDEpID8gdCA6IC0oTWF0aC5zcXJ0KDEgLSB0ICogdCkgLSAxKSxcbiAgZWFzZU91dENpcmM6IHQgPT4gTWF0aC5zcXJ0KDEgLSAodCAtPSAxKSAqIHQpLFxuICBlYXNlSW5PdXRDaXJjOiB0ID0+ICgodCAvPSAwLjUpIDwgMSlcbiAgICA/IC0wLjUgKiAoTWF0aC5zcXJ0KDEgLSB0ICogdCkgLSAxKVxuICAgIDogMC41ICogKE1hdGguc3FydCgxIC0gKHQgLT0gMikgKiB0KSArIDEpLFxuICBlYXNlSW5FbGFzdGljOiB0ID0+IGF0RWRnZSh0KSA/IHQgOiBlbGFzdGljSW4odCwgMC4wNzUsIDAuMyksXG4gIGVhc2VPdXRFbGFzdGljOiB0ID0+IGF0RWRnZSh0KSA/IHQgOiBlbGFzdGljT3V0KHQsIDAuMDc1LCAwLjMpLFxuICBlYXNlSW5PdXRFbGFzdGljKHQpIHtcbiAgICBjb25zdCBzID0gMC4xMTI1O1xuICAgIGNvbnN0IHAgPSAwLjQ1O1xuICAgIHJldHVybiBhdEVkZ2UodCkgPyB0IDpcbiAgICAgIHQgPCAwLjVcbiAgICAgICAgPyAwLjUgKiBlbGFzdGljSW4odCAqIDIsIHMsIHApXG4gICAgICAgIDogMC41ICsgMC41ICogZWxhc3RpY091dCh0ICogMiAtIDEsIHMsIHApO1xuICB9LFxuICBlYXNlSW5CYWNrKHQpIHtcbiAgICBjb25zdCBzID0gMS43MDE1ODtcbiAgICByZXR1cm4gdCAqIHQgKiAoKHMgKyAxKSAqIHQgLSBzKTtcbiAgfSxcbiAgZWFzZU91dEJhY2sodCkge1xuICAgIGNvbnN0IHMgPSAxLjcwMTU4O1xuICAgIHJldHVybiAodCAtPSAxKSAqIHQgKiAoKHMgKyAxKSAqIHQgKyBzKSArIDE7XG4gIH0sXG4gIGVhc2VJbk91dEJhY2sodCkge1xuICAgIGxldCBzID0gMS43MDE1ODtcbiAgICBpZiAoKHQgLz0gMC41KSA8IDEpIHtcbiAgICAgIHJldHVybiAwLjUgKiAodCAqIHQgKiAoKChzICo9ICgxLjUyNSkpICsgMSkgKiB0IC0gcykpO1xuICAgIH1cbiAgICByZXR1cm4gMC41ICogKCh0IC09IDIpICogdCAqICgoKHMgKj0gKDEuNTI1KSkgKyAxKSAqIHQgKyBzKSArIDIpO1xuICB9LFxuICBlYXNlSW5Cb3VuY2U6IHQgPT4gMSAtIGVmZmVjdHMuZWFzZU91dEJvdW5jZSgxIC0gdCksXG4gIGVhc2VPdXRCb3VuY2UodCkge1xuICAgIGNvbnN0IG0gPSA3LjU2MjU7XG4gICAgY29uc3QgZCA9IDIuNzU7XG4gICAgaWYgKHQgPCAoMSAvIGQpKSB7XG4gICAgICByZXR1cm4gbSAqIHQgKiB0O1xuICAgIH1cbiAgICBpZiAodCA8ICgyIC8gZCkpIHtcbiAgICAgIHJldHVybiBtICogKHQgLT0gKDEuNSAvIGQpKSAqIHQgKyAwLjc1O1xuICAgIH1cbiAgICBpZiAodCA8ICgyLjUgLyBkKSkge1xuICAgICAgcmV0dXJuIG0gKiAodCAtPSAoMi4yNSAvIGQpKSAqIHQgKyAwLjkzNzU7XG4gICAgfVxuICAgIHJldHVybiBtICogKHQgLT0gKDIuNjI1IC8gZCkpICogdCArIDAuOTg0Mzc1O1xuICB9LFxuICBlYXNlSW5PdXRCb3VuY2U6IHQgPT4gKHQgPCAwLjUpXG4gICAgPyBlZmZlY3RzLmVhc2VJbkJvdW5jZSh0ICogMikgKiAwLjVcbiAgICA6IGVmZmVjdHMuZWFzZU91dEJvdW5jZSh0ICogMiAtIDEpICogMC41ICsgMC41LFxufTtcblxuLyohXG4gKiBAa3Vya2xlL2NvbG9yIHYwLjEuOVxuICogaHR0cHM6Ly9naXRodWIuY29tL2t1cmtsZS9jb2xvciNyZWFkbWVcbiAqIChjKSAyMDIwIEp1a2thIEt1cmtlbGFcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuICovXG5jb25zdCBtYXAgPSB7MDogMCwgMTogMSwgMjogMiwgMzogMywgNDogNCwgNTogNSwgNjogNiwgNzogNywgODogOCwgOTogOSwgQTogMTAsIEI6IDExLCBDOiAxMiwgRDogMTMsIEU6IDE0LCBGOiAxNSwgYTogMTAsIGI6IDExLCBjOiAxMiwgZDogMTMsIGU6IDE0LCBmOiAxNX07XG5jb25zdCBoZXggPSAnMDEyMzQ1Njc4OUFCQ0RFRic7XG5jb25zdCBoMSA9IChiKSA9PiBoZXhbYiAmIDB4Rl07XG5jb25zdCBoMiA9IChiKSA9PiBoZXhbKGIgJiAweEYwKSA+PiA0XSArIGhleFtiICYgMHhGXTtcbmNvbnN0IGVxID0gKGIpID0+ICgoKGIgJiAweEYwKSA+PiA0KSA9PT0gKGIgJiAweEYpKTtcbmZ1bmN0aW9uIGlzU2hvcnQodikge1xuXHRyZXR1cm4gZXEodi5yKSAmJiBlcSh2LmcpICYmIGVxKHYuYikgJiYgZXEodi5hKTtcbn1cbmZ1bmN0aW9uIGhleFBhcnNlKHN0cikge1xuXHR2YXIgbGVuID0gc3RyLmxlbmd0aDtcblx0dmFyIHJldDtcblx0aWYgKHN0clswXSA9PT0gJyMnKSB7XG5cdFx0aWYgKGxlbiA9PT0gNCB8fCBsZW4gPT09IDUpIHtcblx0XHRcdHJldCA9IHtcblx0XHRcdFx0cjogMjU1ICYgbWFwW3N0clsxXV0gKiAxNyxcblx0XHRcdFx0ZzogMjU1ICYgbWFwW3N0clsyXV0gKiAxNyxcblx0XHRcdFx0YjogMjU1ICYgbWFwW3N0clszXV0gKiAxNyxcblx0XHRcdFx0YTogbGVuID09PSA1ID8gbWFwW3N0cls0XV0gKiAxNyA6IDI1NVxuXHRcdFx0fTtcblx0XHR9IGVsc2UgaWYgKGxlbiA9PT0gNyB8fCBsZW4gPT09IDkpIHtcblx0XHRcdHJldCA9IHtcblx0XHRcdFx0cjogbWFwW3N0clsxXV0gPDwgNCB8IG1hcFtzdHJbMl1dLFxuXHRcdFx0XHRnOiBtYXBbc3RyWzNdXSA8PCA0IHwgbWFwW3N0cls0XV0sXG5cdFx0XHRcdGI6IG1hcFtzdHJbNV1dIDw8IDQgfCBtYXBbc3RyWzZdXSxcblx0XHRcdFx0YTogbGVuID09PSA5ID8gKG1hcFtzdHJbN11dIDw8IDQgfCBtYXBbc3RyWzhdXSkgOiAyNTVcblx0XHRcdH07XG5cdFx0fVxuXHR9XG5cdHJldHVybiByZXQ7XG59XG5mdW5jdGlvbiBoZXhTdHJpbmcodikge1xuXHR2YXIgZiA9IGlzU2hvcnQodikgPyBoMSA6IGgyO1xuXHRyZXR1cm4gdlxuXHRcdD8gJyMnICsgZih2LnIpICsgZih2LmcpICsgZih2LmIpICsgKHYuYSA8IDI1NSA/IGYodi5hKSA6ICcnKVxuXHRcdDogdjtcbn1cbmZ1bmN0aW9uIHJvdW5kKHYpIHtcblx0cmV0dXJuIHYgKyAwLjUgfCAwO1xufVxuY29uc3QgbGltID0gKHYsIGwsIGgpID0+IE1hdGgubWF4KE1hdGgubWluKHYsIGgpLCBsKTtcbmZ1bmN0aW9uIHAyYih2KSB7XG5cdHJldHVybiBsaW0ocm91bmQodiAqIDIuNTUpLCAwLCAyNTUpO1xufVxuZnVuY3Rpb24gbjJiKHYpIHtcblx0cmV0dXJuIGxpbShyb3VuZCh2ICogMjU1KSwgMCwgMjU1KTtcbn1cbmZ1bmN0aW9uIGIybih2KSB7XG5cdHJldHVybiBsaW0ocm91bmQodiAvIDIuNTUpIC8gMTAwLCAwLCAxKTtcbn1cbmZ1bmN0aW9uIG4ycCh2KSB7XG5cdHJldHVybiBsaW0ocm91bmQodiAqIDEwMCksIDAsIDEwMCk7XG59XG5jb25zdCBSR0JfUkUgPSAvXnJnYmE/XFwoXFxzKihbLSsuXFxkXSspKCUpP1tcXHMsXSsoWy0rLmVcXGRdKykoJSk/W1xccyxdKyhbLSsuZVxcZF0rKSglKT8oPzpbXFxzLC9dKyhbLSsuZVxcZF0rKSglKT8pP1xccypcXCkkLztcbmZ1bmN0aW9uIHJnYlBhcnNlKHN0cikge1xuXHRjb25zdCBtID0gUkdCX1JFLmV4ZWMoc3RyKTtcblx0bGV0IGEgPSAyNTU7XG5cdGxldCByLCBnLCBiO1xuXHRpZiAoIW0pIHtcblx0XHRyZXR1cm47XG5cdH1cblx0aWYgKG1bN10gIT09IHIpIHtcblx0XHRjb25zdCB2ID0gK21bN107XG5cdFx0YSA9IDI1NSAmIChtWzhdID8gcDJiKHYpIDogdiAqIDI1NSk7XG5cdH1cblx0ciA9ICttWzFdO1xuXHRnID0gK21bM107XG5cdGIgPSArbVs1XTtcblx0ciA9IDI1NSAmIChtWzJdID8gcDJiKHIpIDogcik7XG5cdGcgPSAyNTUgJiAobVs0XSA/IHAyYihnKSA6IGcpO1xuXHRiID0gMjU1ICYgKG1bNl0gPyBwMmIoYikgOiBiKTtcblx0cmV0dXJuIHtcblx0XHRyOiByLFxuXHRcdGc6IGcsXG5cdFx0YjogYixcblx0XHRhOiBhXG5cdH07XG59XG5mdW5jdGlvbiByZ2JTdHJpbmcodikge1xuXHRyZXR1cm4gdiAmJiAoXG5cdFx0di5hIDwgMjU1XG5cdFx0XHQ/IGByZ2JhKCR7di5yfSwgJHt2Lmd9LCAke3YuYn0sICR7YjJuKHYuYSl9KWBcblx0XHRcdDogYHJnYigke3Yucn0sICR7di5nfSwgJHt2LmJ9KWBcblx0KTtcbn1cbmNvbnN0IEhVRV9SRSA9IC9eKGhzbGE/fGh3Ynxoc3YpXFwoXFxzKihbLSsuZVxcZF0rKSg/OmRlZyk/W1xccyxdKyhbLSsuZVxcZF0rKSVbXFxzLF0rKFstKy5lXFxkXSspJSg/OltcXHMsXSsoWy0rLmVcXGRdKykoJSk/KT9cXHMqXFwpJC87XG5mdW5jdGlvbiBoc2wycmdibihoLCBzLCBsKSB7XG5cdGNvbnN0IGEgPSBzICogTWF0aC5taW4obCwgMSAtIGwpO1xuXHRjb25zdCBmID0gKG4sIGsgPSAobiArIGggLyAzMCkgJSAxMikgPT4gbCAtIGEgKiBNYXRoLm1heChNYXRoLm1pbihrIC0gMywgOSAtIGssIDEpLCAtMSk7XG5cdHJldHVybiBbZigwKSwgZig4KSwgZig0KV07XG59XG5mdW5jdGlvbiBoc3YycmdibihoLCBzLCB2KSB7XG5cdGNvbnN0IGYgPSAobiwgayA9IChuICsgaCAvIDYwKSAlIDYpID0+IHYgLSB2ICogcyAqIE1hdGgubWF4KE1hdGgubWluKGssIDQgLSBrLCAxKSwgMCk7XG5cdHJldHVybiBbZig1KSwgZigzKSwgZigxKV07XG59XG5mdW5jdGlvbiBod2IycmdibihoLCB3LCBiKSB7XG5cdGNvbnN0IHJnYiA9IGhzbDJyZ2JuKGgsIDEsIDAuNSk7XG5cdGxldCBpO1xuXHRpZiAodyArIGIgPiAxKSB7XG5cdFx0aSA9IDEgLyAodyArIGIpO1xuXHRcdHcgKj0gaTtcblx0XHRiICo9IGk7XG5cdH1cblx0Zm9yIChpID0gMDsgaSA8IDM7IGkrKykge1xuXHRcdHJnYltpXSAqPSAxIC0gdyAtIGI7XG5cdFx0cmdiW2ldICs9IHc7XG5cdH1cblx0cmV0dXJuIHJnYjtcbn1cbmZ1bmN0aW9uIHJnYjJoc2wodikge1xuXHRjb25zdCByYW5nZSA9IDI1NTtcblx0Y29uc3QgciA9IHYuciAvIHJhbmdlO1xuXHRjb25zdCBnID0gdi5nIC8gcmFuZ2U7XG5cdGNvbnN0IGIgPSB2LmIgLyByYW5nZTtcblx0Y29uc3QgbWF4ID0gTWF0aC5tYXgociwgZywgYik7XG5cdGNvbnN0IG1pbiA9IE1hdGgubWluKHIsIGcsIGIpO1xuXHRjb25zdCBsID0gKG1heCArIG1pbikgLyAyO1xuXHRsZXQgaCwgcywgZDtcblx0aWYgKG1heCAhPT0gbWluKSB7XG5cdFx0ZCA9IG1heCAtIG1pbjtcblx0XHRzID0gbCA+IDAuNSA/IGQgLyAoMiAtIG1heCAtIG1pbikgOiBkIC8gKG1heCArIG1pbik7XG5cdFx0aCA9IG1heCA9PT0gclxuXHRcdFx0PyAoKGcgLSBiKSAvIGQpICsgKGcgPCBiID8gNiA6IDApXG5cdFx0XHQ6IG1heCA9PT0gZ1xuXHRcdFx0XHQ/IChiIC0gcikgLyBkICsgMlxuXHRcdFx0XHQ6IChyIC0gZykgLyBkICsgNDtcblx0XHRoID0gaCAqIDYwICsgMC41O1xuXHR9XG5cdHJldHVybiBbaCB8IDAsIHMgfHwgMCwgbF07XG59XG5mdW5jdGlvbiBjYWxsbihmLCBhLCBiLCBjKSB7XG5cdHJldHVybiAoXG5cdFx0QXJyYXkuaXNBcnJheShhKVxuXHRcdFx0PyBmKGFbMF0sIGFbMV0sIGFbMl0pXG5cdFx0XHQ6IGYoYSwgYiwgYylcblx0KS5tYXAobjJiKTtcbn1cbmZ1bmN0aW9uIGhzbDJyZ2IoaCwgcywgbCkge1xuXHRyZXR1cm4gY2FsbG4oaHNsMnJnYm4sIGgsIHMsIGwpO1xufVxuZnVuY3Rpb24gaHdiMnJnYihoLCB3LCBiKSB7XG5cdHJldHVybiBjYWxsbihod2IycmdibiwgaCwgdywgYik7XG59XG5mdW5jdGlvbiBoc3YycmdiKGgsIHMsIHYpIHtcblx0cmV0dXJuIGNhbGxuKGhzdjJyZ2JuLCBoLCBzLCB2KTtcbn1cbmZ1bmN0aW9uIGh1ZShoKSB7XG5cdHJldHVybiAoaCAlIDM2MCArIDM2MCkgJSAzNjA7XG59XG5mdW5jdGlvbiBodWVQYXJzZShzdHIpIHtcblx0Y29uc3QgbSA9IEhVRV9SRS5leGVjKHN0cik7XG5cdGxldCBhID0gMjU1O1xuXHRsZXQgdjtcblx0aWYgKCFtKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdGlmIChtWzVdICE9PSB2KSB7XG5cdFx0YSA9IG1bNl0gPyBwMmIoK21bNV0pIDogbjJiKCttWzVdKTtcblx0fVxuXHRjb25zdCBoID0gaHVlKCttWzJdKTtcblx0Y29uc3QgcDEgPSArbVszXSAvIDEwMDtcblx0Y29uc3QgcDIgPSArbVs0XSAvIDEwMDtcblx0aWYgKG1bMV0gPT09ICdod2InKSB7XG5cdFx0diA9IGh3YjJyZ2IoaCwgcDEsIHAyKTtcblx0fSBlbHNlIGlmIChtWzFdID09PSAnaHN2Jykge1xuXHRcdHYgPSBoc3YycmdiKGgsIHAxLCBwMik7XG5cdH0gZWxzZSB7XG5cdFx0diA9IGhzbDJyZ2IoaCwgcDEsIHAyKTtcblx0fVxuXHRyZXR1cm4ge1xuXHRcdHI6IHZbMF0sXG5cdFx0ZzogdlsxXSxcblx0XHRiOiB2WzJdLFxuXHRcdGE6IGFcblx0fTtcbn1cbmZ1bmN0aW9uIHJvdGF0ZSh2LCBkZWcpIHtcblx0dmFyIGggPSByZ2IyaHNsKHYpO1xuXHRoWzBdID0gaHVlKGhbMF0gKyBkZWcpO1xuXHRoID0gaHNsMnJnYihoKTtcblx0di5yID0gaFswXTtcblx0di5nID0gaFsxXTtcblx0di5iID0gaFsyXTtcbn1cbmZ1bmN0aW9uIGhzbFN0cmluZyh2KSB7XG5cdGlmICghdikge1xuXHRcdHJldHVybjtcblx0fVxuXHRjb25zdCBhID0gcmdiMmhzbCh2KTtcblx0Y29uc3QgaCA9IGFbMF07XG5cdGNvbnN0IHMgPSBuMnAoYVsxXSk7XG5cdGNvbnN0IGwgPSBuMnAoYVsyXSk7XG5cdHJldHVybiB2LmEgPCAyNTVcblx0XHQ/IGBoc2xhKCR7aH0sICR7c30lLCAke2x9JSwgJHtiMm4odi5hKX0pYFxuXHRcdDogYGhzbCgke2h9LCAke3N9JSwgJHtsfSUpYDtcbn1cbmNvbnN0IG1hcCQxID0ge1xuXHR4OiAnZGFyaycsXG5cdFo6ICdsaWdodCcsXG5cdFk6ICdyZScsXG5cdFg6ICdibHUnLFxuXHRXOiAnZ3InLFxuXHRWOiAnbWVkaXVtJyxcblx0VTogJ3NsYXRlJyxcblx0QTogJ2VlJyxcblx0VDogJ29sJyxcblx0UzogJ29yJyxcblx0QjogJ3JhJyxcblx0QzogJ2xhdGVnJyxcblx0RDogJ2lnaHRzJyxcblx0UjogJ2luJyxcblx0UTogJ3R1cnF1b2lzJyxcblx0RTogJ2hpJyxcblx0UDogJ3JvJyxcblx0TzogJ2FsJyxcblx0TjogJ2xlJyxcblx0TTogJ2RlJyxcblx0TDogJ3llbGxvJyxcblx0RjogJ2VuJyxcblx0SzogJ2NoJyxcblx0RzogJ2Fya3MnLFxuXHRIOiAnZWEnLFxuXHRJOiAnaWdodGcnLFxuXHRKOiAnd2gnXG59O1xuY29uc3QgbmFtZXMgPSB7XG5cdE9pY2VYZTogJ2YwZjhmZicsXG5cdGFudGlxdWV3RXRlOiAnZmFlYmQ3Jyxcblx0YXF1YTogJ2ZmZmYnLFxuXHRhcXVhbWFyUmU6ICc3ZmZmZDQnLFxuXHRhenVZOiAnZjBmZmZmJyxcblx0YmVpZ2U6ICdmNWY1ZGMnLFxuXHRiaXNxdWU6ICdmZmU0YzQnLFxuXHRibGFjazogJzAnLFxuXHRibGFuS2VkT21vbmQ6ICdmZmViY2QnLFxuXHRYZTogJ2ZmJyxcblx0WGV2aVRldDogJzhhMmJlMicsXG5cdGJQd246ICdhNTJhMmEnLFxuXHRidXJseXdvb2Q6ICdkZWI4ODcnLFxuXHRjYU10WGU6ICc1ZjllYTAnLFxuXHRLYXJ0WXVzZTogJzdmZmYwMCcsXG5cdEtvY1RhdGU6ICdkMjY5MWUnLFxuXHRjU086ICdmZjdmNTAnLFxuXHRjU25mbG93ZXJYZTogJzY0OTVlZCcsXG5cdGNTbnNpbGs6ICdmZmY4ZGMnLFxuXHRjcmltc29uOiAnZGMxNDNjJyxcblx0Y3lhbjogJ2ZmZmYnLFxuXHR4WGU6ICc4YicsXG5cdHhjeWFuOiAnOGI4YicsXG5cdHhnVE1uUGQ6ICdiODg2MGInLFxuXHR4V2F5OiAnYTlhOWE5Jyxcblx0eGdZRjogJzY0MDAnLFxuXHR4Z1l5OiAnYTlhOWE5Jyxcblx0eGtoYWtpOiAnYmRiNzZiJyxcblx0eG1hZ0Z0YTogJzhiMDA4YicsXG5cdHhUaXZlZ1lGOiAnNTU2YjJmJyxcblx0eFNhbmdlOiAnZmY4YzAwJyxcblx0eFNjRWQ6ICc5OTMyY2MnLFxuXHR4WWQ6ICc4YjAwMDAnLFxuXHR4c09tb246ICdlOTk2N2EnLFxuXHR4c0hnWUY6ICc4ZmJjOGYnLFxuXHR4VVhlOiAnNDgzZDhiJyxcblx0eFVXYXk6ICcyZjRmNGYnLFxuXHR4VWdZeTogJzJmNGY0ZicsXG5cdHhRZTogJ2NlZDEnLFxuXHR4dmlUZXQ6ICc5NDAwZDMnLFxuXHRkQXBwUms6ICdmZjE0OTMnLFxuXHRkQXBza3lYZTogJ2JmZmYnLFxuXHRkaW1XYXk6ICc2OTY5NjknLFxuXHRkaW1nWXk6ICc2OTY5NjknLFxuXHRkb2RnZXJYZTogJzFlOTBmZicsXG5cdGZpWWJyaWNrOiAnYjIyMjIyJyxcblx0ZmxTT3dFdGU6ICdmZmZhZjAnLFxuXHRmb1lzdFdBbjogJzIyOGIyMicsXG5cdGZ1S3NpYTogJ2ZmMDBmZicsXG5cdGdhUnNiU286ICdkY2RjZGMnLFxuXHRnaG9zdHdFdGU6ICdmOGY4ZmYnLFxuXHRnVGQ6ICdmZmQ3MDAnLFxuXHRnVE1uUGQ6ICdkYWE1MjAnLFxuXHRXYXk6ICc4MDgwODAnLFxuXHRnWUY6ICc4MDAwJyxcblx0Z1lGTHc6ICdhZGZmMmYnLFxuXHRnWXk6ICc4MDgwODAnLFxuXHRob25leU13OiAnZjBmZmYwJyxcblx0aG90cFJrOiAnZmY2OWI0Jyxcblx0UmRpYW5ZZDogJ2NkNWM1YycsXG5cdFJkaWdvOiAnNGIwMDgyJyxcblx0aXZTeTogJ2ZmZmZmMCcsXG5cdGtoYWtpOiAnZjBlNjhjJyxcblx0bGF2Rk1yOiAnZTZlNmZhJyxcblx0bGF2Rk1yWHNoOiAnZmZmMGY1Jyxcblx0bGF3bmdZRjogJzdjZmMwMCcsXG5cdE5tb25jRWZmb246ICdmZmZhY2QnLFxuXHRaWGU6ICdhZGQ4ZTYnLFxuXHRaY1NPOiAnZjA4MDgwJyxcblx0WmN5YW46ICdlMGZmZmYnLFxuXHRaZ1RNblBkTHc6ICdmYWZhZDInLFxuXHRaV2F5OiAnZDNkM2QzJyxcblx0WmdZRjogJzkwZWU5MCcsXG5cdFpnWXk6ICdkM2QzZDMnLFxuXHRacFJrOiAnZmZiNmMxJyxcblx0WnNPbW9uOiAnZmZhMDdhJyxcblx0WnNIZ1lGOiAnMjBiMmFhJyxcblx0WnNreVhlOiAnODdjZWZhJyxcblx0WlVXYXk6ICc3Nzg4OTknLFxuXHRaVWdZeTogJzc3ODg5OScsXG5cdFpzdEFsWGU6ICdiMGM0ZGUnLFxuXHRaTHc6ICdmZmZmZTAnLFxuXHRsaW1lOiAnZmYwMCcsXG5cdGxpbWVnWUY6ICczMmNkMzInLFxuXHRsUkY6ICdmYWYwZTYnLFxuXHRtYWdGdGE6ICdmZjAwZmYnLFxuXHRtYVBvbjogJzgwMDAwMCcsXG5cdFZhcXVhbWFyUmU6ICc2NmNkYWEnLFxuXHRWWGU6ICdjZCcsXG5cdFZTY0VkOiAnYmE1NWQzJyxcblx0VnB1cnBOOiAnOTM3MGRiJyxcblx0VnNIZ1lGOiAnM2NiMzcxJyxcblx0VlVYZTogJzdiNjhlZScsXG5cdFZzcHJSZ2dZRjogJ2ZhOWEnLFxuXHRWUWU6ICc0OGQxY2MnLFxuXHRWdmlUZXRZZDogJ2M3MTU4NScsXG5cdG1pZG5pZ2h0WGU6ICcxOTE5NzAnLFxuXHRtUnRjWWFtOiAnZjVmZmZhJyxcblx0bWlzdHlQc2U6ICdmZmU0ZTEnLFxuXHRtb2NjYXNSOiAnZmZlNGI1Jyxcblx0bmF2YWpvd0V0ZTogJ2ZmZGVhZCcsXG5cdG5hdnk6ICc4MCcsXG5cdFRkbGFjZTogJ2ZkZjVlNicsXG5cdFRpdmU6ICc4MDgwMDAnLFxuXHRUaXZlZEJiOiAnNmI4ZTIzJyxcblx0U2FuZ2U6ICdmZmE1MDAnLFxuXHRTYW5nZVlkOiAnZmY0NTAwJyxcblx0U2NFZDogJ2RhNzBkNicsXG5cdHBPZWdUTW5QZDogJ2VlZThhYScsXG5cdHBPZWdZRjogJzk4ZmI5OCcsXG5cdHBPZVFlOiAnYWZlZWVlJyxcblx0cE9ldmlUZXRZZDogJ2RiNzA5MycsXG5cdHBhcGF5YXdFcDogJ2ZmZWZkNScsXG5cdHBIS3B1ZmY6ICdmZmRhYjknLFxuXHRwZXJ1OiAnY2Q4NTNmJyxcblx0cFJrOiAnZmZjMGNiJyxcblx0cGx1bTogJ2RkYTBkZCcsXG5cdHBvd01yWGU6ICdiMGUwZTYnLFxuXHRwdXJwTjogJzgwMDA4MCcsXG5cdFliZWNjYXB1cnBOOiAnNjYzMzk5Jyxcblx0WWQ6ICdmZjAwMDAnLFxuXHRQc3licm93bjogJ2JjOGY4ZicsXG5cdFB5T1hlOiAnNDE2OWUxJyxcblx0c2FkZE5iUHduOiAnOGI0NTEzJyxcblx0c09tb246ICdmYTgwNzInLFxuXHRzYW5keWJQd246ICdmNGE0NjAnLFxuXHRzSGdZRjogJzJlOGI1NycsXG5cdHNIc2hlbGw6ICdmZmY1ZWUnLFxuXHRzaUZuYTogJ2EwNTIyZCcsXG5cdHNpbHZlcjogJ2MwYzBjMCcsXG5cdHNreVhlOiAnODdjZWViJyxcblx0VVhlOiAnNmE1YWNkJyxcblx0VVdheTogJzcwODA5MCcsXG5cdFVnWXk6ICc3MDgwOTAnLFxuXHRzbm93OiAnZmZmYWZhJyxcblx0c3ByUmdnWUY6ICdmZjdmJyxcblx0c3RBbFhlOiAnNDY4MmI0Jyxcblx0dGFuOiAnZDJiNDhjJyxcblx0dGVPOiAnODA4MCcsXG5cdHRFc3ROOiAnZDhiZmQ4Jyxcblx0dG9tYXRvOiAnZmY2MzQ3Jyxcblx0UWU6ICc0MGUwZDAnLFxuXHR2aVRldDogJ2VlODJlZScsXG5cdEpIdDogJ2Y1ZGViMycsXG5cdHdFdGU6ICdmZmZmZmYnLFxuXHR3RXRlc21va2U6ICdmNWY1ZjUnLFxuXHRMdzogJ2ZmZmYwMCcsXG5cdEx3Z1lGOiAnOWFjZDMyJ1xufTtcbmZ1bmN0aW9uIHVucGFjaygpIHtcblx0Y29uc3QgdW5wYWNrZWQgPSB7fTtcblx0Y29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG5hbWVzKTtcblx0Y29uc3QgdGtleXMgPSBPYmplY3Qua2V5cyhtYXAkMSk7XG5cdGxldCBpLCBqLCBrLCBvaywgbms7XG5cdGZvciAoaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG5cdFx0b2sgPSBuayA9IGtleXNbaV07XG5cdFx0Zm9yIChqID0gMDsgaiA8IHRrZXlzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRrID0gdGtleXNbal07XG5cdFx0XHRuayA9IG5rLnJlcGxhY2UoaywgbWFwJDFba10pO1xuXHRcdH1cblx0XHRrID0gcGFyc2VJbnQobmFtZXNbb2tdLCAxNik7XG5cdFx0dW5wYWNrZWRbbmtdID0gW2sgPj4gMTYgJiAweEZGLCBrID4+IDggJiAweEZGLCBrICYgMHhGRl07XG5cdH1cblx0cmV0dXJuIHVucGFja2VkO1xufVxubGV0IG5hbWVzJDE7XG5mdW5jdGlvbiBuYW1lUGFyc2Uoc3RyKSB7XG5cdGlmICghbmFtZXMkMSkge1xuXHRcdG5hbWVzJDEgPSB1bnBhY2soKTtcblx0XHRuYW1lcyQxLnRyYW5zcGFyZW50ID0gWzAsIDAsIDAsIDBdO1xuXHR9XG5cdGNvbnN0IGEgPSBuYW1lcyQxW3N0ci50b0xvd2VyQ2FzZSgpXTtcblx0cmV0dXJuIGEgJiYge1xuXHRcdHI6IGFbMF0sXG5cdFx0ZzogYVsxXSxcblx0XHRiOiBhWzJdLFxuXHRcdGE6IGEubGVuZ3RoID09PSA0ID8gYVszXSA6IDI1NVxuXHR9O1xufVxuZnVuY3Rpb24gbW9kSFNMKHYsIGksIHJhdGlvKSB7XG5cdGlmICh2KSB7XG5cdFx0bGV0IHRtcCA9IHJnYjJoc2wodik7XG5cdFx0dG1wW2ldID0gTWF0aC5tYXgoMCwgTWF0aC5taW4odG1wW2ldICsgdG1wW2ldICogcmF0aW8sIGkgPT09IDAgPyAzNjAgOiAxKSk7XG5cdFx0dG1wID0gaHNsMnJnYih0bXApO1xuXHRcdHYuciA9IHRtcFswXTtcblx0XHR2LmcgPSB0bXBbMV07XG5cdFx0di5iID0gdG1wWzJdO1xuXHR9XG59XG5mdW5jdGlvbiBjbG9uZSh2LCBwcm90bykge1xuXHRyZXR1cm4gdiA/IE9iamVjdC5hc3NpZ24ocHJvdG8gfHwge30sIHYpIDogdjtcbn1cbmZ1bmN0aW9uIGZyb21PYmplY3QoaW5wdXQpIHtcblx0dmFyIHYgPSB7cjogMCwgZzogMCwgYjogMCwgYTogMjU1fTtcblx0aWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG5cdFx0aWYgKGlucHV0Lmxlbmd0aCA+PSAzKSB7XG5cdFx0XHR2ID0ge3I6IGlucHV0WzBdLCBnOiBpbnB1dFsxXSwgYjogaW5wdXRbMl0sIGE6IDI1NX07XG5cdFx0XHRpZiAoaW5wdXQubGVuZ3RoID4gMykge1xuXHRcdFx0XHR2LmEgPSBuMmIoaW5wdXRbM10pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIHtcblx0XHR2ID0gY2xvbmUoaW5wdXQsIHtyOiAwLCBnOiAwLCBiOiAwLCBhOiAxfSk7XG5cdFx0di5hID0gbjJiKHYuYSk7XG5cdH1cblx0cmV0dXJuIHY7XG59XG5mdW5jdGlvbiBmdW5jdGlvblBhcnNlKHN0cikge1xuXHRpZiAoc3RyLmNoYXJBdCgwKSA9PT0gJ3InKSB7XG5cdFx0cmV0dXJuIHJnYlBhcnNlKHN0cik7XG5cdH1cblx0cmV0dXJuIGh1ZVBhcnNlKHN0cik7XG59XG5jbGFzcyBDb2xvciB7XG5cdGNvbnN0cnVjdG9yKGlucHV0KSB7XG5cdFx0aWYgKGlucHV0IGluc3RhbmNlb2YgQ29sb3IpIHtcblx0XHRcdHJldHVybiBpbnB1dDtcblx0XHR9XG5cdFx0Y29uc3QgdHlwZSA9IHR5cGVvZiBpbnB1dDtcblx0XHRsZXQgdjtcblx0XHRpZiAodHlwZSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdHYgPSBmcm9tT2JqZWN0KGlucHV0KTtcblx0XHR9IGVsc2UgaWYgKHR5cGUgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHR2ID0gaGV4UGFyc2UoaW5wdXQpIHx8IG5hbWVQYXJzZShpbnB1dCkgfHwgZnVuY3Rpb25QYXJzZShpbnB1dCk7XG5cdFx0fVxuXHRcdHRoaXMuX3JnYiA9IHY7XG5cdFx0dGhpcy5fdmFsaWQgPSAhIXY7XG5cdH1cblx0Z2V0IHZhbGlkKCkge1xuXHRcdHJldHVybiB0aGlzLl92YWxpZDtcblx0fVxuXHRnZXQgcmdiKCkge1xuXHRcdHZhciB2ID0gY2xvbmUodGhpcy5fcmdiKTtcblx0XHRpZiAodikge1xuXHRcdFx0di5hID0gYjJuKHYuYSk7XG5cdFx0fVxuXHRcdHJldHVybiB2O1xuXHR9XG5cdHNldCByZ2Iob2JqKSB7XG5cdFx0dGhpcy5fcmdiID0gZnJvbU9iamVjdChvYmopO1xuXHR9XG5cdHJnYlN0cmluZygpIHtcblx0XHRyZXR1cm4gdGhpcy5fdmFsaWQgPyByZ2JTdHJpbmcodGhpcy5fcmdiKSA6IHRoaXMuX3JnYjtcblx0fVxuXHRoZXhTdHJpbmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3ZhbGlkID8gaGV4U3RyaW5nKHRoaXMuX3JnYikgOiB0aGlzLl9yZ2I7XG5cdH1cblx0aHNsU3RyaW5nKCkge1xuXHRcdHJldHVybiB0aGlzLl92YWxpZCA/IGhzbFN0cmluZyh0aGlzLl9yZ2IpIDogdGhpcy5fcmdiO1xuXHR9XG5cdG1peChjb2xvciwgd2VpZ2h0KSB7XG5cdFx0Y29uc3QgbWUgPSB0aGlzO1xuXHRcdGlmIChjb2xvcikge1xuXHRcdFx0Y29uc3QgYzEgPSBtZS5yZ2I7XG5cdFx0XHRjb25zdCBjMiA9IGNvbG9yLnJnYjtcblx0XHRcdGxldCB3Mjtcblx0XHRcdGNvbnN0IHAgPSB3ZWlnaHQgPT09IHcyID8gMC41IDogd2VpZ2h0O1xuXHRcdFx0Y29uc3QgdyA9IDIgKiBwIC0gMTtcblx0XHRcdGNvbnN0IGEgPSBjMS5hIC0gYzIuYTtcblx0XHRcdGNvbnN0IHcxID0gKCh3ICogYSA9PT0gLTEgPyB3IDogKHcgKyBhKSAvICgxICsgdyAqIGEpKSArIDEpIC8gMi4wO1xuXHRcdFx0dzIgPSAxIC0gdzE7XG5cdFx0XHRjMS5yID0gMHhGRiAmIHcxICogYzEuciArIHcyICogYzIuciArIDAuNTtcblx0XHRcdGMxLmcgPSAweEZGICYgdzEgKiBjMS5nICsgdzIgKiBjMi5nICsgMC41O1xuXHRcdFx0YzEuYiA9IDB4RkYgJiB3MSAqIGMxLmIgKyB3MiAqIGMyLmIgKyAwLjU7XG5cdFx0XHRjMS5hID0gcCAqIGMxLmEgKyAoMSAtIHApICogYzIuYTtcblx0XHRcdG1lLnJnYiA9IGMxO1xuXHRcdH1cblx0XHRyZXR1cm4gbWU7XG5cdH1cblx0Y2xvbmUoKSB7XG5cdFx0cmV0dXJuIG5ldyBDb2xvcih0aGlzLnJnYik7XG5cdH1cblx0YWxwaGEoYSkge1xuXHRcdHRoaXMuX3JnYi5hID0gbjJiKGEpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cdGNsZWFyZXIocmF0aW8pIHtcblx0XHRjb25zdCByZ2IgPSB0aGlzLl9yZ2I7XG5cdFx0cmdiLmEgKj0gMSAtIHJhdGlvO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cdGdyZXlzY2FsZSgpIHtcblx0XHRjb25zdCByZ2IgPSB0aGlzLl9yZ2I7XG5cdFx0Y29uc3QgdmFsID0gcm91bmQocmdiLnIgKiAwLjMgKyByZ2IuZyAqIDAuNTkgKyByZ2IuYiAqIDAuMTEpO1xuXHRcdHJnYi5yID0gcmdiLmcgPSByZ2IuYiA9IHZhbDtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXHRvcGFxdWVyKHJhdGlvKSB7XG5cdFx0Y29uc3QgcmdiID0gdGhpcy5fcmdiO1xuXHRcdHJnYi5hICo9IDEgKyByYXRpbztcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXHRuZWdhdGUoKSB7XG5cdFx0Y29uc3QgdiA9IHRoaXMuX3JnYjtcblx0XHR2LnIgPSAyNTUgLSB2LnI7XG5cdFx0di5nID0gMjU1IC0gdi5nO1xuXHRcdHYuYiA9IDI1NSAtIHYuYjtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXHRsaWdodGVuKHJhdGlvKSB7XG5cdFx0bW9kSFNMKHRoaXMuX3JnYiwgMiwgcmF0aW8pO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cdGRhcmtlbihyYXRpbykge1xuXHRcdG1vZEhTTCh0aGlzLl9yZ2IsIDIsIC1yYXRpbyk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblx0c2F0dXJhdGUocmF0aW8pIHtcblx0XHRtb2RIU0wodGhpcy5fcmdiLCAxLCByYXRpbyk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblx0ZGVzYXR1cmF0ZShyYXRpbykge1xuXHRcdG1vZEhTTCh0aGlzLl9yZ2IsIDEsIC1yYXRpbyk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblx0cm90YXRlKGRlZykge1xuXHRcdHJvdGF0ZSh0aGlzLl9yZ2IsIGRlZyk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn1cbmZ1bmN0aW9uIGluZGV4X2VzbShpbnB1dCkge1xuXHRyZXR1cm4gbmV3IENvbG9yKGlucHV0KTtcbn1cblxuY29uc3QgaXNQYXR0ZXJuT3JHcmFkaWVudCA9ICh2YWx1ZSkgPT4gdmFsdWUgaW5zdGFuY2VvZiBDYW52YXNHcmFkaWVudCB8fCB2YWx1ZSBpbnN0YW5jZW9mIENhbnZhc1BhdHRlcm47XG5mdW5jdGlvbiBjb2xvcih2YWx1ZSkge1xuICByZXR1cm4gaXNQYXR0ZXJuT3JHcmFkaWVudCh2YWx1ZSkgPyB2YWx1ZSA6IGluZGV4X2VzbSh2YWx1ZSk7XG59XG5mdW5jdGlvbiBnZXRIb3ZlckNvbG9yKHZhbHVlKSB7XG4gIHJldHVybiBpc1BhdHRlcm5PckdyYWRpZW50KHZhbHVlKVxuICAgID8gdmFsdWVcbiAgICA6IGluZGV4X2VzbSh2YWx1ZSkuc2F0dXJhdGUoMC41KS5kYXJrZW4oMC4xKS5oZXhTdHJpbmcoKTtcbn1cblxuY29uc3Qgb3ZlcnJpZGVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmNvbnN0IGRlc2NyaXB0b3JzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmZ1bmN0aW9uIGdldFNjb3BlJDEobm9kZSwga2V5KSB7XG4gIGlmICgha2V5KSB7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cbiAgY29uc3Qga2V5cyA9IGtleS5zcGxpdCgnLicpO1xuICBmb3IgKGxldCBpID0gMCwgbiA9IGtleXMubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgY29uc3QgayA9IGtleXNbaV07XG4gICAgbm9kZSA9IG5vZGVba10gfHwgKG5vZGVba10gPSBPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgfVxuICByZXR1cm4gbm9kZTtcbn1cbmZ1bmN0aW9uIHNldChyb290LCBzY29wZSwgdmFsdWVzKSB7XG4gIGlmICh0eXBlb2Ygc2NvcGUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIG1lcmdlKGdldFNjb3BlJDEocm9vdCwgc2NvcGUpLCB2YWx1ZXMpO1xuICB9XG4gIHJldHVybiBtZXJnZShnZXRTY29wZSQxKHJvb3QsICcnKSwgc2NvcGUpO1xufVxuY2xhc3MgRGVmYXVsdHMge1xuICBjb25zdHJ1Y3RvcihfZGVzY3JpcHRvcnMpIHtcbiAgICB0aGlzLmFuaW1hdGlvbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmJhY2tncm91bmRDb2xvciA9ICdyZ2JhKDAsMCwwLDAuMSknO1xuICAgIHRoaXMuYm9yZGVyQ29sb3IgPSAncmdiYSgwLDAsMCwwLjEpJztcbiAgICB0aGlzLmNvbG9yID0gJyM2NjYnO1xuICAgIHRoaXMuZGF0YXNldHMgPSB7fTtcbiAgICB0aGlzLmRldmljZVBpeGVsUmF0aW8gPSAoY29udGV4dCkgPT4gY29udGV4dC5jaGFydC5wbGF0Zm9ybS5nZXREZXZpY2VQaXhlbFJhdGlvKCk7XG4gICAgdGhpcy5lbGVtZW50cyA9IHt9O1xuICAgIHRoaXMuZXZlbnRzID0gW1xuICAgICAgJ21vdXNlbW92ZScsXG4gICAgICAnbW91c2VvdXQnLFxuICAgICAgJ2NsaWNrJyxcbiAgICAgICd0b3VjaHN0YXJ0JyxcbiAgICAgICd0b3VjaG1vdmUnXG4gICAgXTtcbiAgICB0aGlzLmZvbnQgPSB7XG4gICAgICBmYW1pbHk6IFwiJ0hlbHZldGljYSBOZXVlJywgJ0hlbHZldGljYScsICdBcmlhbCcsIHNhbnMtc2VyaWZcIixcbiAgICAgIHNpemU6IDEyLFxuICAgICAgc3R5bGU6ICdub3JtYWwnLFxuICAgICAgbGluZUhlaWdodDogMS4yLFxuICAgICAgd2VpZ2h0OiBudWxsXG4gICAgfTtcbiAgICB0aGlzLmhvdmVyID0ge307XG4gICAgdGhpcy5ob3ZlckJhY2tncm91bmRDb2xvciA9IChjdHgsIG9wdGlvbnMpID0+IGdldEhvdmVyQ29sb3Iob3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IpO1xuICAgIHRoaXMuaG92ZXJCb3JkZXJDb2xvciA9IChjdHgsIG9wdGlvbnMpID0+IGdldEhvdmVyQ29sb3Iob3B0aW9ucy5ib3JkZXJDb2xvcik7XG4gICAgdGhpcy5ob3ZlckNvbG9yID0gKGN0eCwgb3B0aW9ucykgPT4gZ2V0SG92ZXJDb2xvcihvcHRpb25zLmNvbG9yKTtcbiAgICB0aGlzLmluZGV4QXhpcyA9ICd4JztcbiAgICB0aGlzLmludGVyYWN0aW9uID0ge1xuICAgICAgbW9kZTogJ25lYXJlc3QnLFxuICAgICAgaW50ZXJzZWN0OiB0cnVlXG4gICAgfTtcbiAgICB0aGlzLm1haW50YWluQXNwZWN0UmF0aW8gPSB0cnVlO1xuICAgIHRoaXMub25Ib3ZlciA9IG51bGw7XG4gICAgdGhpcy5vbkNsaWNrID0gbnVsbDtcbiAgICB0aGlzLnBhcnNpbmcgPSB0cnVlO1xuICAgIHRoaXMucGx1Z2lucyA9IHt9O1xuICAgIHRoaXMucmVzcG9uc2l2ZSA9IHRydWU7XG4gICAgdGhpcy5zY2FsZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnNjYWxlcyA9IHt9O1xuICAgIHRoaXMuc2hvd0xpbmUgPSB0cnVlO1xuICAgIHRoaXMuZGVzY3JpYmUoX2Rlc2NyaXB0b3JzKTtcbiAgfVxuICBzZXQoc2NvcGUsIHZhbHVlcykge1xuICAgIHJldHVybiBzZXQodGhpcywgc2NvcGUsIHZhbHVlcyk7XG4gIH1cbiAgZ2V0KHNjb3BlKSB7XG4gICAgcmV0dXJuIGdldFNjb3BlJDEodGhpcywgc2NvcGUpO1xuICB9XG4gIGRlc2NyaWJlKHNjb3BlLCB2YWx1ZXMpIHtcbiAgICByZXR1cm4gc2V0KGRlc2NyaXB0b3JzLCBzY29wZSwgdmFsdWVzKTtcbiAgfVxuICBvdmVycmlkZShzY29wZSwgdmFsdWVzKSB7XG4gICAgcmV0dXJuIHNldChvdmVycmlkZXMsIHNjb3BlLCB2YWx1ZXMpO1xuICB9XG4gIHJvdXRlKHNjb3BlLCBuYW1lLCB0YXJnZXRTY29wZSwgdGFyZ2V0TmFtZSkge1xuICAgIGNvbnN0IHNjb3BlT2JqZWN0ID0gZ2V0U2NvcGUkMSh0aGlzLCBzY29wZSk7XG4gICAgY29uc3QgdGFyZ2V0U2NvcGVPYmplY3QgPSBnZXRTY29wZSQxKHRoaXMsIHRhcmdldFNjb3BlKTtcbiAgICBjb25zdCBwcml2YXRlTmFtZSA9ICdfJyArIG5hbWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoc2NvcGVPYmplY3QsIHtcbiAgICAgIFtwcml2YXRlTmFtZV06IHtcbiAgICAgICAgdmFsdWU6IHNjb3BlT2JqZWN0W25hbWVdLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgfSxcbiAgICAgIFtuYW1lXToge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgY29uc3QgbG9jYWwgPSB0aGlzW3ByaXZhdGVOYW1lXTtcbiAgICAgICAgICBjb25zdCB0YXJnZXQgPSB0YXJnZXRTY29wZU9iamVjdFt0YXJnZXROYW1lXTtcbiAgICAgICAgICBpZiAoaXNPYmplY3QobG9jYWwpKSB7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgdGFyZ2V0LCBsb2NhbCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB2YWx1ZU9yRGVmYXVsdChsb2NhbCwgdGFyZ2V0KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgICAgdGhpc1twcml2YXRlTmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG52YXIgZGVmYXVsdHMgPSBuZXcgRGVmYXVsdHMoe1xuICBfc2NyaXB0YWJsZTogKG5hbWUpID0+ICFuYW1lLnN0YXJ0c1dpdGgoJ29uJyksXG4gIF9pbmRleGFibGU6IChuYW1lKSA9PiBuYW1lICE9PSAnZXZlbnRzJyxcbiAgaG92ZXI6IHtcbiAgICBfZmFsbGJhY2s6ICdpbnRlcmFjdGlvbidcbiAgfSxcbiAgaW50ZXJhY3Rpb246IHtcbiAgICBfc2NyaXB0YWJsZTogZmFsc2UsXG4gICAgX2luZGV4YWJsZTogZmFsc2UsXG4gIH1cbn0pO1xuXG5mdW5jdGlvbiB0b0ZvbnRTdHJpbmcoZm9udCkge1xuICBpZiAoIWZvbnQgfHwgaXNOdWxsT3JVbmRlZihmb250LnNpemUpIHx8IGlzTnVsbE9yVW5kZWYoZm9udC5mYW1pbHkpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIChmb250LnN0eWxlID8gZm9udC5zdHlsZSArICcgJyA6ICcnKVxuXHRcdCsgKGZvbnQud2VpZ2h0ID8gZm9udC53ZWlnaHQgKyAnICcgOiAnJylcblx0XHQrIGZvbnQuc2l6ZSArICdweCAnXG5cdFx0KyBmb250LmZhbWlseTtcbn1cbmZ1bmN0aW9uIF9tZWFzdXJlVGV4dChjdHgsIGRhdGEsIGdjLCBsb25nZXN0LCBzdHJpbmcpIHtcbiAgbGV0IHRleHRXaWR0aCA9IGRhdGFbc3RyaW5nXTtcbiAgaWYgKCF0ZXh0V2lkdGgpIHtcbiAgICB0ZXh0V2lkdGggPSBkYXRhW3N0cmluZ10gPSBjdHgubWVhc3VyZVRleHQoc3RyaW5nKS53aWR0aDtcbiAgICBnYy5wdXNoKHN0cmluZyk7XG4gIH1cbiAgaWYgKHRleHRXaWR0aCA+IGxvbmdlc3QpIHtcbiAgICBsb25nZXN0ID0gdGV4dFdpZHRoO1xuICB9XG4gIHJldHVybiBsb25nZXN0O1xufVxuZnVuY3Rpb24gX2xvbmdlc3RUZXh0KGN0eCwgZm9udCwgYXJyYXlPZlRoaW5ncywgY2FjaGUpIHtcbiAgY2FjaGUgPSBjYWNoZSB8fCB7fTtcbiAgbGV0IGRhdGEgPSBjYWNoZS5kYXRhID0gY2FjaGUuZGF0YSB8fCB7fTtcbiAgbGV0IGdjID0gY2FjaGUuZ2FyYmFnZUNvbGxlY3QgPSBjYWNoZS5nYXJiYWdlQ29sbGVjdCB8fCBbXTtcbiAgaWYgKGNhY2hlLmZvbnQgIT09IGZvbnQpIHtcbiAgICBkYXRhID0gY2FjaGUuZGF0YSA9IHt9O1xuICAgIGdjID0gY2FjaGUuZ2FyYmFnZUNvbGxlY3QgPSBbXTtcbiAgICBjYWNoZS5mb250ID0gZm9udDtcbiAgfVxuICBjdHguc2F2ZSgpO1xuICBjdHguZm9udCA9IGZvbnQ7XG4gIGxldCBsb25nZXN0ID0gMDtcbiAgY29uc3QgaWxlbiA9IGFycmF5T2ZUaGluZ3MubGVuZ3RoO1xuICBsZXQgaSwgaiwgamxlbiwgdGhpbmcsIG5lc3RlZFRoaW5nO1xuICBmb3IgKGkgPSAwOyBpIDwgaWxlbjsgaSsrKSB7XG4gICAgdGhpbmcgPSBhcnJheU9mVGhpbmdzW2ldO1xuICAgIGlmICh0aGluZyAhPT0gdW5kZWZpbmVkICYmIHRoaW5nICE9PSBudWxsICYmIGlzQXJyYXkodGhpbmcpICE9PSB0cnVlKSB7XG4gICAgICBsb25nZXN0ID0gX21lYXN1cmVUZXh0KGN0eCwgZGF0YSwgZ2MsIGxvbmdlc3QsIHRoaW5nKTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkodGhpbmcpKSB7XG4gICAgICBmb3IgKGogPSAwLCBqbGVuID0gdGhpbmcubGVuZ3RoOyBqIDwgamxlbjsgaisrKSB7XG4gICAgICAgIG5lc3RlZFRoaW5nID0gdGhpbmdbal07XG4gICAgICAgIGlmIChuZXN0ZWRUaGluZyAhPT0gdW5kZWZpbmVkICYmIG5lc3RlZFRoaW5nICE9PSBudWxsICYmICFpc0FycmF5KG5lc3RlZFRoaW5nKSkge1xuICAgICAgICAgIGxvbmdlc3QgPSBfbWVhc3VyZVRleHQoY3R4LCBkYXRhLCBnYywgbG9uZ2VzdCwgbmVzdGVkVGhpbmcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGN0eC5yZXN0b3JlKCk7XG4gIGNvbnN0IGdjTGVuID0gZ2MubGVuZ3RoIC8gMjtcbiAgaWYgKGdjTGVuID4gYXJyYXlPZlRoaW5ncy5sZW5ndGgpIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgZ2NMZW47IGkrKykge1xuICAgICAgZGVsZXRlIGRhdGFbZ2NbaV1dO1xuICAgIH1cbiAgICBnYy5zcGxpY2UoMCwgZ2NMZW4pO1xuICB9XG4gIHJldHVybiBsb25nZXN0O1xufVxuZnVuY3Rpb24gX2FsaWduUGl4ZWwoY2hhcnQsIHBpeGVsLCB3aWR0aCkge1xuICBjb25zdCBkZXZpY2VQaXhlbFJhdGlvID0gY2hhcnQuY3VycmVudERldmljZVBpeGVsUmF0aW87XG4gIGNvbnN0IGhhbGZXaWR0aCA9IHdpZHRoICE9PSAwID8gTWF0aC5tYXgod2lkdGggLyAyLCAwLjUpIDogMDtcbiAgcmV0dXJuIE1hdGgucm91bmQoKHBpeGVsIC0gaGFsZldpZHRoKSAqIGRldmljZVBpeGVsUmF0aW8pIC8gZGV2aWNlUGl4ZWxSYXRpbyArIGhhbGZXaWR0aDtcbn1cbmZ1bmN0aW9uIGNsZWFyQ2FudmFzKGNhbnZhcywgY3R4KSB7XG4gIGN0eCA9IGN0eCB8fCBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgY3R4LnNhdmUoKTtcbiAgY3R4LnJlc2V0VHJhbnNmb3JtKCk7XG4gIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgY3R4LnJlc3RvcmUoKTtcbn1cbmZ1bmN0aW9uIGRyYXdQb2ludChjdHgsIG9wdGlvbnMsIHgsIHkpIHtcbiAgbGV0IHR5cGUsIHhPZmZzZXQsIHlPZmZzZXQsIHNpemUsIGNvcm5lclJhZGl1cztcbiAgY29uc3Qgc3R5bGUgPSBvcHRpb25zLnBvaW50U3R5bGU7XG4gIGNvbnN0IHJvdGF0aW9uID0gb3B0aW9ucy5yb3RhdGlvbjtcbiAgY29uc3QgcmFkaXVzID0gb3B0aW9ucy5yYWRpdXM7XG4gIGxldCByYWQgPSAocm90YXRpb24gfHwgMCkgKiBSQURfUEVSX0RFRztcbiAgaWYgKHN0eWxlICYmIHR5cGVvZiBzdHlsZSA9PT0gJ29iamVjdCcpIHtcbiAgICB0eXBlID0gc3R5bGUudG9TdHJpbmcoKTtcbiAgICBpZiAodHlwZSA9PT0gJ1tvYmplY3QgSFRNTEltYWdlRWxlbWVudF0nIHx8IHR5cGUgPT09ICdbb2JqZWN0IEhUTUxDYW52YXNFbGVtZW50XScpIHtcbiAgICAgIGN0eC5zYXZlKCk7XG4gICAgICBjdHgudHJhbnNsYXRlKHgsIHkpO1xuICAgICAgY3R4LnJvdGF0ZShyYWQpO1xuICAgICAgY3R4LmRyYXdJbWFnZShzdHlsZSwgLXN0eWxlLndpZHRoIC8gMiwgLXN0eWxlLmhlaWdodCAvIDIsIHN0eWxlLndpZHRoLCBzdHlsZS5oZWlnaHQpO1xuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgaWYgKGlzTmFOKHJhZGl1cykgfHwgcmFkaXVzIDw9IDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY3R4LmJlZ2luUGF0aCgpO1xuICBzd2l0Y2ggKHN0eWxlKSB7XG4gIGRlZmF1bHQ6XG4gICAgY3R4LmFyYyh4LCB5LCByYWRpdXMsIDAsIFRBVSk7XG4gICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIGJyZWFrO1xuICBjYXNlICd0cmlhbmdsZSc6XG4gICAgY3R4Lm1vdmVUbyh4ICsgTWF0aC5zaW4ocmFkKSAqIHJhZGl1cywgeSAtIE1hdGguY29zKHJhZCkgKiByYWRpdXMpO1xuICAgIHJhZCArPSBUV09fVEhJUkRTX1BJO1xuICAgIGN0eC5saW5lVG8oeCArIE1hdGguc2luKHJhZCkgKiByYWRpdXMsIHkgLSBNYXRoLmNvcyhyYWQpICogcmFkaXVzKTtcbiAgICByYWQgKz0gVFdPX1RISVJEU19QSTtcbiAgICBjdHgubGluZVRvKHggKyBNYXRoLnNpbihyYWQpICogcmFkaXVzLCB5IC0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cyk7XG4gICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIGJyZWFrO1xuICBjYXNlICdyZWN0Um91bmRlZCc6XG4gICAgY29ybmVyUmFkaXVzID0gcmFkaXVzICogMC41MTY7XG4gICAgc2l6ZSA9IHJhZGl1cyAtIGNvcm5lclJhZGl1cztcbiAgICB4T2Zmc2V0ID0gTWF0aC5jb3MocmFkICsgUVVBUlRFUl9QSSkgKiBzaXplO1xuICAgIHlPZmZzZXQgPSBNYXRoLnNpbihyYWQgKyBRVUFSVEVSX1BJKSAqIHNpemU7XG4gICAgY3R4LmFyYyh4IC0geE9mZnNldCwgeSAtIHlPZmZzZXQsIGNvcm5lclJhZGl1cywgcmFkIC0gUEksIHJhZCAtIEhBTEZfUEkpO1xuICAgIGN0eC5hcmMoeCArIHlPZmZzZXQsIHkgLSB4T2Zmc2V0LCBjb3JuZXJSYWRpdXMsIHJhZCAtIEhBTEZfUEksIHJhZCk7XG4gICAgY3R4LmFyYyh4ICsgeE9mZnNldCwgeSArIHlPZmZzZXQsIGNvcm5lclJhZGl1cywgcmFkLCByYWQgKyBIQUxGX1BJKTtcbiAgICBjdHguYXJjKHggLSB5T2Zmc2V0LCB5ICsgeE9mZnNldCwgY29ybmVyUmFkaXVzLCByYWQgKyBIQUxGX1BJLCByYWQgKyBQSSk7XG4gICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIGJyZWFrO1xuICBjYXNlICdyZWN0JzpcbiAgICBpZiAoIXJvdGF0aW9uKSB7XG4gICAgICBzaXplID0gTWF0aC5TUVJUMV8yICogcmFkaXVzO1xuICAgICAgY3R4LnJlY3QoeCAtIHNpemUsIHkgLSBzaXplLCAyICogc2l6ZSwgMiAqIHNpemUpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJhZCArPSBRVUFSVEVSX1BJO1xuICBjYXNlICdyZWN0Um90JzpcbiAgICB4T2Zmc2V0ID0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cztcbiAgICB5T2Zmc2V0ID0gTWF0aC5zaW4ocmFkKSAqIHJhZGl1cztcbiAgICBjdHgubW92ZVRvKHggLSB4T2Zmc2V0LCB5IC0geU9mZnNldCk7XG4gICAgY3R4LmxpbmVUbyh4ICsgeU9mZnNldCwgeSAtIHhPZmZzZXQpO1xuICAgIGN0eC5saW5lVG8oeCArIHhPZmZzZXQsIHkgKyB5T2Zmc2V0KTtcbiAgICBjdHgubGluZVRvKHggLSB5T2Zmc2V0LCB5ICsgeE9mZnNldCk7XG4gICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIGJyZWFrO1xuICBjYXNlICdjcm9zc1JvdCc6XG4gICAgcmFkICs9IFFVQVJURVJfUEk7XG4gIGNhc2UgJ2Nyb3NzJzpcbiAgICB4T2Zmc2V0ID0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cztcbiAgICB5T2Zmc2V0ID0gTWF0aC5zaW4ocmFkKSAqIHJhZGl1cztcbiAgICBjdHgubW92ZVRvKHggLSB4T2Zmc2V0LCB5IC0geU9mZnNldCk7XG4gICAgY3R4LmxpbmVUbyh4ICsgeE9mZnNldCwgeSArIHlPZmZzZXQpO1xuICAgIGN0eC5tb3ZlVG8oeCArIHlPZmZzZXQsIHkgLSB4T2Zmc2V0KTtcbiAgICBjdHgubGluZVRvKHggLSB5T2Zmc2V0LCB5ICsgeE9mZnNldCk7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ3N0YXInOlxuICAgIHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQpICogcmFkaXVzO1xuICAgIHlPZmZzZXQgPSBNYXRoLnNpbihyYWQpICogcmFkaXVzO1xuICAgIGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXQsIHkgLSB5T2Zmc2V0KTtcbiAgICBjdHgubGluZVRvKHggKyB4T2Zmc2V0LCB5ICsgeU9mZnNldCk7XG4gICAgY3R4Lm1vdmVUbyh4ICsgeU9mZnNldCwgeSAtIHhPZmZzZXQpO1xuICAgIGN0eC5saW5lVG8oeCAtIHlPZmZzZXQsIHkgKyB4T2Zmc2V0KTtcbiAgICByYWQgKz0gUVVBUlRFUl9QSTtcbiAgICB4T2Zmc2V0ID0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cztcbiAgICB5T2Zmc2V0ID0gTWF0aC5zaW4ocmFkKSAqIHJhZGl1cztcbiAgICBjdHgubW92ZVRvKHggLSB4T2Zmc2V0LCB5IC0geU9mZnNldCk7XG4gICAgY3R4LmxpbmVUbyh4ICsgeE9mZnNldCwgeSArIHlPZmZzZXQpO1xuICAgIGN0eC5tb3ZlVG8oeCArIHlPZmZzZXQsIHkgLSB4T2Zmc2V0KTtcbiAgICBjdHgubGluZVRvKHggLSB5T2Zmc2V0LCB5ICsgeE9mZnNldCk7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ2xpbmUnOlxuICAgIHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQpICogcmFkaXVzO1xuICAgIHlPZmZzZXQgPSBNYXRoLnNpbihyYWQpICogcmFkaXVzO1xuICAgIGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXQsIHkgLSB5T2Zmc2V0KTtcbiAgICBjdHgubGluZVRvKHggKyB4T2Zmc2V0LCB5ICsgeU9mZnNldCk7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ2Rhc2gnOlxuICAgIGN0eC5tb3ZlVG8oeCwgeSk7XG4gICAgY3R4LmxpbmVUbyh4ICsgTWF0aC5jb3MocmFkKSAqIHJhZGl1cywgeSArIE1hdGguc2luKHJhZCkgKiByYWRpdXMpO1xuICAgIGJyZWFrO1xuICB9XG4gIGN0eC5maWxsKCk7XG4gIGlmIChvcHRpb25zLmJvcmRlcldpZHRoID4gMCkge1xuICAgIGN0eC5zdHJva2UoKTtcbiAgfVxufVxuZnVuY3Rpb24gX2lzUG9pbnRJbkFyZWEocG9pbnQsIGFyZWEsIG1hcmdpbikge1xuICBtYXJnaW4gPSBtYXJnaW4gfHwgMC41O1xuICByZXR1cm4gcG9pbnQgJiYgcG9pbnQueCA+IGFyZWEubGVmdCAtIG1hcmdpbiAmJiBwb2ludC54IDwgYXJlYS5yaWdodCArIG1hcmdpbiAmJlxuXHRcdHBvaW50LnkgPiBhcmVhLnRvcCAtIG1hcmdpbiAmJiBwb2ludC55IDwgYXJlYS5ib3R0b20gKyBtYXJnaW47XG59XG5mdW5jdGlvbiBjbGlwQXJlYShjdHgsIGFyZWEpIHtcbiAgY3R4LnNhdmUoKTtcbiAgY3R4LmJlZ2luUGF0aCgpO1xuICBjdHgucmVjdChhcmVhLmxlZnQsIGFyZWEudG9wLCBhcmVhLnJpZ2h0IC0gYXJlYS5sZWZ0LCBhcmVhLmJvdHRvbSAtIGFyZWEudG9wKTtcbiAgY3R4LmNsaXAoKTtcbn1cbmZ1bmN0aW9uIHVuY2xpcEFyZWEoY3R4KSB7XG4gIGN0eC5yZXN0b3JlKCk7XG59XG5mdW5jdGlvbiBfc3RlcHBlZExpbmVUbyhjdHgsIHByZXZpb3VzLCB0YXJnZXQsIGZsaXAsIG1vZGUpIHtcbiAgaWYgKCFwcmV2aW91cykge1xuICAgIHJldHVybiBjdHgubGluZVRvKHRhcmdldC54LCB0YXJnZXQueSk7XG4gIH1cbiAgaWYgKG1vZGUgPT09ICdtaWRkbGUnKSB7XG4gICAgY29uc3QgbWlkcG9pbnQgPSAocHJldmlvdXMueCArIHRhcmdldC54KSAvIDIuMDtcbiAgICBjdHgubGluZVRvKG1pZHBvaW50LCBwcmV2aW91cy55KTtcbiAgICBjdHgubGluZVRvKG1pZHBvaW50LCB0YXJnZXQueSk7XG4gIH0gZWxzZSBpZiAobW9kZSA9PT0gJ2FmdGVyJyAhPT0gISFmbGlwKSB7XG4gICAgY3R4LmxpbmVUbyhwcmV2aW91cy54LCB0YXJnZXQueSk7XG4gIH0gZWxzZSB7XG4gICAgY3R4LmxpbmVUbyh0YXJnZXQueCwgcHJldmlvdXMueSk7XG4gIH1cbiAgY3R4LmxpbmVUbyh0YXJnZXQueCwgdGFyZ2V0LnkpO1xufVxuZnVuY3Rpb24gX2JlemllckN1cnZlVG8oY3R4LCBwcmV2aW91cywgdGFyZ2V0LCBmbGlwKSB7XG4gIGlmICghcHJldmlvdXMpIHtcbiAgICByZXR1cm4gY3R4LmxpbmVUbyh0YXJnZXQueCwgdGFyZ2V0LnkpO1xuICB9XG4gIGN0eC5iZXppZXJDdXJ2ZVRvKFxuICAgIGZsaXAgPyBwcmV2aW91cy5jcDF4IDogcHJldmlvdXMuY3AyeCxcbiAgICBmbGlwID8gcHJldmlvdXMuY3AxeSA6IHByZXZpb3VzLmNwMnksXG4gICAgZmxpcCA/IHRhcmdldC5jcDJ4IDogdGFyZ2V0LmNwMXgsXG4gICAgZmxpcCA/IHRhcmdldC5jcDJ5IDogdGFyZ2V0LmNwMXksXG4gICAgdGFyZ2V0LngsXG4gICAgdGFyZ2V0LnkpO1xufVxuZnVuY3Rpb24gcmVuZGVyVGV4dChjdHgsIHRleHQsIHgsIHksIGZvbnQsIG9wdHMgPSB7fSkge1xuICBjb25zdCBsaW5lcyA9IGlzQXJyYXkodGV4dCkgPyB0ZXh0IDogW3RleHRdO1xuICBjb25zdCBzdHJva2UgPSBvcHRzLnN0cm9rZVdpZHRoID4gMCAmJiBvcHRzLnN0cm9rZUNvbG9yICE9PSAnJztcbiAgbGV0IGksIGxpbmU7XG4gIGN0eC5zYXZlKCk7XG4gIGlmIChvcHRzLnRyYW5zbGF0aW9uKSB7XG4gICAgY3R4LnRyYW5zbGF0ZShvcHRzLnRyYW5zbGF0aW9uWzBdLCBvcHRzLnRyYW5zbGF0aW9uWzFdKTtcbiAgfVxuICBpZiAoIWlzTnVsbE9yVW5kZWYob3B0cy5yb3RhdGlvbikpIHtcbiAgICBjdHgucm90YXRlKG9wdHMucm90YXRpb24pO1xuICB9XG4gIGN0eC5mb250ID0gZm9udC5zdHJpbmc7XG4gIGlmIChvcHRzLmNvbG9yKSB7XG4gICAgY3R4LmZpbGxTdHlsZSA9IG9wdHMuY29sb3I7XG4gIH1cbiAgaWYgKG9wdHMudGV4dEFsaWduKSB7XG4gICAgY3R4LnRleHRBbGlnbiA9IG9wdHMudGV4dEFsaWduO1xuICB9XG4gIGlmIChvcHRzLnRleHRCYXNlbGluZSkge1xuICAgIGN0eC50ZXh0QmFzZWxpbmUgPSBvcHRzLnRleHRCYXNlbGluZTtcbiAgfVxuICBmb3IgKGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyArK2kpIHtcbiAgICBsaW5lID0gbGluZXNbaV07XG4gICAgaWYgKHN0cm9rZSkge1xuICAgICAgaWYgKG9wdHMuc3Ryb2tlQ29sb3IpIHtcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gb3B0cy5zdHJva2VDb2xvcjtcbiAgICAgIH1cbiAgICAgIGlmICghaXNOdWxsT3JVbmRlZihvcHRzLnN0cm9rZVdpZHRoKSkge1xuICAgICAgICBjdHgubGluZVdpZHRoID0gb3B0cy5zdHJva2VXaWR0aDtcbiAgICAgIH1cbiAgICAgIGN0eC5zdHJva2VUZXh0KGxpbmUsIHgsIHksIG9wdHMubWF4V2lkdGgpO1xuICAgIH1cbiAgICBjdHguZmlsbFRleHQobGluZSwgeCwgeSwgb3B0cy5tYXhXaWR0aCk7XG4gICAgaWYgKG9wdHMuc3RyaWtldGhyb3VnaCB8fCBvcHRzLnVuZGVybGluZSkge1xuICAgICAgY29uc3QgbWV0cmljcyA9IGN0eC5tZWFzdXJlVGV4dChsaW5lKTtcbiAgICAgIGNvbnN0IGxlZnQgPSB4IC0gbWV0cmljcy5hY3R1YWxCb3VuZGluZ0JveExlZnQ7XG4gICAgICBjb25zdCByaWdodCA9IHggKyBtZXRyaWNzLmFjdHVhbEJvdW5kaW5nQm94UmlnaHQ7XG4gICAgICBjb25zdCB0b3AgPSB5IC0gbWV0cmljcy5hY3R1YWxCb3VuZGluZ0JveEFzY2VudDtcbiAgICAgIGNvbnN0IGJvdHRvbSA9IHkgKyBtZXRyaWNzLmFjdHVhbEJvdW5kaW5nQm94RGVzY2VudDtcbiAgICAgIGNvbnN0IHlEZWNvcmF0aW9uID0gb3B0cy5zdHJpa2V0aHJvdWdoID8gKHRvcCArIGJvdHRvbSkgLyAyIDogYm90dG9tO1xuICAgICAgY3R4LnN0cm9rZVN0eWxlID0gY3R4LmZpbGxTdHlsZTtcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgIGN0eC5saW5lV2lkdGggPSBvcHRzLmRlY29yYXRpb25XaWR0aCB8fCAyO1xuICAgICAgY3R4Lm1vdmVUbyhsZWZ0LCB5RGVjb3JhdGlvbik7XG4gICAgICBjdHgubGluZVRvKHJpZ2h0LCB5RGVjb3JhdGlvbik7XG4gICAgICBjdHguc3Ryb2tlKCk7XG4gICAgfVxuICAgIHkgKz0gZm9udC5saW5lSGVpZ2h0O1xuICB9XG4gIGN0eC5yZXN0b3JlKCk7XG59XG5mdW5jdGlvbiBhZGRSb3VuZGVkUmVjdFBhdGgoY3R4LCByZWN0KSB7XG4gIGNvbnN0IHt4LCB5LCB3LCBoLCByYWRpdXN9ID0gcmVjdDtcbiAgY3R4LmFyYyh4ICsgcmFkaXVzLnRvcExlZnQsIHkgKyByYWRpdXMudG9wTGVmdCwgcmFkaXVzLnRvcExlZnQsIC1IQUxGX1BJLCBQSSwgdHJ1ZSk7XG4gIGN0eC5saW5lVG8oeCwgeSArIGggLSByYWRpdXMuYm90dG9tTGVmdCk7XG4gIGN0eC5hcmMoeCArIHJhZGl1cy5ib3R0b21MZWZ0LCB5ICsgaCAtIHJhZGl1cy5ib3R0b21MZWZ0LCByYWRpdXMuYm90dG9tTGVmdCwgUEksIEhBTEZfUEksIHRydWUpO1xuICBjdHgubGluZVRvKHggKyB3IC0gcmFkaXVzLmJvdHRvbVJpZ2h0LCB5ICsgaCk7XG4gIGN0eC5hcmMoeCArIHcgLSByYWRpdXMuYm90dG9tUmlnaHQsIHkgKyBoIC0gcmFkaXVzLmJvdHRvbVJpZ2h0LCByYWRpdXMuYm90dG9tUmlnaHQsIEhBTEZfUEksIDAsIHRydWUpO1xuICBjdHgubGluZVRvKHggKyB3LCB5ICsgcmFkaXVzLnRvcFJpZ2h0KTtcbiAgY3R4LmFyYyh4ICsgdyAtIHJhZGl1cy50b3BSaWdodCwgeSArIHJhZGl1cy50b3BSaWdodCwgcmFkaXVzLnRvcFJpZ2h0LCAwLCAtSEFMRl9QSSwgdHJ1ZSk7XG4gIGN0eC5saW5lVG8oeCArIHJhZGl1cy50b3BMZWZ0LCB5KTtcbn1cblxuY29uc3QgTElORV9IRUlHSFQgPSBuZXcgUmVnRXhwKC9eKG5vcm1hbHwoXFxkKyg/OlxcLlxcZCspPykocHh8ZW18JSk/KSQvKTtcbmNvbnN0IEZPTlRfU1RZTEUgPSBuZXcgUmVnRXhwKC9eKG5vcm1hbHxpdGFsaWN8aW5pdGlhbHxpbmhlcml0fHVuc2V0fChvYmxpcXVlKCAtP1swLTldP1swLTldZGVnKT8pKSQvKTtcbmZ1bmN0aW9uIHRvTGluZUhlaWdodCh2YWx1ZSwgc2l6ZSkge1xuICBjb25zdCBtYXRjaGVzID0gKCcnICsgdmFsdWUpLm1hdGNoKExJTkVfSEVJR0hUKTtcbiAgaWYgKCFtYXRjaGVzIHx8IG1hdGNoZXNbMV0gPT09ICdub3JtYWwnKSB7XG4gICAgcmV0dXJuIHNpemUgKiAxLjI7XG4gIH1cbiAgdmFsdWUgPSArbWF0Y2hlc1syXTtcbiAgc3dpdGNoIChtYXRjaGVzWzNdKSB7XG4gIGNhc2UgJ3B4JzpcbiAgICByZXR1cm4gdmFsdWU7XG4gIGNhc2UgJyUnOlxuICAgIHZhbHVlIC89IDEwMDtcbiAgICBicmVhaztcbiAgfVxuICByZXR1cm4gc2l6ZSAqIHZhbHVlO1xufVxuY29uc3QgbnVtYmVyT3JaZXJvID0gdiA9PiArdiB8fCAwO1xuZnVuY3Rpb24gX3JlYWRWYWx1ZVRvUHJvcHModmFsdWUsIHByb3BzKSB7XG4gIGNvbnN0IHJldCA9IHt9O1xuICBjb25zdCBvYmpQcm9wcyA9IGlzT2JqZWN0KHByb3BzKTtcbiAgY29uc3Qga2V5cyA9IG9ialByb3BzID8gT2JqZWN0LmtleXMocHJvcHMpIDogcHJvcHM7XG4gIGNvbnN0IHJlYWQgPSBpc09iamVjdCh2YWx1ZSlcbiAgICA/IG9ialByb3BzXG4gICAgICA/IHByb3AgPT4gdmFsdWVPckRlZmF1bHQodmFsdWVbcHJvcF0sIHZhbHVlW3Byb3BzW3Byb3BdXSlcbiAgICAgIDogcHJvcCA9PiB2YWx1ZVtwcm9wXVxuICAgIDogKCkgPT4gdmFsdWU7XG4gIGZvciAoY29uc3QgcHJvcCBvZiBrZXlzKSB7XG4gICAgcmV0W3Byb3BdID0gbnVtYmVyT3JaZXJvKHJlYWQocHJvcCkpO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5mdW5jdGlvbiB0b1RSQkwodmFsdWUpIHtcbiAgcmV0dXJuIF9yZWFkVmFsdWVUb1Byb3BzKHZhbHVlLCB7dG9wOiAneScsIHJpZ2h0OiAneCcsIGJvdHRvbTogJ3knLCBsZWZ0OiAneCd9KTtcbn1cbmZ1bmN0aW9uIHRvVFJCTENvcm5lcnModmFsdWUpIHtcbiAgcmV0dXJuIF9yZWFkVmFsdWVUb1Byb3BzKHZhbHVlLCBbJ3RvcExlZnQnLCAndG9wUmlnaHQnLCAnYm90dG9tTGVmdCcsICdib3R0b21SaWdodCddKTtcbn1cbmZ1bmN0aW9uIHRvUGFkZGluZyh2YWx1ZSkge1xuICBjb25zdCBvYmogPSB0b1RSQkwodmFsdWUpO1xuICBvYmoud2lkdGggPSBvYmoubGVmdCArIG9iai5yaWdodDtcbiAgb2JqLmhlaWdodCA9IG9iai50b3AgKyBvYmouYm90dG9tO1xuICByZXR1cm4gb2JqO1xufVxuZnVuY3Rpb24gdG9Gb250KG9wdGlvbnMsIGZhbGxiYWNrKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBmYWxsYmFjayA9IGZhbGxiYWNrIHx8IGRlZmF1bHRzLmZvbnQ7XG4gIGxldCBzaXplID0gdmFsdWVPckRlZmF1bHQob3B0aW9ucy5zaXplLCBmYWxsYmFjay5zaXplKTtcbiAgaWYgKHR5cGVvZiBzaXplID09PSAnc3RyaW5nJykge1xuICAgIHNpemUgPSBwYXJzZUludChzaXplLCAxMCk7XG4gIH1cbiAgbGV0IHN0eWxlID0gdmFsdWVPckRlZmF1bHQob3B0aW9ucy5zdHlsZSwgZmFsbGJhY2suc3R5bGUpO1xuICBpZiAoc3R5bGUgJiYgISgnJyArIHN0eWxlKS5tYXRjaChGT05UX1NUWUxFKSkge1xuICAgIGNvbnNvbGUud2FybignSW52YWxpZCBmb250IHN0eWxlIHNwZWNpZmllZDogXCInICsgc3R5bGUgKyAnXCInKTtcbiAgICBzdHlsZSA9ICcnO1xuICB9XG4gIGNvbnN0IGZvbnQgPSB7XG4gICAgZmFtaWx5OiB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLmZhbWlseSwgZmFsbGJhY2suZmFtaWx5KSxcbiAgICBsaW5lSGVpZ2h0OiB0b0xpbmVIZWlnaHQodmFsdWVPckRlZmF1bHQob3B0aW9ucy5saW5lSGVpZ2h0LCBmYWxsYmFjay5saW5lSGVpZ2h0KSwgc2l6ZSksXG4gICAgc2l6ZSxcbiAgICBzdHlsZSxcbiAgICB3ZWlnaHQ6IHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMud2VpZ2h0LCBmYWxsYmFjay53ZWlnaHQpLFxuICAgIHN0cmluZzogJydcbiAgfTtcbiAgZm9udC5zdHJpbmcgPSB0b0ZvbnRTdHJpbmcoZm9udCk7XG4gIHJldHVybiBmb250O1xufVxuZnVuY3Rpb24gcmVzb2x2ZShpbnB1dHMsIGNvbnRleHQsIGluZGV4LCBpbmZvKSB7XG4gIGxldCBjYWNoZWFibGUgPSB0cnVlO1xuICBsZXQgaSwgaWxlbiwgdmFsdWU7XG4gIGZvciAoaSA9IDAsIGlsZW4gPSBpbnB1dHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgdmFsdWUgPSBpbnB1dHNbaV07XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoY29udGV4dCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdmFsdWUgPSB2YWx1ZShjb250ZXh0KTtcbiAgICAgIGNhY2hlYWJsZSA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAoaW5kZXggIT09IHVuZGVmaW5lZCAmJiBpc0FycmF5KHZhbHVlKSkge1xuICAgICAgdmFsdWUgPSB2YWx1ZVtpbmRleCAlIHZhbHVlLmxlbmd0aF07XG4gICAgICBjYWNoZWFibGUgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChpbmZvICYmICFjYWNoZWFibGUpIHtcbiAgICAgICAgaW5mby5jYWNoZWFibGUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIF9hZGRHcmFjZShtaW5tYXgsIGdyYWNlKSB7XG4gIGNvbnN0IHttaW4sIG1heH0gPSBtaW5tYXg7XG4gIHJldHVybiB7XG4gICAgbWluOiBtaW4gLSBNYXRoLmFicyh0b0RpbWVuc2lvbihncmFjZSwgbWluKSksXG4gICAgbWF4OiBtYXggKyB0b0RpbWVuc2lvbihncmFjZSwgbWF4KVxuICB9O1xufVxuXG5mdW5jdGlvbiBfbG9va3VwKHRhYmxlLCB2YWx1ZSwgY21wKSB7XG4gIGNtcCA9IGNtcCB8fCAoKGluZGV4KSA9PiB0YWJsZVtpbmRleF0gPCB2YWx1ZSk7XG4gIGxldCBoaSA9IHRhYmxlLmxlbmd0aCAtIDE7XG4gIGxldCBsbyA9IDA7XG4gIGxldCBtaWQ7XG4gIHdoaWxlIChoaSAtIGxvID4gMSkge1xuICAgIG1pZCA9IChsbyArIGhpKSA+PiAxO1xuICAgIGlmIChjbXAobWlkKSkge1xuICAgICAgbG8gPSBtaWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhpID0gbWlkO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge2xvLCBoaX07XG59XG5jb25zdCBfbG9va3VwQnlLZXkgPSAodGFibGUsIGtleSwgdmFsdWUpID0+XG4gIF9sb29rdXAodGFibGUsIHZhbHVlLCBpbmRleCA9PiB0YWJsZVtpbmRleF1ba2V5XSA8IHZhbHVlKTtcbmNvbnN0IF9ybG9va3VwQnlLZXkgPSAodGFibGUsIGtleSwgdmFsdWUpID0+XG4gIF9sb29rdXAodGFibGUsIHZhbHVlLCBpbmRleCA9PiB0YWJsZVtpbmRleF1ba2V5XSA+PSB2YWx1ZSk7XG5mdW5jdGlvbiBfZmlsdGVyQmV0d2Vlbih2YWx1ZXMsIG1pbiwgbWF4KSB7XG4gIGxldCBzdGFydCA9IDA7XG4gIGxldCBlbmQgPSB2YWx1ZXMubGVuZ3RoO1xuICB3aGlsZSAoc3RhcnQgPCBlbmQgJiYgdmFsdWVzW3N0YXJ0XSA8IG1pbikge1xuICAgIHN0YXJ0Kys7XG4gIH1cbiAgd2hpbGUgKGVuZCA+IHN0YXJ0ICYmIHZhbHVlc1tlbmQgLSAxXSA+IG1heCkge1xuICAgIGVuZC0tO1xuICB9XG4gIHJldHVybiBzdGFydCA+IDAgfHwgZW5kIDwgdmFsdWVzLmxlbmd0aFxuICAgID8gdmFsdWVzLnNsaWNlKHN0YXJ0LCBlbmQpXG4gICAgOiB2YWx1ZXM7XG59XG5jb25zdCBhcnJheUV2ZW50cyA9IFsncHVzaCcsICdwb3AnLCAnc2hpZnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnXTtcbmZ1bmN0aW9uIGxpc3RlbkFycmF5RXZlbnRzKGFycmF5LCBsaXN0ZW5lcikge1xuICBpZiAoYXJyYXkuX2NoYXJ0anMpIHtcbiAgICBhcnJheS5fY2hhcnRqcy5saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuO1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhcnJheSwgJ19jaGFydGpzJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB2YWx1ZToge1xuICAgICAgbGlzdGVuZXJzOiBbbGlzdGVuZXJdXG4gICAgfVxuICB9KTtcbiAgYXJyYXlFdmVudHMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgY29uc3QgbWV0aG9kID0gJ19vbkRhdGEnICsgX2NhcGl0YWxpemUoa2V5KTtcbiAgICBjb25zdCBiYXNlID0gYXJyYXlba2V5XTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYXJyYXksIGtleSwge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB2YWx1ZSguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGJhc2UuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIGFycmF5Ll9jaGFydGpzLmxpc3RlbmVycy5mb3JFYWNoKChvYmplY3QpID0+IHtcbiAgICAgICAgICBpZiAodHlwZW9mIG9iamVjdFttZXRob2RdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBvYmplY3RbbWV0aG9kXSguLi5hcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cbmZ1bmN0aW9uIHVubGlzdGVuQXJyYXlFdmVudHMoYXJyYXksIGxpc3RlbmVyKSB7XG4gIGNvbnN0IHN0dWIgPSBhcnJheS5fY2hhcnRqcztcbiAgaWYgKCFzdHViKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGxpc3RlbmVycyA9IHN0dWIubGlzdGVuZXJzO1xuICBjb25zdCBpbmRleCA9IGxpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgIGxpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG4gIGlmIChsaXN0ZW5lcnMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybjtcbiAgfVxuICBhcnJheUV2ZW50cy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBkZWxldGUgYXJyYXlba2V5XTtcbiAgfSk7XG4gIGRlbGV0ZSBhcnJheS5fY2hhcnRqcztcbn1cbmZ1bmN0aW9uIF9hcnJheVVuaXF1ZShpdGVtcykge1xuICBjb25zdCBzZXQgPSBuZXcgU2V0KCk7XG4gIGxldCBpLCBpbGVuO1xuICBmb3IgKGkgPSAwLCBpbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgc2V0LmFkZChpdGVtc1tpXSk7XG4gIH1cbiAgaWYgKHNldC5zaXplID09PSBpbGVuKSB7XG4gICAgcmV0dXJuIGl0ZW1zO1xuICB9XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBzZXQuZm9yRWFjaChpdGVtID0+IHtcbiAgICByZXN1bHQucHVzaChpdGVtKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVSZXNvbHZlcihzY29wZXMsIHByZWZpeGVzID0gWycnXSwgcm9vdFNjb3BlcyA9IHNjb3BlcywgZmFsbGJhY2ssIGdldFRhcmdldCA9ICgpID0+IHNjb3Blc1swXSkge1xuICBpZiAoIWRlZmluZWQoZmFsbGJhY2spKSB7XG4gICAgZmFsbGJhY2sgPSBfcmVzb2x2ZSgnX2ZhbGxiYWNrJywgc2NvcGVzKTtcbiAgfVxuICBjb25zdCBjYWNoZSA9IHtcbiAgICBbU3ltYm9sLnRvU3RyaW5nVGFnXTogJ09iamVjdCcsXG4gICAgX2NhY2hlYWJsZTogdHJ1ZSxcbiAgICBfc2NvcGVzOiBzY29wZXMsXG4gICAgX3Jvb3RTY29wZXM6IHJvb3RTY29wZXMsXG4gICAgX2ZhbGxiYWNrOiBmYWxsYmFjayxcbiAgICBfZ2V0VGFyZ2V0OiBnZXRUYXJnZXQsXG4gICAgb3ZlcnJpZGU6IChzY29wZSkgPT4gX2NyZWF0ZVJlc29sdmVyKFtzY29wZSwgLi4uc2NvcGVzXSwgcHJlZml4ZXMsIHJvb3RTY29wZXMsIGZhbGxiYWNrKSxcbiAgfTtcbiAgcmV0dXJuIG5ldyBQcm94eShjYWNoZSwge1xuICAgIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcCkge1xuICAgICAgZGVsZXRlIHRhcmdldFtwcm9wXTtcbiAgICAgIGRlbGV0ZSB0YXJnZXQuX2tleXM7XG4gICAgICBkZWxldGUgc2NvcGVzWzBdW3Byb3BdO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgICBnZXQodGFyZ2V0LCBwcm9wKSB7XG4gICAgICByZXR1cm4gX2NhY2hlZCh0YXJnZXQsIHByb3AsXG4gICAgICAgICgpID0+IF9yZXNvbHZlV2l0aFByZWZpeGVzKHByb3AsIHByZWZpeGVzLCBzY29wZXMsIHRhcmdldCkpO1xuICAgIH0sXG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcCkge1xuICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldC5fc2NvcGVzWzBdLCBwcm9wKTtcbiAgICB9LFxuICAgIGdldFByb3RvdHlwZU9mKCkge1xuICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0UHJvdG90eXBlT2Yoc2NvcGVzWzBdKTtcbiAgICB9LFxuICAgIGhhcyh0YXJnZXQsIHByb3ApIHtcbiAgICAgIHJldHVybiBnZXRLZXlzRnJvbUFsbFNjb3Blcyh0YXJnZXQpLmluY2x1ZGVzKHByb3ApO1xuICAgIH0sXG4gICAgb3duS2V5cyh0YXJnZXQpIHtcbiAgICAgIHJldHVybiBnZXRLZXlzRnJvbUFsbFNjb3Blcyh0YXJnZXQpO1xuICAgIH0sXG4gICAgc2V0KHRhcmdldCwgcHJvcCwgdmFsdWUpIHtcbiAgICAgIGNvbnN0IHN0b3JhZ2UgPSB0YXJnZXQuX3N0b3JhZ2UgfHwgKHRhcmdldC5fc3RvcmFnZSA9IGdldFRhcmdldCgpKTtcbiAgICAgIHN0b3JhZ2VbcHJvcF0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSB0YXJnZXRbcHJvcF07XG4gICAgICBkZWxldGUgdGFyZ2V0Ll9rZXlzO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIF9hdHRhY2hDb250ZXh0KHByb3h5LCBjb250ZXh0LCBzdWJQcm94eSwgZGVzY3JpcHRvckRlZmF1bHRzKSB7XG4gIGNvbnN0IGNhY2hlID0ge1xuICAgIF9jYWNoZWFibGU6IGZhbHNlLFxuICAgIF9wcm94eTogcHJveHksXG4gICAgX2NvbnRleHQ6IGNvbnRleHQsXG4gICAgX3N1YlByb3h5OiBzdWJQcm94eSxcbiAgICBfc3RhY2s6IG5ldyBTZXQoKSxcbiAgICBfZGVzY3JpcHRvcnM6IF9kZXNjcmlwdG9ycyhwcm94eSwgZGVzY3JpcHRvckRlZmF1bHRzKSxcbiAgICBzZXRDb250ZXh0OiAoY3R4KSA9PiBfYXR0YWNoQ29udGV4dChwcm94eSwgY3R4LCBzdWJQcm94eSwgZGVzY3JpcHRvckRlZmF1bHRzKSxcbiAgICBvdmVycmlkZTogKHNjb3BlKSA9PiBfYXR0YWNoQ29udGV4dChwcm94eS5vdmVycmlkZShzY29wZSksIGNvbnRleHQsIHN1YlByb3h5LCBkZXNjcmlwdG9yRGVmYXVsdHMpXG4gIH07XG4gIHJldHVybiBuZXcgUHJveHkoY2FjaGUsIHtcbiAgICBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3ApIHtcbiAgICAgIGRlbGV0ZSB0YXJnZXRbcHJvcF07XG4gICAgICBkZWxldGUgcHJveHlbcHJvcF07XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIGdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSB7XG4gICAgICByZXR1cm4gX2NhY2hlZCh0YXJnZXQsIHByb3AsXG4gICAgICAgICgpID0+IF9yZXNvbHZlV2l0aENvbnRleHQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikpO1xuICAgIH0sXG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcCkge1xuICAgICAgcmV0dXJuIHRhcmdldC5fZGVzY3JpcHRvcnMuYWxsS2V5c1xuICAgICAgICA/IFJlZmxlY3QuaGFzKHByb3h5LCBwcm9wKSA/IHtlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9IDogdW5kZWZpbmVkXG4gICAgICAgIDogUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocHJveHksIHByb3ApO1xuICAgIH0sXG4gICAgZ2V0UHJvdG90eXBlT2YoKSB7XG4gICAgICByZXR1cm4gUmVmbGVjdC5nZXRQcm90b3R5cGVPZihwcm94eSk7XG4gICAgfSxcbiAgICBoYXModGFyZ2V0LCBwcm9wKSB7XG4gICAgICByZXR1cm4gUmVmbGVjdC5oYXMocHJveHksIHByb3ApO1xuICAgIH0sXG4gICAgb3duS2V5cygpIHtcbiAgICAgIHJldHVybiBSZWZsZWN0Lm93bktleXMocHJveHkpO1xuICAgIH0sXG4gICAgc2V0KHRhcmdldCwgcHJvcCwgdmFsdWUpIHtcbiAgICAgIHByb3h5W3Byb3BdID0gdmFsdWU7XG4gICAgICBkZWxldGUgdGFyZ2V0W3Byb3BdO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIF9kZXNjcmlwdG9ycyhwcm94eSwgZGVmYXVsdHMgPSB7c2NyaXB0YWJsZTogdHJ1ZSwgaW5kZXhhYmxlOiB0cnVlfSkge1xuICBjb25zdCB7X3NjcmlwdGFibGUgPSBkZWZhdWx0cy5zY3JpcHRhYmxlLCBfaW5kZXhhYmxlID0gZGVmYXVsdHMuaW5kZXhhYmxlLCBfYWxsS2V5cyA9IGRlZmF1bHRzLmFsbEtleXN9ID0gcHJveHk7XG4gIHJldHVybiB7XG4gICAgYWxsS2V5czogX2FsbEtleXMsXG4gICAgc2NyaXB0YWJsZTogX3NjcmlwdGFibGUsXG4gICAgaW5kZXhhYmxlOiBfaW5kZXhhYmxlLFxuICAgIGlzU2NyaXB0YWJsZTogaXNGdW5jdGlvbihfc2NyaXB0YWJsZSkgPyBfc2NyaXB0YWJsZSA6ICgpID0+IF9zY3JpcHRhYmxlLFxuICAgIGlzSW5kZXhhYmxlOiBpc0Z1bmN0aW9uKF9pbmRleGFibGUpID8gX2luZGV4YWJsZSA6ICgpID0+IF9pbmRleGFibGVcbiAgfTtcbn1cbmNvbnN0IHJlYWRLZXkgPSAocHJlZml4LCBuYW1lKSA9PiBwcmVmaXggPyBwcmVmaXggKyBfY2FwaXRhbGl6ZShuYW1lKSA6IG5hbWU7XG5jb25zdCBuZWVkc1N1YlJlc29sdmVyID0gKHByb3AsIHZhbHVlKSA9PiBpc09iamVjdCh2YWx1ZSkgJiYgcHJvcCAhPT0gJ2FkYXB0ZXJzJztcbmZ1bmN0aW9uIF9jYWNoZWQodGFyZ2V0LCBwcm9wLCByZXNvbHZlKSB7XG4gIGxldCB2YWx1ZSA9IHRhcmdldFtwcm9wXTtcbiAgaWYgKGRlZmluZWQodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHZhbHVlID0gcmVzb2x2ZSgpO1xuICBpZiAoZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICB0YXJnZXRbcHJvcF0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBfcmVzb2x2ZVdpdGhDb250ZXh0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpIHtcbiAgY29uc3Qge19wcm94eSwgX2NvbnRleHQsIF9zdWJQcm94eSwgX2Rlc2NyaXB0b3JzOiBkZXNjcmlwdG9yc30gPSB0YXJnZXQ7XG4gIGxldCB2YWx1ZSA9IF9wcm94eVtwcm9wXTtcbiAgaWYgKGlzRnVuY3Rpb24odmFsdWUpICYmIGRlc2NyaXB0b3JzLmlzU2NyaXB0YWJsZShwcm9wKSkge1xuICAgIHZhbHVlID0gX3Jlc29sdmVTY3JpcHRhYmxlKHByb3AsIHZhbHVlLCB0YXJnZXQsIHJlY2VpdmVyKTtcbiAgfVxuICBpZiAoaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoKSB7XG4gICAgdmFsdWUgPSBfcmVzb2x2ZUFycmF5KHByb3AsIHZhbHVlLCB0YXJnZXQsIGRlc2NyaXB0b3JzLmlzSW5kZXhhYmxlKTtcbiAgfVxuICBpZiAobmVlZHNTdWJSZXNvbHZlcihwcm9wLCB2YWx1ZSkpIHtcbiAgICB2YWx1ZSA9IF9hdHRhY2hDb250ZXh0KHZhbHVlLCBfY29udGV4dCwgX3N1YlByb3h5ICYmIF9zdWJQcm94eVtwcm9wXSwgZGVzY3JpcHRvcnMpO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIF9yZXNvbHZlU2NyaXB0YWJsZShwcm9wLCB2YWx1ZSwgdGFyZ2V0LCByZWNlaXZlcikge1xuICBjb25zdCB7X3Byb3h5LCBfY29udGV4dCwgX3N1YlByb3h5LCBfc3RhY2t9ID0gdGFyZ2V0O1xuICBpZiAoX3N0YWNrLmhhcyhwcm9wKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignUmVjdXJzaW9uIGRldGVjdGVkOiAnICsgWy4uLl9zdGFja10uam9pbignLT4nKSArICctPicgKyBwcm9wKTtcbiAgfVxuICBfc3RhY2suYWRkKHByb3ApO1xuICB2YWx1ZSA9IHZhbHVlKF9jb250ZXh0LCBfc3ViUHJveHkgfHwgcmVjZWl2ZXIpO1xuICBfc3RhY2suZGVsZXRlKHByb3ApO1xuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgdmFsdWUgPSBjcmVhdGVTdWJSZXNvbHZlcihfcHJveHkuX3Njb3BlcywgX3Byb3h5LCBwcm9wLCB2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gX3Jlc29sdmVBcnJheShwcm9wLCB2YWx1ZSwgdGFyZ2V0LCBpc0luZGV4YWJsZSkge1xuICBjb25zdCB7X3Byb3h5LCBfY29udGV4dCwgX3N1YlByb3h5LCBfZGVzY3JpcHRvcnM6IGRlc2NyaXB0b3JzfSA9IHRhcmdldDtcbiAgaWYgKGRlZmluZWQoX2NvbnRleHQuaW5kZXgpICYmIGlzSW5kZXhhYmxlKHByb3ApKSB7XG4gICAgdmFsdWUgPSB2YWx1ZVtfY29udGV4dC5pbmRleCAlIHZhbHVlLmxlbmd0aF07XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QodmFsdWVbMF0pKSB7XG4gICAgY29uc3QgYXJyID0gdmFsdWU7XG4gICAgY29uc3Qgc2NvcGVzID0gX3Byb3h5Ll9zY29wZXMuZmlsdGVyKHMgPT4gcyAhPT0gYXJyKTtcbiAgICB2YWx1ZSA9IFtdO1xuICAgIGZvciAoY29uc3QgaXRlbSBvZiBhcnIpIHtcbiAgICAgIGNvbnN0IHJlc29sdmVyID0gY3JlYXRlU3ViUmVzb2x2ZXIoc2NvcGVzLCBfcHJveHksIHByb3AsIGl0ZW0pO1xuICAgICAgdmFsdWUucHVzaChfYXR0YWNoQ29udGV4dChyZXNvbHZlciwgX2NvbnRleHQsIF9zdWJQcm94eSAmJiBfc3ViUHJveHlbcHJvcF0sIGRlc2NyaXB0b3JzKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVGYWxsYmFjayhmYWxsYmFjaywgcHJvcCwgdmFsdWUpIHtcbiAgcmV0dXJuIGlzRnVuY3Rpb24oZmFsbGJhY2spID8gZmFsbGJhY2socHJvcCwgdmFsdWUpIDogZmFsbGJhY2s7XG59XG5jb25zdCBnZXRTY29wZSA9IChrZXksIHBhcmVudCkgPT4ga2V5ID09PSB0cnVlID8gcGFyZW50XG4gIDogdHlwZW9mIGtleSA9PT0gJ3N0cmluZycgPyByZXNvbHZlT2JqZWN0S2V5KHBhcmVudCwga2V5KSA6IHVuZGVmaW5lZDtcbmZ1bmN0aW9uIGFkZFNjb3BlcyhzZXQsIHBhcmVudFNjb3Blcywga2V5LCBwYXJlbnRGYWxsYmFjaykge1xuICBmb3IgKGNvbnN0IHBhcmVudCBvZiBwYXJlbnRTY29wZXMpIHtcbiAgICBjb25zdCBzY29wZSA9IGdldFNjb3BlKGtleSwgcGFyZW50KTtcbiAgICBpZiAoc2NvcGUpIHtcbiAgICAgIHNldC5hZGQoc2NvcGUpO1xuICAgICAgY29uc3QgZmFsbGJhY2sgPSByZXNvbHZlRmFsbGJhY2soc2NvcGUuX2ZhbGxiYWNrLCBrZXksIHNjb3BlKTtcbiAgICAgIGlmIChkZWZpbmVkKGZhbGxiYWNrKSAmJiBmYWxsYmFjayAhPT0ga2V5ICYmIGZhbGxiYWNrICE9PSBwYXJlbnRGYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gZmFsbGJhY2s7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzY29wZSA9PT0gZmFsc2UgJiYgZGVmaW5lZChwYXJlbnRGYWxsYmFjaykgJiYga2V5ICE9PSBwYXJlbnRGYWxsYmFjaykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVN1YlJlc29sdmVyKHBhcmVudFNjb3BlcywgcmVzb2x2ZXIsIHByb3AsIHZhbHVlKSB7XG4gIGNvbnN0IHJvb3RTY29wZXMgPSByZXNvbHZlci5fcm9vdFNjb3BlcztcbiAgY29uc3QgZmFsbGJhY2sgPSByZXNvbHZlRmFsbGJhY2socmVzb2x2ZXIuX2ZhbGxiYWNrLCBwcm9wLCB2YWx1ZSk7XG4gIGNvbnN0IGFsbFNjb3BlcyA9IFsuLi5wYXJlbnRTY29wZXMsIC4uLnJvb3RTY29wZXNdO1xuICBjb25zdCBzZXQgPSBuZXcgU2V0KCk7XG4gIHNldC5hZGQodmFsdWUpO1xuICBsZXQga2V5ID0gYWRkU2NvcGVzRnJvbUtleShzZXQsIGFsbFNjb3BlcywgcHJvcCwgZmFsbGJhY2sgfHwgcHJvcCk7XG4gIGlmIChrZXkgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGRlZmluZWQoZmFsbGJhY2spICYmIGZhbGxiYWNrICE9PSBwcm9wKSB7XG4gICAga2V5ID0gYWRkU2NvcGVzRnJvbUtleShzZXQsIGFsbFNjb3BlcywgZmFsbGJhY2ssIGtleSk7XG4gICAgaWYgKGtleSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gX2NyZWF0ZVJlc29sdmVyKFsuLi5zZXRdLCBbJyddLCByb290U2NvcGVzLCBmYWxsYmFjayxcbiAgICAoKSA9PiBzdWJHZXRUYXJnZXQocmVzb2x2ZXIsIHByb3AsIHZhbHVlKSk7XG59XG5mdW5jdGlvbiBhZGRTY29wZXNGcm9tS2V5KHNldCwgYWxsU2NvcGVzLCBrZXksIGZhbGxiYWNrKSB7XG4gIHdoaWxlIChrZXkpIHtcbiAgICBrZXkgPSBhZGRTY29wZXMoc2V0LCBhbGxTY29wZXMsIGtleSwgZmFsbGJhY2spO1xuICB9XG4gIHJldHVybiBrZXk7XG59XG5mdW5jdGlvbiBzdWJHZXRUYXJnZXQocmVzb2x2ZXIsIHByb3AsIHZhbHVlKSB7XG4gIGNvbnN0IHBhcmVudCA9IHJlc29sdmVyLl9nZXRUYXJnZXQoKTtcbiAgaWYgKCEocHJvcCBpbiBwYXJlbnQpKSB7XG4gICAgcGFyZW50W3Byb3BdID0ge307XG4gIH1cbiAgY29uc3QgdGFyZ2V0ID0gcGFyZW50W3Byb3BdO1xuICBpZiAoaXNBcnJheSh0YXJnZXQpICYmIGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuZnVuY3Rpb24gX3Jlc29sdmVXaXRoUHJlZml4ZXMocHJvcCwgcHJlZml4ZXMsIHNjb3BlcywgcHJveHkpIHtcbiAgbGV0IHZhbHVlO1xuICBmb3IgKGNvbnN0IHByZWZpeCBvZiBwcmVmaXhlcykge1xuICAgIHZhbHVlID0gX3Jlc29sdmUocmVhZEtleShwcmVmaXgsIHByb3ApLCBzY29wZXMpO1xuICAgIGlmIChkZWZpbmVkKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIG5lZWRzU3ViUmVzb2x2ZXIocHJvcCwgdmFsdWUpXG4gICAgICAgID8gY3JlYXRlU3ViUmVzb2x2ZXIoc2NvcGVzLCBwcm94eSwgcHJvcCwgdmFsdWUpXG4gICAgICAgIDogdmFsdWU7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBfcmVzb2x2ZShrZXksIHNjb3Blcykge1xuICBmb3IgKGNvbnN0IHNjb3BlIG9mIHNjb3Blcykge1xuICAgIGlmICghc2NvcGUpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBjb25zdCB2YWx1ZSA9IHNjb3BlW2tleV07XG4gICAgaWYgKGRlZmluZWQodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBnZXRLZXlzRnJvbUFsbFNjb3Blcyh0YXJnZXQpIHtcbiAgbGV0IGtleXMgPSB0YXJnZXQuX2tleXM7XG4gIGlmICgha2V5cykge1xuICAgIGtleXMgPSB0YXJnZXQuX2tleXMgPSByZXNvbHZlS2V5c0Zyb21BbGxTY29wZXModGFyZ2V0Ll9zY29wZXMpO1xuICB9XG4gIHJldHVybiBrZXlzO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUtleXNGcm9tQWxsU2NvcGVzKHNjb3Blcykge1xuICBjb25zdCBzZXQgPSBuZXcgU2V0KCk7XG4gIGZvciAoY29uc3Qgc2NvcGUgb2Ygc2NvcGVzKSB7XG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoc2NvcGUpLmZpbHRlcihrID0+ICFrLnN0YXJ0c1dpdGgoJ18nKSkpIHtcbiAgICAgIHNldC5hZGQoa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFsuLi5zZXRdO1xufVxuXG5jb25zdCBFUFNJTE9OID0gTnVtYmVyLkVQU0lMT04gfHwgMWUtMTQ7XG5jb25zdCBnZXRQb2ludCA9IChwb2ludHMsIGkpID0+IGkgPCBwb2ludHMubGVuZ3RoICYmICFwb2ludHNbaV0uc2tpcCAmJiBwb2ludHNbaV07XG5jb25zdCBnZXRWYWx1ZUF4aXMgPSAoaW5kZXhBeGlzKSA9PiBpbmRleEF4aXMgPT09ICd4JyA/ICd5JyA6ICd4JztcbmZ1bmN0aW9uIHNwbGluZUN1cnZlKGZpcnN0UG9pbnQsIG1pZGRsZVBvaW50LCBhZnRlclBvaW50LCB0KSB7XG4gIGNvbnN0IHByZXZpb3VzID0gZmlyc3RQb2ludC5za2lwID8gbWlkZGxlUG9pbnQgOiBmaXJzdFBvaW50O1xuICBjb25zdCBjdXJyZW50ID0gbWlkZGxlUG9pbnQ7XG4gIGNvbnN0IG5leHQgPSBhZnRlclBvaW50LnNraXAgPyBtaWRkbGVQb2ludCA6IGFmdGVyUG9pbnQ7XG4gIGNvbnN0IGQwMSA9IGRpc3RhbmNlQmV0d2VlblBvaW50cyhjdXJyZW50LCBwcmV2aW91cyk7XG4gIGNvbnN0IGQxMiA9IGRpc3RhbmNlQmV0d2VlblBvaW50cyhuZXh0LCBjdXJyZW50KTtcbiAgbGV0IHMwMSA9IGQwMSAvIChkMDEgKyBkMTIpO1xuICBsZXQgczEyID0gZDEyIC8gKGQwMSArIGQxMik7XG4gIHMwMSA9IGlzTmFOKHMwMSkgPyAwIDogczAxO1xuICBzMTIgPSBpc05hTihzMTIpID8gMCA6IHMxMjtcbiAgY29uc3QgZmEgPSB0ICogczAxO1xuICBjb25zdCBmYiA9IHQgKiBzMTI7XG4gIHJldHVybiB7XG4gICAgcHJldmlvdXM6IHtcbiAgICAgIHg6IGN1cnJlbnQueCAtIGZhICogKG5leHQueCAtIHByZXZpb3VzLngpLFxuICAgICAgeTogY3VycmVudC55IC0gZmEgKiAobmV4dC55IC0gcHJldmlvdXMueSlcbiAgICB9LFxuICAgIG5leHQ6IHtcbiAgICAgIHg6IGN1cnJlbnQueCArIGZiICogKG5leHQueCAtIHByZXZpb3VzLngpLFxuICAgICAgeTogY3VycmVudC55ICsgZmIgKiAobmV4dC55IC0gcHJldmlvdXMueSlcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBtb25vdG9uZUFkanVzdChwb2ludHMsIGRlbHRhSywgbUspIHtcbiAgY29uc3QgcG9pbnRzTGVuID0gcG9pbnRzLmxlbmd0aDtcbiAgbGV0IGFscGhhSywgYmV0YUssIHRhdUssIHNxdWFyZWRNYWduaXR1ZGUsIHBvaW50Q3VycmVudDtcbiAgbGV0IHBvaW50QWZ0ZXIgPSBnZXRQb2ludChwb2ludHMsIDApO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50c0xlbiAtIDE7ICsraSkge1xuICAgIHBvaW50Q3VycmVudCA9IHBvaW50QWZ0ZXI7XG4gICAgcG9pbnRBZnRlciA9IGdldFBvaW50KHBvaW50cywgaSArIDEpO1xuICAgIGlmICghcG9pbnRDdXJyZW50IHx8ICFwb2ludEFmdGVyKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGFsbW9zdEVxdWFscyhkZWx0YUtbaV0sIDAsIEVQU0lMT04pKSB7XG4gICAgICBtS1tpXSA9IG1LW2kgKyAxXSA9IDA7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgYWxwaGFLID0gbUtbaV0gLyBkZWx0YUtbaV07XG4gICAgYmV0YUsgPSBtS1tpICsgMV0gLyBkZWx0YUtbaV07XG4gICAgc3F1YXJlZE1hZ25pdHVkZSA9IE1hdGgucG93KGFscGhhSywgMikgKyBNYXRoLnBvdyhiZXRhSywgMik7XG4gICAgaWYgKHNxdWFyZWRNYWduaXR1ZGUgPD0gOSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHRhdUsgPSAzIC8gTWF0aC5zcXJ0KHNxdWFyZWRNYWduaXR1ZGUpO1xuICAgIG1LW2ldID0gYWxwaGFLICogdGF1SyAqIGRlbHRhS1tpXTtcbiAgICBtS1tpICsgMV0gPSBiZXRhSyAqIHRhdUsgKiBkZWx0YUtbaV07XG4gIH1cbn1cbmZ1bmN0aW9uIG1vbm90b25lQ29tcHV0ZShwb2ludHMsIG1LLCBpbmRleEF4aXMgPSAneCcpIHtcbiAgY29uc3QgdmFsdWVBeGlzID0gZ2V0VmFsdWVBeGlzKGluZGV4QXhpcyk7XG4gIGNvbnN0IHBvaW50c0xlbiA9IHBvaW50cy5sZW5ndGg7XG4gIGxldCBkZWx0YSwgcG9pbnRCZWZvcmUsIHBvaW50Q3VycmVudDtcbiAgbGV0IHBvaW50QWZ0ZXIgPSBnZXRQb2ludChwb2ludHMsIDApO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50c0xlbjsgKytpKSB7XG4gICAgcG9pbnRCZWZvcmUgPSBwb2ludEN1cnJlbnQ7XG4gICAgcG9pbnRDdXJyZW50ID0gcG9pbnRBZnRlcjtcbiAgICBwb2ludEFmdGVyID0gZ2V0UG9pbnQocG9pbnRzLCBpICsgMSk7XG4gICAgaWYgKCFwb2ludEN1cnJlbnQpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBjb25zdCBpUGl4ZWwgPSBwb2ludEN1cnJlbnRbaW5kZXhBeGlzXTtcbiAgICBjb25zdCB2UGl4ZWwgPSBwb2ludEN1cnJlbnRbdmFsdWVBeGlzXTtcbiAgICBpZiAocG9pbnRCZWZvcmUpIHtcbiAgICAgIGRlbHRhID0gKGlQaXhlbCAtIHBvaW50QmVmb3JlW2luZGV4QXhpc10pIC8gMztcbiAgICAgIHBvaW50Q3VycmVudFtgY3AxJHtpbmRleEF4aXN9YF0gPSBpUGl4ZWwgLSBkZWx0YTtcbiAgICAgIHBvaW50Q3VycmVudFtgY3AxJHt2YWx1ZUF4aXN9YF0gPSB2UGl4ZWwgLSBkZWx0YSAqIG1LW2ldO1xuICAgIH1cbiAgICBpZiAocG9pbnRBZnRlcikge1xuICAgICAgZGVsdGEgPSAocG9pbnRBZnRlcltpbmRleEF4aXNdIC0gaVBpeGVsKSAvIDM7XG4gICAgICBwb2ludEN1cnJlbnRbYGNwMiR7aW5kZXhBeGlzfWBdID0gaVBpeGVsICsgZGVsdGE7XG4gICAgICBwb2ludEN1cnJlbnRbYGNwMiR7dmFsdWVBeGlzfWBdID0gdlBpeGVsICsgZGVsdGEgKiBtS1tpXTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHNwbGluZUN1cnZlTW9ub3RvbmUocG9pbnRzLCBpbmRleEF4aXMgPSAneCcpIHtcbiAgY29uc3QgdmFsdWVBeGlzID0gZ2V0VmFsdWVBeGlzKGluZGV4QXhpcyk7XG4gIGNvbnN0IHBvaW50c0xlbiA9IHBvaW50cy5sZW5ndGg7XG4gIGNvbnN0IGRlbHRhSyA9IEFycmF5KHBvaW50c0xlbikuZmlsbCgwKTtcbiAgY29uc3QgbUsgPSBBcnJheShwb2ludHNMZW4pO1xuICBsZXQgaSwgcG9pbnRCZWZvcmUsIHBvaW50Q3VycmVudDtcbiAgbGV0IHBvaW50QWZ0ZXIgPSBnZXRQb2ludChwb2ludHMsIDApO1xuICBmb3IgKGkgPSAwOyBpIDwgcG9pbnRzTGVuOyArK2kpIHtcbiAgICBwb2ludEJlZm9yZSA9IHBvaW50Q3VycmVudDtcbiAgICBwb2ludEN1cnJlbnQgPSBwb2ludEFmdGVyO1xuICAgIHBvaW50QWZ0ZXIgPSBnZXRQb2ludChwb2ludHMsIGkgKyAxKTtcbiAgICBpZiAoIXBvaW50Q3VycmVudCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChwb2ludEFmdGVyKSB7XG4gICAgICBjb25zdCBzbG9wZURlbHRhID0gcG9pbnRBZnRlcltpbmRleEF4aXNdIC0gcG9pbnRDdXJyZW50W2luZGV4QXhpc107XG4gICAgICBkZWx0YUtbaV0gPSBzbG9wZURlbHRhICE9PSAwID8gKHBvaW50QWZ0ZXJbdmFsdWVBeGlzXSAtIHBvaW50Q3VycmVudFt2YWx1ZUF4aXNdKSAvIHNsb3BlRGVsdGEgOiAwO1xuICAgIH1cbiAgICBtS1tpXSA9ICFwb2ludEJlZm9yZSA/IGRlbHRhS1tpXVxuICAgICAgOiAhcG9pbnRBZnRlciA/IGRlbHRhS1tpIC0gMV1cbiAgICAgIDogKHNpZ24oZGVsdGFLW2kgLSAxXSkgIT09IHNpZ24oZGVsdGFLW2ldKSkgPyAwXG4gICAgICA6IChkZWx0YUtbaSAtIDFdICsgZGVsdGFLW2ldKSAvIDI7XG4gIH1cbiAgbW9ub3RvbmVBZGp1c3QocG9pbnRzLCBkZWx0YUssIG1LKTtcbiAgbW9ub3RvbmVDb21wdXRlKHBvaW50cywgbUssIGluZGV4QXhpcyk7XG59XG5mdW5jdGlvbiBjYXBDb250cm9sUG9pbnQocHQsIG1pbiwgbWF4KSB7XG4gIHJldHVybiBNYXRoLm1heChNYXRoLm1pbihwdCwgbWF4KSwgbWluKTtcbn1cbmZ1bmN0aW9uIGNhcEJlemllclBvaW50cyhwb2ludHMsIGFyZWEpIHtcbiAgbGV0IGksIGlsZW4sIHBvaW50LCBpbkFyZWEsIGluQXJlYVByZXY7XG4gIGxldCBpbkFyZWFOZXh0ID0gX2lzUG9pbnRJbkFyZWEocG9pbnRzWzBdLCBhcmVhKTtcbiAgZm9yIChpID0gMCwgaWxlbiA9IHBvaW50cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICBpbkFyZWFQcmV2ID0gaW5BcmVhO1xuICAgIGluQXJlYSA9IGluQXJlYU5leHQ7XG4gICAgaW5BcmVhTmV4dCA9IGkgPCBpbGVuIC0gMSAmJiBfaXNQb2ludEluQXJlYShwb2ludHNbaSArIDFdLCBhcmVhKTtcbiAgICBpZiAoIWluQXJlYSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHBvaW50ID0gcG9pbnRzW2ldO1xuICAgIGlmIChpbkFyZWFQcmV2KSB7XG4gICAgICBwb2ludC5jcDF4ID0gY2FwQ29udHJvbFBvaW50KHBvaW50LmNwMXgsIGFyZWEubGVmdCwgYXJlYS5yaWdodCk7XG4gICAgICBwb2ludC5jcDF5ID0gY2FwQ29udHJvbFBvaW50KHBvaW50LmNwMXksIGFyZWEudG9wLCBhcmVhLmJvdHRvbSk7XG4gICAgfVxuICAgIGlmIChpbkFyZWFOZXh0KSB7XG4gICAgICBwb2ludC5jcDJ4ID0gY2FwQ29udHJvbFBvaW50KHBvaW50LmNwMngsIGFyZWEubGVmdCwgYXJlYS5yaWdodCk7XG4gICAgICBwb2ludC5jcDJ5ID0gY2FwQ29udHJvbFBvaW50KHBvaW50LmNwMnksIGFyZWEudG9wLCBhcmVhLmJvdHRvbSk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBfdXBkYXRlQmV6aWVyQ29udHJvbFBvaW50cyhwb2ludHMsIG9wdGlvbnMsIGFyZWEsIGxvb3AsIGluZGV4QXhpcykge1xuICBsZXQgaSwgaWxlbiwgcG9pbnQsIGNvbnRyb2xQb2ludHM7XG4gIGlmIChvcHRpb25zLnNwYW5HYXBzKSB7XG4gICAgcG9pbnRzID0gcG9pbnRzLmZpbHRlcigocHQpID0+ICFwdC5za2lwKTtcbiAgfVxuICBpZiAob3B0aW9ucy5jdWJpY0ludGVycG9sYXRpb25Nb2RlID09PSAnbW9ub3RvbmUnKSB7XG4gICAgc3BsaW5lQ3VydmVNb25vdG9uZShwb2ludHMsIGluZGV4QXhpcyk7XG4gIH0gZWxzZSB7XG4gICAgbGV0IHByZXYgPSBsb29wID8gcG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXSA6IHBvaW50c1swXTtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gcG9pbnRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgICBjb250cm9sUG9pbnRzID0gc3BsaW5lQ3VydmUoXG4gICAgICAgIHByZXYsXG4gICAgICAgIHBvaW50LFxuICAgICAgICBwb2ludHNbTWF0aC5taW4oaSArIDEsIGlsZW4gLSAobG9vcCA/IDAgOiAxKSkgJSBpbGVuXSxcbiAgICAgICAgb3B0aW9ucy50ZW5zaW9uXG4gICAgICApO1xuICAgICAgcG9pbnQuY3AxeCA9IGNvbnRyb2xQb2ludHMucHJldmlvdXMueDtcbiAgICAgIHBvaW50LmNwMXkgPSBjb250cm9sUG9pbnRzLnByZXZpb3VzLnk7XG4gICAgICBwb2ludC5jcDJ4ID0gY29udHJvbFBvaW50cy5uZXh0Lng7XG4gICAgICBwb2ludC5jcDJ5ID0gY29udHJvbFBvaW50cy5uZXh0Lnk7XG4gICAgICBwcmV2ID0gcG9pbnQ7XG4gICAgfVxuICB9XG4gIGlmIChvcHRpb25zLmNhcEJlemllclBvaW50cykge1xuICAgIGNhcEJlemllclBvaW50cyhwb2ludHMsIGFyZWEpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9nZXRQYXJlbnROb2RlKGRvbU5vZGUpIHtcbiAgbGV0IHBhcmVudCA9IGRvbU5vZGUucGFyZW50Tm9kZTtcbiAgaWYgKHBhcmVudCAmJiBwYXJlbnQudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgU2hhZG93Um9vdF0nKSB7XG4gICAgcGFyZW50ID0gcGFyZW50Lmhvc3Q7XG4gIH1cbiAgcmV0dXJuIHBhcmVudDtcbn1cbmZ1bmN0aW9uIHBhcnNlTWF4U3R5bGUoc3R5bGVWYWx1ZSwgbm9kZSwgcGFyZW50UHJvcGVydHkpIHtcbiAgbGV0IHZhbHVlSW5QaXhlbHM7XG4gIGlmICh0eXBlb2Ygc3R5bGVWYWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWx1ZUluUGl4ZWxzID0gcGFyc2VJbnQoc3R5bGVWYWx1ZSwgMTApO1xuICAgIGlmIChzdHlsZVZhbHVlLmluZGV4T2YoJyUnKSAhPT0gLTEpIHtcbiAgICAgIHZhbHVlSW5QaXhlbHMgPSB2YWx1ZUluUGl4ZWxzIC8gMTAwICogbm9kZS5wYXJlbnROb2RlW3BhcmVudFByb3BlcnR5XTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFsdWVJblBpeGVscyA9IHN0eWxlVmFsdWU7XG4gIH1cbiAgcmV0dXJuIHZhbHVlSW5QaXhlbHM7XG59XG5jb25zdCBnZXRDb21wdXRlZFN0eWxlID0gKGVsZW1lbnQpID0+IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQsIG51bGwpO1xuZnVuY3Rpb24gZ2V0U3R5bGUoZWwsIHByb3BlcnR5KSB7XG4gIHJldHVybiBnZXRDb21wdXRlZFN0eWxlKGVsKS5nZXRQcm9wZXJ0eVZhbHVlKHByb3BlcnR5KTtcbn1cbmNvbnN0IHBvc2l0aW9ucyA9IFsndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J107XG5mdW5jdGlvbiBnZXRQb3NpdGlvbmVkU3R5bGUoc3R5bGVzLCBzdHlsZSwgc3VmZml4KSB7XG4gIGNvbnN0IHJlc3VsdCA9IHt9O1xuICBzdWZmaXggPSBzdWZmaXggPyAnLScgKyBzdWZmaXggOiAnJztcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICBjb25zdCBwb3MgPSBwb3NpdGlvbnNbaV07XG4gICAgcmVzdWx0W3Bvc10gPSBwYXJzZUZsb2F0KHN0eWxlc1tzdHlsZSArICctJyArIHBvcyArIHN1ZmZpeF0pIHx8IDA7XG4gIH1cbiAgcmVzdWx0LndpZHRoID0gcmVzdWx0LmxlZnQgKyByZXN1bHQucmlnaHQ7XG4gIHJlc3VsdC5oZWlnaHQgPSByZXN1bHQudG9wICsgcmVzdWx0LmJvdHRvbTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmNvbnN0IHVzZU9mZnNldFBvcyA9ICh4LCB5LCB0YXJnZXQpID0+ICh4ID4gMCB8fCB5ID4gMCkgJiYgKCF0YXJnZXQgfHwgIXRhcmdldC5zaGFkb3dSb290KTtcbmZ1bmN0aW9uIGdldENhbnZhc1Bvc2l0aW9uKGV2dCwgY2FudmFzKSB7XG4gIGNvbnN0IGUgPSBldnQubmF0aXZlIHx8IGV2dDtcbiAgY29uc3QgdG91Y2hlcyA9IGUudG91Y2hlcztcbiAgY29uc3Qgc291cmNlID0gdG91Y2hlcyAmJiB0b3VjaGVzLmxlbmd0aCA/IHRvdWNoZXNbMF0gOiBlO1xuICBjb25zdCB7b2Zmc2V0WCwgb2Zmc2V0WX0gPSBzb3VyY2U7XG4gIGxldCBib3ggPSBmYWxzZTtcbiAgbGV0IHgsIHk7XG4gIGlmICh1c2VPZmZzZXRQb3Mob2Zmc2V0WCwgb2Zmc2V0WSwgZS50YXJnZXQpKSB7XG4gICAgeCA9IG9mZnNldFg7XG4gICAgeSA9IG9mZnNldFk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgcmVjdCA9IGNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB4ID0gc291cmNlLmNsaWVudFggLSByZWN0LmxlZnQ7XG4gICAgeSA9IHNvdXJjZS5jbGllbnRZIC0gcmVjdC50b3A7XG4gICAgYm94ID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4ge3gsIHksIGJveH07XG59XG5mdW5jdGlvbiBnZXRSZWxhdGl2ZVBvc2l0aW9uKGV2dCwgY2hhcnQpIHtcbiAgY29uc3Qge2NhbnZhcywgY3VycmVudERldmljZVBpeGVsUmF0aW99ID0gY2hhcnQ7XG4gIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShjYW52YXMpO1xuICBjb25zdCBib3JkZXJCb3ggPSBzdHlsZS5ib3hTaXppbmcgPT09ICdib3JkZXItYm94JztcbiAgY29uc3QgcGFkZGluZ3MgPSBnZXRQb3NpdGlvbmVkU3R5bGUoc3R5bGUsICdwYWRkaW5nJyk7XG4gIGNvbnN0IGJvcmRlcnMgPSBnZXRQb3NpdGlvbmVkU3R5bGUoc3R5bGUsICdib3JkZXInLCAnd2lkdGgnKTtcbiAgY29uc3Qge3gsIHksIGJveH0gPSBnZXRDYW52YXNQb3NpdGlvbihldnQsIGNhbnZhcyk7XG4gIGNvbnN0IHhPZmZzZXQgPSBwYWRkaW5ncy5sZWZ0ICsgKGJveCAmJiBib3JkZXJzLmxlZnQpO1xuICBjb25zdCB5T2Zmc2V0ID0gcGFkZGluZ3MudG9wICsgKGJveCAmJiBib3JkZXJzLnRvcCk7XG4gIGxldCB7d2lkdGgsIGhlaWdodH0gPSBjaGFydDtcbiAgaWYgKGJvcmRlckJveCkge1xuICAgIHdpZHRoIC09IHBhZGRpbmdzLndpZHRoICsgYm9yZGVycy53aWR0aDtcbiAgICBoZWlnaHQgLT0gcGFkZGluZ3MuaGVpZ2h0ICsgYm9yZGVycy5oZWlnaHQ7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB4OiBNYXRoLnJvdW5kKCh4IC0geE9mZnNldCkgLyB3aWR0aCAqIGNhbnZhcy53aWR0aCAvIGN1cnJlbnREZXZpY2VQaXhlbFJhdGlvKSxcbiAgICB5OiBNYXRoLnJvdW5kKCh5IC0geU9mZnNldCkgLyBoZWlnaHQgKiBjYW52YXMuaGVpZ2h0IC8gY3VycmVudERldmljZVBpeGVsUmF0aW8pXG4gIH07XG59XG5mdW5jdGlvbiBnZXRDb250YWluZXJTaXplKGNhbnZhcywgd2lkdGgsIGhlaWdodCkge1xuICBsZXQgbWF4V2lkdGgsIG1heEhlaWdodDtcbiAgaWYgKHdpZHRoID09PSB1bmRlZmluZWQgfHwgaGVpZ2h0ID09PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBjb250YWluZXIgPSBfZ2V0UGFyZW50Tm9kZShjYW52YXMpO1xuICAgIGlmICghY29udGFpbmVyKSB7XG4gICAgICB3aWR0aCA9IGNhbnZhcy5jbGllbnRXaWR0aDtcbiAgICAgIGhlaWdodCA9IGNhbnZhcy5jbGllbnRIZWlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHJlY3QgPSBjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICBjb25zdCBjb250YWluZXJTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoY29udGFpbmVyKTtcbiAgICAgIGNvbnN0IGNvbnRhaW5lckJvcmRlciA9IGdldFBvc2l0aW9uZWRTdHlsZShjb250YWluZXJTdHlsZSwgJ2JvcmRlcicsICd3aWR0aCcpO1xuICAgICAgY29uc3QgY29udGFpbmVyUGFkZGluZyA9IGdldFBvc2l0aW9uZWRTdHlsZShjb250YWluZXJTdHlsZSwgJ3BhZGRpbmcnKTtcbiAgICAgIHdpZHRoID0gcmVjdC53aWR0aCAtIGNvbnRhaW5lclBhZGRpbmcud2lkdGggLSBjb250YWluZXJCb3JkZXIud2lkdGg7XG4gICAgICBoZWlnaHQgPSByZWN0LmhlaWdodCAtIGNvbnRhaW5lclBhZGRpbmcuaGVpZ2h0IC0gY29udGFpbmVyQm9yZGVyLmhlaWdodDtcbiAgICAgIG1heFdpZHRoID0gcGFyc2VNYXhTdHlsZShjb250YWluZXJTdHlsZS5tYXhXaWR0aCwgY29udGFpbmVyLCAnY2xpZW50V2lkdGgnKTtcbiAgICAgIG1heEhlaWdodCA9IHBhcnNlTWF4U3R5bGUoY29udGFpbmVyU3R5bGUubWF4SGVpZ2h0LCBjb250YWluZXIsICdjbGllbnRIZWlnaHQnKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgbWF4V2lkdGg6IG1heFdpZHRoIHx8IElORklOSVRZLFxuICAgIG1heEhlaWdodDogbWF4SGVpZ2h0IHx8IElORklOSVRZXG4gIH07XG59XG5jb25zdCByb3VuZDEgPSB2ID0+IE1hdGgucm91bmQodiAqIDEwKSAvIDEwO1xuZnVuY3Rpb24gZ2V0TWF4aW11bVNpemUoY2FudmFzLCBiYldpZHRoLCBiYkhlaWdodCwgYXNwZWN0UmF0aW8pIHtcbiAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGNhbnZhcyk7XG4gIGNvbnN0IG1hcmdpbnMgPSBnZXRQb3NpdGlvbmVkU3R5bGUoc3R5bGUsICdtYXJnaW4nKTtcbiAgY29uc3QgbWF4V2lkdGggPSBwYXJzZU1heFN0eWxlKHN0eWxlLm1heFdpZHRoLCBjYW52YXMsICdjbGllbnRXaWR0aCcpIHx8IElORklOSVRZO1xuICBjb25zdCBtYXhIZWlnaHQgPSBwYXJzZU1heFN0eWxlKHN0eWxlLm1heEhlaWdodCwgY2FudmFzLCAnY2xpZW50SGVpZ2h0JykgfHwgSU5GSU5JVFk7XG4gIGNvbnN0IGNvbnRhaW5lclNpemUgPSBnZXRDb250YWluZXJTaXplKGNhbnZhcywgYmJXaWR0aCwgYmJIZWlnaHQpO1xuICBsZXQge3dpZHRoLCBoZWlnaHR9ID0gY29udGFpbmVyU2l6ZTtcbiAgaWYgKHN0eWxlLmJveFNpemluZyA9PT0gJ2NvbnRlbnQtYm94Jykge1xuICAgIGNvbnN0IGJvcmRlcnMgPSBnZXRQb3NpdGlvbmVkU3R5bGUoc3R5bGUsICdib3JkZXInLCAnd2lkdGgnKTtcbiAgICBjb25zdCBwYWRkaW5ncyA9IGdldFBvc2l0aW9uZWRTdHlsZShzdHlsZSwgJ3BhZGRpbmcnKTtcbiAgICB3aWR0aCAtPSBwYWRkaW5ncy53aWR0aCArIGJvcmRlcnMud2lkdGg7XG4gICAgaGVpZ2h0IC09IHBhZGRpbmdzLmhlaWdodCArIGJvcmRlcnMuaGVpZ2h0O1xuICB9XG4gIHdpZHRoID0gTWF0aC5tYXgoMCwgd2lkdGggLSBtYXJnaW5zLndpZHRoKTtcbiAgaGVpZ2h0ID0gTWF0aC5tYXgoMCwgYXNwZWN0UmF0aW8gPyBNYXRoLmZsb29yKHdpZHRoIC8gYXNwZWN0UmF0aW8pIDogaGVpZ2h0IC0gbWFyZ2lucy5oZWlnaHQpO1xuICB3aWR0aCA9IHJvdW5kMShNYXRoLm1pbih3aWR0aCwgbWF4V2lkdGgsIGNvbnRhaW5lclNpemUubWF4V2lkdGgpKTtcbiAgaGVpZ2h0ID0gcm91bmQxKE1hdGgubWluKGhlaWdodCwgbWF4SGVpZ2h0LCBjb250YWluZXJTaXplLm1heEhlaWdodCkpO1xuICBpZiAod2lkdGggJiYgIWhlaWdodCkge1xuICAgIGhlaWdodCA9IHJvdW5kMSh3aWR0aCAvIDIpO1xuICB9XG4gIHJldHVybiB7XG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0XG4gIH07XG59XG5mdW5jdGlvbiByZXRpbmFTY2FsZShjaGFydCwgZm9yY2VSYXRpbywgZm9yY2VTdHlsZSkge1xuICBjb25zdCBwaXhlbFJhdGlvID0gZm9yY2VSYXRpbyB8fCAxO1xuICBjb25zdCBkZXZpY2VIZWlnaHQgPSBNYXRoLmZsb29yKGNoYXJ0LmhlaWdodCAqIHBpeGVsUmF0aW8pO1xuICBjb25zdCBkZXZpY2VXaWR0aCA9IE1hdGguZmxvb3IoY2hhcnQud2lkdGggKiBwaXhlbFJhdGlvKTtcbiAgY2hhcnQuaGVpZ2h0ID0gZGV2aWNlSGVpZ2h0IC8gcGl4ZWxSYXRpbztcbiAgY2hhcnQud2lkdGggPSBkZXZpY2VXaWR0aCAvIHBpeGVsUmF0aW87XG4gIGNvbnN0IGNhbnZhcyA9IGNoYXJ0LmNhbnZhcztcbiAgaWYgKGNhbnZhcy5zdHlsZSAmJiAoZm9yY2VTdHlsZSB8fCAoIWNhbnZhcy5zdHlsZS5oZWlnaHQgJiYgIWNhbnZhcy5zdHlsZS53aWR0aCkpKSB7XG4gICAgY2FudmFzLnN0eWxlLmhlaWdodCA9IGAke2NoYXJ0LmhlaWdodH1weGA7XG4gICAgY2FudmFzLnN0eWxlLndpZHRoID0gYCR7Y2hhcnQud2lkdGh9cHhgO1xuICB9XG4gIGlmIChjaGFydC5jdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyAhPT0gcGl4ZWxSYXRpb1xuICAgICAgfHwgY2FudmFzLmhlaWdodCAhPT0gZGV2aWNlSGVpZ2h0XG4gICAgICB8fCBjYW52YXMud2lkdGggIT09IGRldmljZVdpZHRoKSB7XG4gICAgY2hhcnQuY3VycmVudERldmljZVBpeGVsUmF0aW8gPSBwaXhlbFJhdGlvO1xuICAgIGNhbnZhcy5oZWlnaHQgPSBkZXZpY2VIZWlnaHQ7XG4gICAgY2FudmFzLndpZHRoID0gZGV2aWNlV2lkdGg7XG4gICAgY2hhcnQuY3R4LnNldFRyYW5zZm9ybShwaXhlbFJhdGlvLCAwLCAwLCBwaXhlbFJhdGlvLCAwLCAwKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5jb25zdCBzdXBwb3J0c0V2ZW50TGlzdGVuZXJPcHRpb25zID0gKGZ1bmN0aW9uKCkge1xuICBsZXQgcGFzc2l2ZVN1cHBvcnRlZCA9IGZhbHNlO1xuICB0cnkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICBnZXQgcGFzc2l2ZSgpIHtcbiAgICAgICAgcGFzc2l2ZVN1cHBvcnRlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0JywgbnVsbCwgb3B0aW9ucyk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Rlc3QnLCBudWxsLCBvcHRpb25zKTtcbiAgfSBjYXRjaCAoZSkge1xuICB9XG4gIHJldHVybiBwYXNzaXZlU3VwcG9ydGVkO1xufSgpKTtcbmZ1bmN0aW9uIHJlYWRVc2VkU2l6ZShlbGVtZW50LCBwcm9wZXJ0eSkge1xuICBjb25zdCB2YWx1ZSA9IGdldFN0eWxlKGVsZW1lbnQsIHByb3BlcnR5KTtcbiAgY29uc3QgbWF0Y2hlcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKC9eKFxcZCspKFxcLlxcZCspP3B4JC8pO1xuICByZXR1cm4gbWF0Y2hlcyA/ICttYXRjaGVzWzFdIDogdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBfcG9pbnRJbkxpbmUocDEsIHAyLCB0LCBtb2RlKSB7XG4gIHJldHVybiB7XG4gICAgeDogcDEueCArIHQgKiAocDIueCAtIHAxLngpLFxuICAgIHk6IHAxLnkgKyB0ICogKHAyLnkgLSBwMS55KVxuICB9O1xufVxuZnVuY3Rpb24gX3N0ZXBwZWRJbnRlcnBvbGF0aW9uKHAxLCBwMiwgdCwgbW9kZSkge1xuICByZXR1cm4ge1xuICAgIHg6IHAxLnggKyB0ICogKHAyLnggLSBwMS54KSxcbiAgICB5OiBtb2RlID09PSAnbWlkZGxlJyA/IHQgPCAwLjUgPyBwMS55IDogcDIueVxuICAgIDogbW9kZSA9PT0gJ2FmdGVyJyA/IHQgPCAxID8gcDEueSA6IHAyLnlcbiAgICA6IHQgPiAwID8gcDIueSA6IHAxLnlcbiAgfTtcbn1cbmZ1bmN0aW9uIF9iZXppZXJJbnRlcnBvbGF0aW9uKHAxLCBwMiwgdCwgbW9kZSkge1xuICBjb25zdCBjcDEgPSB7eDogcDEuY3AyeCwgeTogcDEuY3AyeX07XG4gIGNvbnN0IGNwMiA9IHt4OiBwMi5jcDF4LCB5OiBwMi5jcDF5fTtcbiAgY29uc3QgYSA9IF9wb2ludEluTGluZShwMSwgY3AxLCB0KTtcbiAgY29uc3QgYiA9IF9wb2ludEluTGluZShjcDEsIGNwMiwgdCk7XG4gIGNvbnN0IGMgPSBfcG9pbnRJbkxpbmUoY3AyLCBwMiwgdCk7XG4gIGNvbnN0IGQgPSBfcG9pbnRJbkxpbmUoYSwgYiwgdCk7XG4gIGNvbnN0IGUgPSBfcG9pbnRJbkxpbmUoYiwgYywgdCk7XG4gIHJldHVybiBfcG9pbnRJbkxpbmUoZCwgZSwgdCk7XG59XG5cbmNvbnN0IGludGxDYWNoZSA9IG5ldyBNYXAoKTtcbmZ1bmN0aW9uIGdldE51bWJlckZvcm1hdChsb2NhbGUsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGNvbnN0IGNhY2hlS2V5ID0gbG9jYWxlICsgSlNPTi5zdHJpbmdpZnkob3B0aW9ucyk7XG4gIGxldCBmb3JtYXR0ZXIgPSBpbnRsQ2FjaGUuZ2V0KGNhY2hlS2V5KTtcbiAgaWYgKCFmb3JtYXR0ZXIpIHtcbiAgICBmb3JtYXR0ZXIgPSBuZXcgSW50bC5OdW1iZXJGb3JtYXQobG9jYWxlLCBvcHRpb25zKTtcbiAgICBpbnRsQ2FjaGUuc2V0KGNhY2hlS2V5LCBmb3JtYXR0ZXIpO1xuICB9XG4gIHJldHVybiBmb3JtYXR0ZXI7XG59XG5mdW5jdGlvbiBmb3JtYXROdW1iZXIobnVtLCBsb2NhbGUsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGdldE51bWJlckZvcm1hdChsb2NhbGUsIG9wdGlvbnMpLmZvcm1hdChudW0pO1xufVxuXG5jb25zdCBnZXRSaWdodFRvTGVmdEFkYXB0ZXIgPSBmdW5jdGlvbihyZWN0WCwgd2lkdGgpIHtcbiAgcmV0dXJuIHtcbiAgICB4KHgpIHtcbiAgICAgIHJldHVybiByZWN0WCArIHJlY3RYICsgd2lkdGggLSB4O1xuICAgIH0sXG4gICAgc2V0V2lkdGgodykge1xuICAgICAgd2lkdGggPSB3O1xuICAgIH0sXG4gICAgdGV4dEFsaWduKGFsaWduKSB7XG4gICAgICBpZiAoYWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgIHJldHVybiBhbGlnbjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhbGlnbiA9PT0gJ3JpZ2h0JyA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gICAgfSxcbiAgICB4UGx1cyh4LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHggLSB2YWx1ZTtcbiAgICB9LFxuICAgIGxlZnRGb3JMdHIoeCwgaXRlbVdpZHRoKSB7XG4gICAgICByZXR1cm4geCAtIGl0ZW1XaWR0aDtcbiAgICB9LFxuICB9O1xufTtcbmNvbnN0IGdldExlZnRUb1JpZ2h0QWRhcHRlciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHgoeCkge1xuICAgICAgcmV0dXJuIHg7XG4gICAgfSxcbiAgICBzZXRXaWR0aCh3KSB7XG4gICAgfSxcbiAgICB0ZXh0QWxpZ24oYWxpZ24pIHtcbiAgICAgIHJldHVybiBhbGlnbjtcbiAgICB9LFxuICAgIHhQbHVzKHgsIHZhbHVlKSB7XG4gICAgICByZXR1cm4geCArIHZhbHVlO1xuICAgIH0sXG4gICAgbGVmdEZvckx0cih4LCBfaXRlbVdpZHRoKSB7XG4gICAgICByZXR1cm4geDtcbiAgICB9LFxuICB9O1xufTtcbmZ1bmN0aW9uIGdldFJ0bEFkYXB0ZXIocnRsLCByZWN0WCwgd2lkdGgpIHtcbiAgcmV0dXJuIHJ0bCA/IGdldFJpZ2h0VG9MZWZ0QWRhcHRlcihyZWN0WCwgd2lkdGgpIDogZ2V0TGVmdFRvUmlnaHRBZGFwdGVyKCk7XG59XG5mdW5jdGlvbiBvdmVycmlkZVRleHREaXJlY3Rpb24oY3R4LCBkaXJlY3Rpb24pIHtcbiAgbGV0IHN0eWxlLCBvcmlnaW5hbDtcbiAgaWYgKGRpcmVjdGlvbiA9PT0gJ2x0cicgfHwgZGlyZWN0aW9uID09PSAncnRsJykge1xuICAgIHN0eWxlID0gY3R4LmNhbnZhcy5zdHlsZTtcbiAgICBvcmlnaW5hbCA9IFtcbiAgICAgIHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ2RpcmVjdGlvbicpLFxuICAgICAgc3R5bGUuZ2V0UHJvcGVydHlQcmlvcml0eSgnZGlyZWN0aW9uJyksXG4gICAgXTtcbiAgICBzdHlsZS5zZXRQcm9wZXJ0eSgnZGlyZWN0aW9uJywgZGlyZWN0aW9uLCAnaW1wb3J0YW50Jyk7XG4gICAgY3R4LnByZXZUZXh0RGlyZWN0aW9uID0gb3JpZ2luYWw7XG4gIH1cbn1cbmZ1bmN0aW9uIHJlc3RvcmVUZXh0RGlyZWN0aW9uKGN0eCwgb3JpZ2luYWwpIHtcbiAgaWYgKG9yaWdpbmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICBkZWxldGUgY3R4LnByZXZUZXh0RGlyZWN0aW9uO1xuICAgIGN0eC5jYW52YXMuc3R5bGUuc2V0UHJvcGVydHkoJ2RpcmVjdGlvbicsIG9yaWdpbmFsWzBdLCBvcmlnaW5hbFsxXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvcGVydHlGbihwcm9wZXJ0eSkge1xuICBpZiAocHJvcGVydHkgPT09ICdhbmdsZScpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYmV0d2VlbjogX2FuZ2xlQmV0d2VlbixcbiAgICAgIGNvbXBhcmU6IF9hbmdsZURpZmYsXG4gICAgICBub3JtYWxpemU6IF9ub3JtYWxpemVBbmdsZSxcbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgYmV0d2VlbjogKG4sIHMsIGUpID0+IG4gPj0gTWF0aC5taW4ocywgZSkgJiYgbiA8PSBNYXRoLm1heChlLCBzKSxcbiAgICBjb21wYXJlOiAoYSwgYikgPT4gYSAtIGIsXG4gICAgbm9ybWFsaXplOiB4ID0+IHhcbiAgfTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVNlZ21lbnQoe3N0YXJ0LCBlbmQsIGNvdW50LCBsb29wLCBzdHlsZX0pIHtcbiAgcmV0dXJuIHtcbiAgICBzdGFydDogc3RhcnQgJSBjb3VudCxcbiAgICBlbmQ6IGVuZCAlIGNvdW50LFxuICAgIGxvb3A6IGxvb3AgJiYgKGVuZCAtIHN0YXJ0ICsgMSkgJSBjb3VudCA9PT0gMCxcbiAgICBzdHlsZVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0U2VnbWVudChzZWdtZW50LCBwb2ludHMsIGJvdW5kcykge1xuICBjb25zdCB7cHJvcGVydHksIHN0YXJ0OiBzdGFydEJvdW5kLCBlbmQ6IGVuZEJvdW5kfSA9IGJvdW5kcztcbiAgY29uc3Qge2JldHdlZW4sIG5vcm1hbGl6ZX0gPSBwcm9wZXJ0eUZuKHByb3BlcnR5KTtcbiAgY29uc3QgY291bnQgPSBwb2ludHMubGVuZ3RoO1xuICBsZXQge3N0YXJ0LCBlbmQsIGxvb3B9ID0gc2VnbWVudDtcbiAgbGV0IGksIGlsZW47XG4gIGlmIChsb29wKSB7XG4gICAgc3RhcnQgKz0gY291bnQ7XG4gICAgZW5kICs9IGNvdW50O1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSBjb3VudDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgaWYgKCFiZXR3ZWVuKG5vcm1hbGl6ZShwb2ludHNbc3RhcnQgJSBjb3VudF1bcHJvcGVydHldKSwgc3RhcnRCb3VuZCwgZW5kQm91bmQpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgc3RhcnQtLTtcbiAgICAgIGVuZC0tO1xuICAgIH1cbiAgICBzdGFydCAlPSBjb3VudDtcbiAgICBlbmQgJT0gY291bnQ7XG4gIH1cbiAgaWYgKGVuZCA8IHN0YXJ0KSB7XG4gICAgZW5kICs9IGNvdW50O1xuICB9XG4gIHJldHVybiB7c3RhcnQsIGVuZCwgbG9vcCwgc3R5bGU6IHNlZ21lbnQuc3R5bGV9O1xufVxuZnVuY3Rpb24gX2JvdW5kU2VnbWVudChzZWdtZW50LCBwb2ludHMsIGJvdW5kcykge1xuICBpZiAoIWJvdW5kcykge1xuICAgIHJldHVybiBbc2VnbWVudF07XG4gIH1cbiAgY29uc3Qge3Byb3BlcnR5LCBzdGFydDogc3RhcnRCb3VuZCwgZW5kOiBlbmRCb3VuZH0gPSBib3VuZHM7XG4gIGNvbnN0IGNvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgY29uc3Qge2NvbXBhcmUsIGJldHdlZW4sIG5vcm1hbGl6ZX0gPSBwcm9wZXJ0eUZuKHByb3BlcnR5KTtcbiAgY29uc3Qge3N0YXJ0LCBlbmQsIGxvb3AsIHN0eWxlfSA9IGdldFNlZ21lbnQoc2VnbWVudCwgcG9pbnRzLCBib3VuZHMpO1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgbGV0IGluc2lkZSA9IGZhbHNlO1xuICBsZXQgc3ViU3RhcnQgPSBudWxsO1xuICBsZXQgdmFsdWUsIHBvaW50LCBwcmV2VmFsdWU7XG4gIGNvbnN0IHN0YXJ0SXNCZWZvcmUgPSAoKSA9PiBiZXR3ZWVuKHN0YXJ0Qm91bmQsIHByZXZWYWx1ZSwgdmFsdWUpICYmIGNvbXBhcmUoc3RhcnRCb3VuZCwgcHJldlZhbHVlKSAhPT0gMDtcbiAgY29uc3QgZW5kSXNCZWZvcmUgPSAoKSA9PiBjb21wYXJlKGVuZEJvdW5kLCB2YWx1ZSkgPT09IDAgfHwgYmV0d2VlbihlbmRCb3VuZCwgcHJldlZhbHVlLCB2YWx1ZSk7XG4gIGNvbnN0IHNob3VsZFN0YXJ0ID0gKCkgPT4gaW5zaWRlIHx8IHN0YXJ0SXNCZWZvcmUoKTtcbiAgY29uc3Qgc2hvdWxkU3RvcCA9ICgpID0+ICFpbnNpZGUgfHwgZW5kSXNCZWZvcmUoKTtcbiAgZm9yIChsZXQgaSA9IHN0YXJ0LCBwcmV2ID0gc3RhcnQ7IGkgPD0gZW5kOyArK2kpIHtcbiAgICBwb2ludCA9IHBvaW50c1tpICUgY291bnRdO1xuICAgIGlmIChwb2ludC5za2lwKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgdmFsdWUgPSBub3JtYWxpemUocG9pbnRbcHJvcGVydHldKTtcbiAgICBpZiAodmFsdWUgPT09IHByZXZWYWx1ZSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGluc2lkZSA9IGJldHdlZW4odmFsdWUsIHN0YXJ0Qm91bmQsIGVuZEJvdW5kKTtcbiAgICBpZiAoc3ViU3RhcnQgPT09IG51bGwgJiYgc2hvdWxkU3RhcnQoKSkge1xuICAgICAgc3ViU3RhcnQgPSBjb21wYXJlKHZhbHVlLCBzdGFydEJvdW5kKSA9PT0gMCA/IGkgOiBwcmV2O1xuICAgIH1cbiAgICBpZiAoc3ViU3RhcnQgIT09IG51bGwgJiYgc2hvdWxkU3RvcCgpKSB7XG4gICAgICByZXN1bHQucHVzaChub3JtYWxpemVTZWdtZW50KHtzdGFydDogc3ViU3RhcnQsIGVuZDogaSwgbG9vcCwgY291bnQsIHN0eWxlfSkpO1xuICAgICAgc3ViU3RhcnQgPSBudWxsO1xuICAgIH1cbiAgICBwcmV2ID0gaTtcbiAgICBwcmV2VmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBpZiAoc3ViU3RhcnQgIT09IG51bGwpIHtcbiAgICByZXN1bHQucHVzaChub3JtYWxpemVTZWdtZW50KHtzdGFydDogc3ViU3RhcnQsIGVuZCwgbG9vcCwgY291bnQsIHN0eWxlfSkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBfYm91bmRTZWdtZW50cyhsaW5lLCBib3VuZHMpIHtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGNvbnN0IHNlZ21lbnRzID0gbGluZS5zZWdtZW50cztcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHN1YiA9IF9ib3VuZFNlZ21lbnQoc2VnbWVudHNbaV0sIGxpbmUucG9pbnRzLCBib3VuZHMpO1xuICAgIGlmIChzdWIubGVuZ3RoKSB7XG4gICAgICByZXN1bHQucHVzaCguLi5zdWIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gZmluZFN0YXJ0QW5kRW5kKHBvaW50cywgY291bnQsIGxvb3AsIHNwYW5HYXBzKSB7XG4gIGxldCBzdGFydCA9IDA7XG4gIGxldCBlbmQgPSBjb3VudCAtIDE7XG4gIGlmIChsb29wICYmICFzcGFuR2Fwcykge1xuICAgIHdoaWxlIChzdGFydCA8IGNvdW50ICYmICFwb2ludHNbc3RhcnRdLnNraXApIHtcbiAgICAgIHN0YXJ0Kys7XG4gICAgfVxuICB9XG4gIHdoaWxlIChzdGFydCA8IGNvdW50ICYmIHBvaW50c1tzdGFydF0uc2tpcCkge1xuICAgIHN0YXJ0Kys7XG4gIH1cbiAgc3RhcnQgJT0gY291bnQ7XG4gIGlmIChsb29wKSB7XG4gICAgZW5kICs9IHN0YXJ0O1xuICB9XG4gIHdoaWxlIChlbmQgPiBzdGFydCAmJiBwb2ludHNbZW5kICUgY291bnRdLnNraXApIHtcbiAgICBlbmQtLTtcbiAgfVxuICBlbmQgJT0gY291bnQ7XG4gIHJldHVybiB7c3RhcnQsIGVuZH07XG59XG5mdW5jdGlvbiBzb2xpZFNlZ21lbnRzKHBvaW50cywgc3RhcnQsIG1heCwgbG9vcCkge1xuICBjb25zdCBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBsZXQgbGFzdCA9IHN0YXJ0O1xuICBsZXQgcHJldiA9IHBvaW50c1tzdGFydF07XG4gIGxldCBlbmQ7XG4gIGZvciAoZW5kID0gc3RhcnQgKyAxOyBlbmQgPD0gbWF4OyArK2VuZCkge1xuICAgIGNvbnN0IGN1ciA9IHBvaW50c1tlbmQgJSBjb3VudF07XG4gICAgaWYgKGN1ci5za2lwIHx8IGN1ci5zdG9wKSB7XG4gICAgICBpZiAoIXByZXYuc2tpcCkge1xuICAgICAgICBsb29wID0gZmFsc2U7XG4gICAgICAgIHJlc3VsdC5wdXNoKHtzdGFydDogc3RhcnQgJSBjb3VudCwgZW5kOiAoZW5kIC0gMSkgJSBjb3VudCwgbG9vcH0pO1xuICAgICAgICBzdGFydCA9IGxhc3QgPSBjdXIuc3RvcCA/IGVuZCA6IG51bGw7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxhc3QgPSBlbmQ7XG4gICAgICBpZiAocHJldi5za2lwKSB7XG4gICAgICAgIHN0YXJ0ID0gZW5kO1xuICAgICAgfVxuICAgIH1cbiAgICBwcmV2ID0gY3VyO1xuICB9XG4gIGlmIChsYXN0ICE9PSBudWxsKSB7XG4gICAgcmVzdWx0LnB1c2goe3N0YXJ0OiBzdGFydCAlIGNvdW50LCBlbmQ6IGxhc3QgJSBjb3VudCwgbG9vcH0pO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBfY29tcHV0ZVNlZ21lbnRzKGxpbmUsIHNlZ21lbnRPcHRpb25zKSB7XG4gIGNvbnN0IHBvaW50cyA9IGxpbmUucG9pbnRzO1xuICBjb25zdCBzcGFuR2FwcyA9IGxpbmUub3B0aW9ucy5zcGFuR2FwcztcbiAgY29uc3QgY291bnQgPSBwb2ludHMubGVuZ3RoO1xuICBpZiAoIWNvdW50KSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIGNvbnN0IGxvb3AgPSAhIWxpbmUuX2xvb3A7XG4gIGNvbnN0IHtzdGFydCwgZW5kfSA9IGZpbmRTdGFydEFuZEVuZChwb2ludHMsIGNvdW50LCBsb29wLCBzcGFuR2Fwcyk7XG4gIGlmIChzcGFuR2FwcyA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiBzcGxpdEJ5U3R5bGVzKFt7c3RhcnQsIGVuZCwgbG9vcH1dLCBwb2ludHMsIHNlZ21lbnRPcHRpb25zKTtcbiAgfVxuICBjb25zdCBtYXggPSBlbmQgPCBzdGFydCA/IGVuZCArIGNvdW50IDogZW5kO1xuICBjb25zdCBjb21wbGV0ZUxvb3AgPSAhIWxpbmUuX2Z1bGxMb29wICYmIHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gY291bnQgLSAxO1xuICByZXR1cm4gc3BsaXRCeVN0eWxlcyhzb2xpZFNlZ21lbnRzKHBvaW50cywgc3RhcnQsIG1heCwgY29tcGxldGVMb29wKSwgcG9pbnRzLCBzZWdtZW50T3B0aW9ucyk7XG59XG5mdW5jdGlvbiBzcGxpdEJ5U3R5bGVzKHNlZ21lbnRzLCBwb2ludHMsIHNlZ21lbnRPcHRpb25zKSB7XG4gIGlmICghc2VnbWVudE9wdGlvbnMgfHwgIXNlZ21lbnRPcHRpb25zLnNldENvbnRleHQgfHwgIXBvaW50cykge1xuICAgIHJldHVybiBzZWdtZW50cztcbiAgfVxuICByZXR1cm4gZG9TcGxpdEJ5U3R5bGVzKHNlZ21lbnRzLCBwb2ludHMsIHNlZ21lbnRPcHRpb25zKTtcbn1cbmZ1bmN0aW9uIGRvU3BsaXRCeVN0eWxlcyhzZWdtZW50cywgcG9pbnRzLCBzZWdtZW50T3B0aW9ucykge1xuICBjb25zdCBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBsZXQgc3RhcnQgPSBzZWdtZW50c1swXS5zdGFydDtcbiAgbGV0IGkgPSBzdGFydDtcbiAgZm9yIChjb25zdCBzZWdtZW50IG9mIHNlZ21lbnRzKSB7XG4gICAgbGV0IHByZXZTdHlsZSwgc3R5bGU7XG4gICAgbGV0IHByZXYgPSBwb2ludHNbc3RhcnQgJSBjb3VudF07XG4gICAgZm9yIChpID0gc3RhcnQgKyAxOyBpIDw9IHNlZ21lbnQuZW5kOyBpKyspIHtcbiAgICAgIGNvbnN0IHB0ID0gcG9pbnRzW2kgJSBjb3VudF07XG4gICAgICBzdHlsZSA9IHJlYWRTdHlsZShzZWdtZW50T3B0aW9ucy5zZXRDb250ZXh0KHt0eXBlOiAnc2VnbWVudCcsIHAwOiBwcmV2LCBwMTogcHR9KSk7XG4gICAgICBpZiAoc3R5bGVDaGFuZ2VkKHN0eWxlLCBwcmV2U3R5bGUpKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHtzdGFydDogc3RhcnQsIGVuZDogaSAtIDEsIGxvb3A6IHNlZ21lbnQubG9vcCwgc3R5bGU6IHByZXZTdHlsZX0pO1xuICAgICAgICBwcmV2U3R5bGUgPSBzdHlsZTtcbiAgICAgICAgc3RhcnQgPSBpIC0gMTtcbiAgICAgIH1cbiAgICAgIHByZXYgPSBwdDtcbiAgICAgIHByZXZTdHlsZSA9IHN0eWxlO1xuICAgIH1cbiAgICBpZiAoc3RhcnQgPCBpIC0gMSkge1xuICAgICAgcmVzdWx0LnB1c2goe3N0YXJ0LCBlbmQ6IGkgLSAxLCBsb29wOiBzZWdtZW50Lmxvb3AsIHN0eWxlfSk7XG4gICAgICBzdGFydCA9IGkgLSAxO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gcmVhZFN0eWxlKG9wdGlvbnMpIHtcbiAgcmV0dXJuIHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yLFxuICAgIGJvcmRlckNhcFN0eWxlOiBvcHRpb25zLmJvcmRlckNhcFN0eWxlLFxuICAgIGJvcmRlckRhc2g6IG9wdGlvbnMuYm9yZGVyRGFzaCxcbiAgICBib3JkZXJEYXNoT2Zmc2V0OiBvcHRpb25zLmJvcmRlckRhc2hPZmZzZXQsXG4gICAgYm9yZGVySm9pblN0eWxlOiBvcHRpb25zLmJvcmRlckpvaW5TdHlsZSxcbiAgICBib3JkZXJXaWR0aDogb3B0aW9ucy5ib3JkZXJXaWR0aCxcbiAgICBib3JkZXJDb2xvcjogb3B0aW9ucy5ib3JkZXJDb2xvclxuICB9O1xufVxuZnVuY3Rpb24gc3R5bGVDaGFuZ2VkKHN0eWxlLCBwcmV2U3R5bGUpIHtcbiAgcmV0dXJuIHByZXZTdHlsZSAmJiBKU09OLnN0cmluZ2lmeShzdHlsZSkgIT09IEpTT04uc3RyaW5naWZ5KHByZXZTdHlsZSk7XG59XG5cbmV4cG9ydCB7IG1lcmdlIGFzICQsIF9pc1BvaW50SW5BcmVhIGFzIEEsIF9ybG9va3VwQnlLZXkgYXMgQiwgdG9QYWRkaW5nIGFzIEMsIGVhY2ggYXMgRCwgZ2V0TWF4aW11bVNpemUgYXMgRSwgX2dldFBhcmVudE5vZGUgYXMgRiwgcmVhZFVzZWRTaXplIGFzIEcsIEhBTEZfUEkgYXMgSCwgdGhyb3R0bGVkIGFzIEksIHN1cHBvcnRzRXZlbnRMaXN0ZW5lck9wdGlvbnMgYXMgSiwgbG9nMTAgYXMgSywgX2ZhY3Rvcml6ZSBhcyBMLCBmaW5pdGVPckRlZmF1bHQgYXMgTSwgY2FsbGJhY2sgYXMgTiwgX2FkZEdyYWNlIGFzIE8sIFBJIGFzIFAsIHRvRGVncmVlcyBhcyBRLCBfbWVhc3VyZVRleHQgYXMgUiwgX2ludDE2UmFuZ2UgYXMgUywgVEFVIGFzIFQsIF9hbGlnblBpeGVsIGFzIFUsIHJlbmRlclRleHQgYXMgViwgdG9Gb250IGFzIFcsIF90b0xlZnRSaWdodENlbnRlciBhcyBYLCBfYWxpZ25TdGFydEVuZCBhcyBZLCBvdmVycmlkZXMgYXMgWiwgX2FycmF5VW5pcXVlIGFzIF8sIHJlc29sdmUgYXMgYSwgX2NhcGl0YWxpemUgYXMgYTAsIGRlc2NyaXB0b3JzIGFzIGExLCBpc0Z1bmN0aW9uIGFzIGEyLCBfYXR0YWNoQ29udGV4dCBhcyBhMywgX2NyZWF0ZVJlc29sdmVyIGFzIGE0LCBfZGVzY3JpcHRvcnMgYXMgYTUsIG1lcmdlSWYgYXMgYTYsIHVpZCBhcyBhNywgZGVib3VuY2UgYXMgYTgsIHJldGluYVNjYWxlIGFzIGE5LCBuaWNlTnVtIGFzIGFBLCBhbG1vc3RXaG9sZSBhcyBhQiwgYWxtb3N0RXF1YWxzIGFzIGFDLCBfZGVjaW1hbFBsYWNlcyBhcyBhRCwgX2xvbmdlc3RUZXh0IGFzIGFFLCBfZmlsdGVyQmV0d2VlbiBhcyBhRiwgX2xvb2t1cCBhcyBhRywgZ2V0SG92ZXJDb2xvciBhcyBhSCwgY2xvbmUkMSBhcyBhSSwgX21lcmdlciBhcyBhSiwgX21lcmdlcklmIGFzIGFLLCBfZGVwcmVjYXRlZCBhcyBhTCwgdG9Gb250U3RyaW5nIGFzIGFNLCBzcGxpbmVDdXJ2ZSBhcyBhTiwgc3BsaW5lQ3VydmVNb25vdG9uZSBhcyBhTywgZ2V0U3R5bGUgYXMgYVAsIGZvbnRTdHJpbmcgYXMgYVEsIHRvTGluZUhlaWdodCBhcyBhUiwgUElUQVUgYXMgYVMsIElORklOSVRZIGFzIGFULCBSQURfUEVSX0RFRyBhcyBhVSwgUVVBUlRFUl9QSSBhcyBhViwgVFdPX1RISVJEU19QSSBhcyBhVywgX2FuZ2xlRGlmZiBhcyBhWCwgY2xlYXJDYW52YXMgYXMgYWEsIHNldHNFcXVhbCBhcyBhYiwgX2VsZW1lbnRzRXF1YWwgYXMgYWMsIGdldEFuZ2xlRnJvbVBvaW50IGFzIGFkLCBfcmVhZFZhbHVlVG9Qcm9wcyBhcyBhZSwgX3VwZGF0ZUJlemllckNvbnRyb2xQb2ludHMgYXMgYWYsIF9jb21wdXRlU2VnbWVudHMgYXMgYWcsIF9ib3VuZFNlZ21lbnRzIGFzIGFoLCBfc3RlcHBlZEludGVycG9sYXRpb24gYXMgYWksIF9iZXppZXJJbnRlcnBvbGF0aW9uIGFzIGFqLCBfcG9pbnRJbkxpbmUgYXMgYWssIF9zdGVwcGVkTGluZVRvIGFzIGFsLCBfYmV6aWVyQ3VydmVUbyBhcyBhbSwgZHJhd1BvaW50IGFzIGFuLCBhZGRSb3VuZGVkUmVjdFBhdGggYXMgYW8sIHRvVFJCTCBhcyBhcCwgdG9UUkJMQ29ybmVycyBhcyBhcSwgX2JvdW5kU2VnbWVudCBhcyBhciwgX25vcm1hbGl6ZUFuZ2xlIGFzIGFzLCBnZXRSdGxBZGFwdGVyIGFzIGF0LCBvdmVycmlkZVRleHREaXJlY3Rpb24gYXMgYXUsIF90ZXh0WCBhcyBhdiwgcmVzdG9yZVRleHREaXJlY3Rpb24gYXMgYXcsIG5vb3AgYXMgYXgsIGRpc3RhbmNlQmV0d2VlblBvaW50cyBhcyBheSwgX3NldE1pbkFuZE1heEJ5S2V5IGFzIGF6LCBpc0FycmF5IGFzIGIsIGNvbG9yIGFzIGMsIGRlZmF1bHRzIGFzIGQsIGVmZmVjdHMgYXMgZSwgcmVzb2x2ZU9iamVjdEtleSBhcyBmLCBpc051bWJlckZpbml0ZSBhcyBnLCBkZWZpbmVkIGFzIGgsIGlzT2JqZWN0IGFzIGksIGlzTnVsbE9yVW5kZWYgYXMgaiwgY2xpcEFyZWEgYXMgaywgbGlzdGVuQXJyYXlFdmVudHMgYXMgbCwgdW5jbGlwQXJlYSBhcyBtLCB0b1BlcmNlbnRhZ2UgYXMgbiwgdG9EaW1lbnNpb24gYXMgbywgZm9ybWF0TnVtYmVyIGFzIHAsIF9hbmdsZUJldHdlZW4gYXMgcSwgcmVxdWVzdEFuaW1GcmFtZSBhcyByLCBzaWduIGFzIHMsIHRvUmFkaWFucyBhcyB0LCB1bmxpc3RlbkFycmF5RXZlbnRzIGFzIHUsIHZhbHVlT3JEZWZhdWx0IGFzIHYsIGlzTnVtYmVyIGFzIHcsIF9saW1pdFZhbHVlIGFzIHgsIF9sb29rdXBCeUtleSBhcyB5LCBnZXRSZWxhdGl2ZVBvc2l0aW9uIGFzIHogfTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/chart.js/dist/chunks/helpers.segment.js\n");

/***/ }),

/***/ "./node_modules/lodash/_apply.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/_apply.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\nmodule.exports = apply;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXBwbHkuanM/ODVlMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsRUFBRTtBQUNiLFdBQVcsTUFBTTtBQUNqQixhQUFhLEVBQUU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FwcGx5LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBIGZhc3RlciBhbHRlcm5hdGl2ZSB0byBgRnVuY3Rpb24jYXBwbHlgLCB0aGlzIGZ1bmN0aW9uIGludm9rZXMgYGZ1bmNgXG4gKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2AgYW5kIHRoZSBhcmd1bWVudHMgb2YgYGFyZ3NgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBmdW5jYC5cbiAqL1xuZnVuY3Rpb24gYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncykge1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcpO1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICB9XG4gIHJldHVybiBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFwcGx5O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/_apply.js\n");

/***/ }),

/***/ "./node_modules/lodash/_assignMergeValue.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/_assignMergeValue.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseAssignValue = __webpack_require__(/*! ./_baseAssignValue */ \"./node_modules/lodash/_baseAssignValue.js\"),\n    eq = __webpack_require__(/*! ./eq */ \"./node_modules/lodash/eq.js\");\n\n/**\n * This function is like `assignValue` except that it doesn't assign\n * `undefined` values.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignMergeValue(object, key, value) {\n  if ((value !== undefined && !eq(object[key], value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nmodule.exports = assignMergeValue;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXNzaWduTWVyZ2VWYWx1ZS5qcz9iNzYwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHNCQUFzQixtQkFBTyxDQUFDLHFFQUFvQjtBQUNsRCxTQUFTLG1CQUFPLENBQUMseUNBQU07O0FBRXZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsRUFBRTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXNzaWduTWVyZ2VWYWx1ZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBiYXNlQXNzaWduVmFsdWUgPSByZXF1aXJlKCcuL19iYXNlQXNzaWduVmFsdWUnKSxcbiAgICBlcSA9IHJlcXVpcmUoJy4vZXEnKTtcblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGFzc2lnblZhbHVlYCBleGNlcHQgdGhhdCBpdCBkb2Vzbid0IGFzc2lnblxuICogYHVuZGVmaW5lZGAgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIGlmICgodmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhZXEob2JqZWN0W2tleV0sIHZhbHVlKSkgfHxcbiAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhc3NpZ25NZXJnZVZhbHVlO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/_assignMergeValue.js\n");

/***/ }),

/***/ "./node_modules/lodash/_assignValue.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_assignValue.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseAssignValue = __webpack_require__(/*! ./_baseAssignValue */ \"./node_modules/lodash/_baseAssignValue.js\"),\n    eq = __webpack_require__(/*! ./eq */ \"./node_modules/lodash/eq.js\");\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nmodule.exports = assignValue;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXNzaWduVmFsdWUuanM/MzJiMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxzQkFBc0IsbUJBQU8sQ0FBQyxxRUFBb0I7QUFDbEQsU0FBUyxtQkFBTyxDQUFDLHlDQUFNOztBQUV2QjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLEVBQUU7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXNzaWduVmFsdWUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYmFzZUFzc2lnblZhbHVlID0gcmVxdWlyZSgnLi9fYmFzZUFzc2lnblZhbHVlJyksXG4gICAgZXEgPSByZXF1aXJlKCcuL2VxJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQXNzaWducyBgdmFsdWVgIHRvIGBrZXlgIG9mIGBvYmplY3RgIGlmIHRoZSBleGlzdGluZyB2YWx1ZSBpcyBub3QgZXF1aXZhbGVudFxuICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICovXG5mdW5jdGlvbiBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV07XG4gIGlmICghKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGVxKG9ialZhbHVlLCB2YWx1ZSkpIHx8XG4gICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXNzaWduVmFsdWU7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_assignValue.js\n");

/***/ }),

/***/ "./node_modules/lodash/_baseAssignValue.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_baseAssignValue.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var defineProperty = __webpack_require__(/*! ./_defineProperty */ \"./node_modules/lodash/_defineProperty.js\");\n\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && defineProperty) {\n    defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n\nmodule.exports = baseAssignValue;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUFzc2lnblZhbHVlLmpzPzg3MmEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEscUJBQXFCLG1CQUFPLENBQUMsbUVBQW1COztBQUVoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLEVBQUU7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlQXNzaWduVmFsdWUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19kZWZpbmVQcm9wZXJ0eScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBhc3NpZ25WYWx1ZWAgYW5kIGBhc3NpZ25NZXJnZVZhbHVlYCB3aXRob3V0XG4gKiB2YWx1ZSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAqL1xuZnVuY3Rpb24gYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5ID09ICdfX3Byb3RvX18nICYmIGRlZmluZVByb3BlcnR5KSB7XG4gICAgZGVmaW5lUHJvcGVydHkob2JqZWN0LCBrZXksIHtcbiAgICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICAgJ2VudW1lcmFibGUnOiB0cnVlLFxuICAgICAgJ3ZhbHVlJzogdmFsdWUsXG4gICAgICAnd3JpdGFibGUnOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VBc3NpZ25WYWx1ZTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_baseAssignValue.js\n");

/***/ }),

/***/ "./node_modules/lodash/_baseCreate.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseCreate.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var isObject = __webpack_require__(/*! ./isObject */ \"./node_modules/lodash/isObject.js\");\n\n/** Built-in value references. */\nvar objectCreate = Object.create;\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} proto The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nvar baseCreate = (function() {\n  function object() {}\n  return function(proto) {\n    if (!isObject(proto)) {\n      return {};\n    }\n    if (objectCreate) {\n      return objectCreate(proto);\n    }\n    object.prototype = proto;\n    var result = new object;\n    object.prototype = undefined;\n    return result;\n  };\n}());\n\nmodule.exports = baseCreate;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUNyZWF0ZS5qcz83NTMwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGVBQWUsbUJBQU8sQ0FBQyxxREFBWTs7QUFFbkM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUNyZWF0ZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0Q3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jcmVhdGVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgYXNzaWduaW5nXG4gKiBwcm9wZXJ0aWVzIHRvIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHByb3RvIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAqL1xudmFyIGJhc2VDcmVhdGUgPSAoZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIG9iamVjdCgpIHt9XG4gIHJldHVybiBmdW5jdGlvbihwcm90bykge1xuICAgIGlmICghaXNPYmplY3QocHJvdG8pKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGlmIChvYmplY3RDcmVhdGUpIHtcbiAgICAgIHJldHVybiBvYmplY3RDcmVhdGUocHJvdG8pO1xuICAgIH1cbiAgICBvYmplY3QucHJvdG90eXBlID0gcHJvdG87XG4gICAgdmFyIHJlc3VsdCA9IG5ldyBvYmplY3Q7XG4gICAgb2JqZWN0LnByb3RvdHlwZSA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufSgpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlQ3JlYXRlO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/_baseCreate.js\n");

/***/ }),

/***/ "./node_modules/lodash/_baseEach.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_baseEach.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseForOwn = __webpack_require__(/*! ./_baseForOwn */ \"./node_modules/lodash/_baseForOwn.js\"),\n    createBaseEach = __webpack_require__(/*! ./_createBaseEach */ \"./node_modules/lodash/_createBaseEach.js\");\n\n/**\n * The base implementation of `_.forEach` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n */\nvar baseEach = createBaseEach(baseForOwn);\n\nmodule.exports = baseEach;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUVhY2guanM/NDhhMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIsbUJBQU8sQ0FBQywyREFBZTtBQUN4QyxxQkFBcUIsbUJBQU8sQ0FBQyxtRUFBbUI7O0FBRWhEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxhQUFhO0FBQ3hCLFdBQVcsU0FBUztBQUNwQixhQUFhLGFBQWE7QUFDMUI7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VFYWNoLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGJhc2VGb3JPd24gPSByZXF1aXJlKCcuL19iYXNlRm9yT3duJyksXG4gICAgY3JlYXRlQmFzZUVhY2ggPSByZXF1aXJlKCcuL19jcmVhdGVCYXNlRWFjaCcpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvckVhY2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICovXG52YXIgYmFzZUVhY2ggPSBjcmVhdGVCYXNlRWFjaChiYXNlRm9yT3duKTtcblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlRWFjaDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_baseEach.js\n");

/***/ }),

/***/ "./node_modules/lodash/_baseFor.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_baseFor.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var createBaseFor = __webpack_require__(/*! ./_createBaseFor */ \"./node_modules/lodash/_createBaseFor.js\");\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\nmodule.exports = baseFor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUZvci5qcz83MmFmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQixtQkFBTyxDQUFDLGlFQUFrQjs7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsU0FBUztBQUNwQixXQUFXLFNBQVM7QUFDcEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlRm9yLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGNyZWF0ZUJhc2VGb3IgPSByZXF1aXJlKCcuL19jcmVhdGVCYXNlRm9yJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGJhc2VGb3JPd25gIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYG9iamVjdGBcbiAqIHByb3BlcnRpZXMgcmV0dXJuZWQgYnkgYGtleXNGdW5jYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LlxuICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG52YXIgYmFzZUZvciA9IGNyZWF0ZUJhc2VGb3IoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlRm9yO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/_baseFor.js\n");

/***/ }),

/***/ "./node_modules/lodash/_baseForOwn.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseForOwn.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseFor = __webpack_require__(/*! ./_baseFor */ \"./node_modules/lodash/_baseFor.js\"),\n    keys = __webpack_require__(/*! ./keys */ \"./node_modules/lodash/keys.js\");\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\nmodule.exports = baseForOwn;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUZvck93bi5qcz8yNDJlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWMsbUJBQU8sQ0FBQyxxREFBWTtBQUNsQyxXQUFXLG1CQUFPLENBQUMsNkNBQVE7O0FBRTNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsU0FBUztBQUNwQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlRm9yT3duLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGJhc2VGb3IgPSByZXF1aXJlKCcuL19iYXNlRm9yJyksXG4gICAga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvck93bmAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VGb3JPd24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3Iob2JqZWN0LCBpdGVyYXRlZSwga2V5cyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUZvck93bjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_baseForOwn.js\n");

/***/ }),

/***/ "./node_modules/lodash/_baseGt.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/_baseGt.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * The base implementation of `_.gt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is greater than `other`,\n *  else `false`.\n */\nfunction baseGt(value, other) {\n  return value > other;\n}\n\nmodule.exports = baseGt;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUd0LmpzPzU3ZGMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixXQUFXLEVBQUU7QUFDYixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VHdC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZ3RgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gYG90aGVyYCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHdCh2YWx1ZSwgb3RoZXIpIHtcbiAgcmV0dXJuIHZhbHVlID4gb3RoZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUd0O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/_baseGt.js\n");

/***/ }),

/***/ "./node_modules/lodash/_baseKeysIn.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseKeysIn.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var isObject = __webpack_require__(/*! ./isObject */ \"./node_modules/lodash/isObject.js\"),\n    isPrototype = __webpack_require__(/*! ./_isPrototype */ \"./node_modules/lodash/_isPrototype.js\"),\n    nativeKeysIn = __webpack_require__(/*! ./_nativeKeysIn */ \"./node_modules/lodash/_nativeKeysIn.js\");\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseKeysIn;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUtleXNJbi5qcz80MWMzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGVBQWUsbUJBQU8sQ0FBQyxxREFBWTtBQUNuQyxrQkFBa0IsbUJBQU8sQ0FBQyw2REFBZ0I7QUFDMUMsbUJBQW1CLG1CQUFPLENBQUMsK0RBQWlCOztBQUU1QztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsYUFBYSxNQUFNO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUtleXNJbi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICBpc1Byb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2lzUHJvdG90eXBlJyksXG4gICAgbmF0aXZlS2V5c0luID0gcmVxdWlyZSgnLi9fbmF0aXZlS2V5c0luJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c0luYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzSW4ob2JqZWN0KSB7XG4gIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzSW4ob2JqZWN0KTtcbiAgfVxuICB2YXIgaXNQcm90byA9IGlzUHJvdG90eXBlKG9iamVjdCksXG4gICAgICByZXN1bHQgPSBbXTtcblxuICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgaWYgKCEoa2V5ID09ICdjb25zdHJ1Y3RvcicgJiYgKGlzUHJvdG8gfHwgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUtleXNJbjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_baseKeysIn.js\n");

/***/ }),

/***/ "./node_modules/lodash/_baseMap.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_baseMap.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseEach = __webpack_require__(/*! ./_baseEach */ \"./node_modules/lodash/_baseEach.js\"),\n    isArrayLike = __webpack_require__(/*! ./isArrayLike */ \"./node_modules/lodash/isArrayLike.js\");\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\nmodule.exports = baseMap;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZU1hcC5qcz85N2QzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGVBQWUsbUJBQU8sQ0FBQyx1REFBYTtBQUNwQyxrQkFBa0IsbUJBQU8sQ0FBQywyREFBZTs7QUFFekM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGFBQWE7QUFDeEIsV0FBVyxTQUFTO0FBQ3BCLGFBQWEsTUFBTTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlTWFwLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGJhc2VFYWNoID0gcmVxdWlyZSgnLi9fYmFzZUVhY2gnKSxcbiAgICBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXBgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYmFzZU1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gQXJyYXkoY29sbGVjdGlvbi5sZW5ndGgpIDogW107XG5cbiAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IGl0ZXJhdGVlKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlTWFwO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/_baseMap.js\n");

/***/ }),

/***/ "./node_modules/lodash/_baseMerge.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseMerge.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Stack = __webpack_require__(/*! ./_Stack */ \"./node_modules/lodash/_Stack.js\"),\n    assignMergeValue = __webpack_require__(/*! ./_assignMergeValue */ \"./node_modules/lodash/_assignMergeValue.js\"),\n    baseFor = __webpack_require__(/*! ./_baseFor */ \"./node_modules/lodash/_baseFor.js\"),\n    baseMergeDeep = __webpack_require__(/*! ./_baseMergeDeep */ \"./node_modules/lodash/_baseMergeDeep.js\"),\n    isObject = __webpack_require__(/*! ./isObject */ \"./node_modules/lodash/isObject.js\"),\n    keysIn = __webpack_require__(/*! ./keysIn */ \"./node_modules/lodash/keysIn.js\"),\n    safeGet = __webpack_require__(/*! ./_safeGet */ \"./node_modules/lodash/_safeGet.js\");\n\n/**\n * The base implementation of `_.merge` without support for multiple sources.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} [customizer] The function to customize merged values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMerge(object, source, srcIndex, customizer, stack) {\n  if (object === source) {\n    return;\n  }\n  baseFor(source, function(srcValue, key) {\n    stack || (stack = new Stack);\n    if (isObject(srcValue)) {\n      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n    }\n    else {\n      var newValue = customizer\n        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)\n        : undefined;\n\n      if (newValue === undefined) {\n        newValue = srcValue;\n      }\n      assignMergeValue(object, key, newValue);\n    }\n  }, keysIn);\n}\n\nmodule.exports = baseMerge;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZU1lcmdlLmpzP2Y5MDkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxtQkFBTyxDQUFDLGlEQUFVO0FBQzlCLHVCQUF1QixtQkFBTyxDQUFDLHVFQUFxQjtBQUNwRCxjQUFjLG1CQUFPLENBQUMscURBQVk7QUFDbEMsb0JBQW9CLG1CQUFPLENBQUMsaUVBQWtCO0FBQzlDLGVBQWUsbUJBQU8sQ0FBQyxxREFBWTtBQUNuQyxhQUFhLG1CQUFPLENBQUMsaURBQVU7QUFDL0IsY0FBYyxtQkFBTyxDQUFDLHFEQUFZOztBQUVsQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsU0FBUztBQUNwQixXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlTWVyZ2UuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgU3RhY2sgPSByZXF1aXJlKCcuL19TdGFjaycpLFxuICAgIGFzc2lnbk1lcmdlVmFsdWUgPSByZXF1aXJlKCcuL19hc3NpZ25NZXJnZVZhbHVlJyksXG4gICAgYmFzZUZvciA9IHJlcXVpcmUoJy4vX2Jhc2VGb3InKSxcbiAgICBiYXNlTWVyZ2VEZWVwID0gcmVxdWlyZSgnLi9fYmFzZU1lcmdlRGVlcCcpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIGtleXNJbiA9IHJlcXVpcmUoJy4va2V5c0luJyksXG4gICAgc2FmZUdldCA9IHJlcXVpcmUoJy4vX3NhZmVHZXQnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZXJnZWAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIG1lcmdlZCB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICogIGNvdW50ZXJwYXJ0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spIHtcbiAgaWYgKG9iamVjdCA9PT0gc291cmNlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGJhc2VGb3Ioc291cmNlLCBmdW5jdGlvbihzcmNWYWx1ZSwga2V5KSB7XG4gICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICBpZiAoaXNPYmplY3Qoc3JjVmFsdWUpKSB7XG4gICAgICBiYXNlTWVyZ2VEZWVwKG9iamVjdCwgc291cmNlLCBrZXksIHNyY0luZGV4LCBiYXNlTWVyZ2UsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgID8gY3VzdG9taXplcihzYWZlR2V0KG9iamVjdCwga2V5KSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgICB9XG4gICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfVxuICB9LCBrZXlzSW4pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VNZXJnZTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_baseMerge.js\n");

/***/ }),

/***/ "./node_modules/lodash/_baseMergeDeep.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_baseMergeDeep.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var assignMergeValue = __webpack_require__(/*! ./_assignMergeValue */ \"./node_modules/lodash/_assignMergeValue.js\"),\n    cloneBuffer = __webpack_require__(/*! ./_cloneBuffer */ \"./node_modules/lodash/_cloneBuffer.js\"),\n    cloneTypedArray = __webpack_require__(/*! ./_cloneTypedArray */ \"./node_modules/lodash/_cloneTypedArray.js\"),\n    copyArray = __webpack_require__(/*! ./_copyArray */ \"./node_modules/lodash/_copyArray.js\"),\n    initCloneObject = __webpack_require__(/*! ./_initCloneObject */ \"./node_modules/lodash/_initCloneObject.js\"),\n    isArguments = __webpack_require__(/*! ./isArguments */ \"./node_modules/lodash/isArguments.js\"),\n    isArray = __webpack_require__(/*! ./isArray */ \"./node_modules/lodash/isArray.js\"),\n    isArrayLikeObject = __webpack_require__(/*! ./isArrayLikeObject */ \"./node_modules/lodash/isArrayLikeObject.js\"),\n    isBuffer = __webpack_require__(/*! ./isBuffer */ \"./node_modules/lodash/isBuffer.js\"),\n    isFunction = __webpack_require__(/*! ./isFunction */ \"./node_modules/lodash/isFunction.js\"),\n    isObject = __webpack_require__(/*! ./isObject */ \"./node_modules/lodash/isObject.js\"),\n    isPlainObject = __webpack_require__(/*! ./isPlainObject */ \"./node_modules/lodash/isPlainObject.js\"),\n    isTypedArray = __webpack_require__(/*! ./isTypedArray */ \"./node_modules/lodash/isTypedArray.js\"),\n    safeGet = __webpack_require__(/*! ./_safeGet */ \"./node_modules/lodash/_safeGet.js\"),\n    toPlainObject = __webpack_require__(/*! ./toPlainObject */ \"./node_modules/lodash/toPlainObject.js\");\n\n/**\n * A specialized version of `baseMerge` for arrays and objects which performs\n * deep merges and tracks traversed objects enabling objects with circular\n * references to be merged.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {string} key The key of the value to merge.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} mergeFunc The function to merge values.\n * @param {Function} [customizer] The function to customize assigned values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n  var objValue = safeGet(object, key),\n      srcValue = safeGet(source, key),\n      stacked = stack.get(srcValue);\n\n  if (stacked) {\n    assignMergeValue(object, key, stacked);\n    return;\n  }\n  var newValue = customizer\n    ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n    : undefined;\n\n  var isCommon = newValue === undefined;\n\n  if (isCommon) {\n    var isArr = isArray(srcValue),\n        isBuff = !isArr && isBuffer(srcValue),\n        isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n    newValue = srcValue;\n    if (isArr || isBuff || isTyped) {\n      if (isArray(objValue)) {\n        newValue = objValue;\n      }\n      else if (isArrayLikeObject(objValue)) {\n        newValue = copyArray(objValue);\n      }\n      else if (isBuff) {\n        isCommon = false;\n        newValue = cloneBuffer(srcValue, true);\n      }\n      else if (isTyped) {\n        isCommon = false;\n        newValue = cloneTypedArray(srcValue, true);\n      }\n      else {\n        newValue = [];\n      }\n    }\n    else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n      newValue = objValue;\n      if (isArguments(objValue)) {\n        newValue = toPlainObject(objValue);\n      }\n      else if (!isObject(objValue) || isFunction(objValue)) {\n        newValue = initCloneObject(srcValue);\n      }\n    }\n    else {\n      isCommon = false;\n    }\n  }\n  if (isCommon) {\n    // Recursively merge objects and arrays (susceptible to call stack limits).\n    stack.set(srcValue, newValue);\n    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n    stack['delete'](srcValue);\n  }\n  assignMergeValue(object, key, newValue);\n}\n\nmodule.exports = baseMergeDeep;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZU1lcmdlRGVlcC5qcz80ZjUwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHVCQUF1QixtQkFBTyxDQUFDLHVFQUFxQjtBQUNwRCxrQkFBa0IsbUJBQU8sQ0FBQyw2REFBZ0I7QUFDMUMsc0JBQXNCLG1CQUFPLENBQUMscUVBQW9CO0FBQ2xELGdCQUFnQixtQkFBTyxDQUFDLHlEQUFjO0FBQ3RDLHNCQUFzQixtQkFBTyxDQUFDLHFFQUFvQjtBQUNsRCxrQkFBa0IsbUJBQU8sQ0FBQywyREFBZTtBQUN6QyxjQUFjLG1CQUFPLENBQUMsbURBQVc7QUFDakMsd0JBQXdCLG1CQUFPLENBQUMsdUVBQXFCO0FBQ3JELGVBQWUsbUJBQU8sQ0FBQyxxREFBWTtBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQyx5REFBYztBQUN2QyxlQUFlLG1CQUFPLENBQUMscURBQVk7QUFDbkMsb0JBQW9CLG1CQUFPLENBQUMsK0RBQWlCO0FBQzdDLG1CQUFtQixtQkFBTyxDQUFDLDZEQUFnQjtBQUMzQyxjQUFjLG1CQUFPLENBQUMscURBQVk7QUFDbEMsb0JBQW9CLG1CQUFPLENBQUMsK0RBQWlCOztBQUU3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQixXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlTWVyZ2VEZWVwLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFzc2lnbk1lcmdlVmFsdWUgPSByZXF1aXJlKCcuL19hc3NpZ25NZXJnZVZhbHVlJyksXG4gICAgY2xvbmVCdWZmZXIgPSByZXF1aXJlKCcuL19jbG9uZUJ1ZmZlcicpLFxuICAgIGNsb25lVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vX2Nsb25lVHlwZWRBcnJheScpLFxuICAgIGNvcHlBcnJheSA9IHJlcXVpcmUoJy4vX2NvcHlBcnJheScpLFxuICAgIGluaXRDbG9uZU9iamVjdCA9IHJlcXVpcmUoJy4vX2luaXRDbG9uZU9iamVjdCcpLFxuICAgIGlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9pc0FyZ3VtZW50cycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0FycmF5TGlrZU9iamVjdCA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2VPYmplY3QnKSxcbiAgICBpc0J1ZmZlciA9IHJlcXVpcmUoJy4vaXNCdWZmZXInKSxcbiAgICBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnLi9pc0Z1bmN0aW9uJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgaXNQbGFpbk9iamVjdCA9IHJlcXVpcmUoJy4vaXNQbGFpbk9iamVjdCcpLFxuICAgIGlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vaXNUeXBlZEFycmF5JyksXG4gICAgc2FmZUdldCA9IHJlcXVpcmUoJy4vX3NhZmVHZXQnKSxcbiAgICB0b1BsYWluT2JqZWN0ID0gcmVxdWlyZSgnLi90b1BsYWluT2JqZWN0Jyk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlTWVyZ2VgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAqIGRlZXAgbWVyZ2VzIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gKiByZWZlcmVuY2VzIHRvIGJlIG1lcmdlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gbWVyZ2UuXG4gKiBAcGFyYW0ge251bWJlcn0gc3JjSW5kZXggVGhlIGluZGV4IG9mIGBzb3VyY2VgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gbWVyZ2VGdW5jIFRoZSBmdW5jdGlvbiB0byBtZXJnZSB2YWx1ZXMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICogIGNvdW50ZXJwYXJ0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZU1lcmdlRGVlcChvYmplY3QsIHNvdXJjZSwga2V5LCBzcmNJbmRleCwgbWVyZ2VGdW5jLCBjdXN0b21pemVyLCBzdGFjaykge1xuICB2YXIgb2JqVmFsdWUgPSBzYWZlR2V0KG9iamVjdCwga2V5KSxcbiAgICAgIHNyY1ZhbHVlID0gc2FmZUdldChzb3VyY2UsIGtleSksXG4gICAgICBzdGFja2VkID0gc3RhY2suZ2V0KHNyY1ZhbHVlKTtcblxuICBpZiAoc3RhY2tlZCkge1xuICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHN0YWNrZWQpO1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgPyBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwgKGtleSArICcnKSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKVxuICAgIDogdW5kZWZpbmVkO1xuXG4gIHZhciBpc0NvbW1vbiA9IG5ld1ZhbHVlID09PSB1bmRlZmluZWQ7XG5cbiAgaWYgKGlzQ29tbW9uKSB7XG4gICAgdmFyIGlzQXJyID0gaXNBcnJheShzcmNWYWx1ZSksXG4gICAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiBpc0J1ZmZlcihzcmNWYWx1ZSksXG4gICAgICAgIGlzVHlwZWQgPSAhaXNBcnIgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkoc3JjVmFsdWUpO1xuXG4gICAgbmV3VmFsdWUgPSBzcmNWYWx1ZTtcbiAgICBpZiAoaXNBcnIgfHwgaXNCdWZmIHx8IGlzVHlwZWQpIHtcbiAgICAgIGlmIChpc0FycmF5KG9ialZhbHVlKSkge1xuICAgICAgICBuZXdWYWx1ZSA9IG9ialZhbHVlO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoaXNBcnJheUxpa2VPYmplY3Qob2JqVmFsdWUpKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gY29weUFycmF5KG9ialZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGlzQnVmZikge1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICBuZXdWYWx1ZSA9IGNsb25lQnVmZmVyKHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGlzVHlwZWQpIHtcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgbmV3VmFsdWUgPSBjbG9uZVR5cGVkQXJyYXkoc3JjVmFsdWUsIHRydWUpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIG5ld1ZhbHVlID0gW107XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzUGxhaW5PYmplY3Qoc3JjVmFsdWUpIHx8IGlzQXJndW1lbnRzKHNyY1ZhbHVlKSkge1xuICAgICAgbmV3VmFsdWUgPSBvYmpWYWx1ZTtcbiAgICAgIGlmIChpc0FyZ3VtZW50cyhvYmpWYWx1ZSkpIHtcbiAgICAgICAgbmV3VmFsdWUgPSB0b1BsYWluT2JqZWN0KG9ialZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKCFpc09iamVjdChvYmpWYWx1ZSkgfHwgaXNGdW5jdGlvbihvYmpWYWx1ZSkpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBpbml0Q2xvbmVPYmplY3Qoc3JjVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIGlmIChpc0NvbW1vbikge1xuICAgIC8vIFJlY3Vyc2l2ZWx5IG1lcmdlIG9iamVjdHMgYW5kIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIHN0YWNrLnNldChzcmNWYWx1ZSwgbmV3VmFsdWUpO1xuICAgIG1lcmdlRnVuYyhuZXdWYWx1ZSwgc3JjVmFsdWUsIHNyY0luZGV4LCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgc3RhY2tbJ2RlbGV0ZSddKHNyY1ZhbHVlKTtcbiAgfVxuICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZU1lcmdlRGVlcDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_baseMergeDeep.js\n");

/***/ }),

/***/ "./node_modules/lodash/_baseRest.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_baseRest.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var identity = __webpack_require__(/*! ./identity */ \"./node_modules/lodash/identity.js\"),\n    overRest = __webpack_require__(/*! ./_overRest */ \"./node_modules/lodash/_overRest.js\"),\n    setToString = __webpack_require__(/*! ./_setToString */ \"./node_modules/lodash/_setToString.js\");\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  return setToString(overRest(func, start, identity), func + '');\n}\n\nmodule.exports = baseRest;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVJlc3QuanM/MTAwZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxlQUFlLG1CQUFPLENBQUMscURBQVk7QUFDbkMsZUFBZSxtQkFBTyxDQUFDLHVEQUFhO0FBQ3BDLGtCQUFrQixtQkFBTyxDQUFDLDZEQUFnQjs7QUFFMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VSZXN0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGlkZW50aXR5ID0gcmVxdWlyZSgnLi9pZGVudGl0eScpLFxuICAgIG92ZXJSZXN0ID0gcmVxdWlyZSgnLi9fb3ZlclJlc3QnKSxcbiAgICBzZXRUb1N0cmluZyA9IHJlcXVpcmUoJy4vX3NldFRvU3RyaW5nJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVzdGAgd2hpY2ggZG9lc24ndCB2YWxpZGF0ZSBvciBjb2VyY2UgYXJndW1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VSZXN0KGZ1bmMsIHN0YXJ0KSB7XG4gIHJldHVybiBzZXRUb1N0cmluZyhvdmVyUmVzdChmdW5jLCBzdGFydCwgaWRlbnRpdHkpLCBmdW5jICsgJycpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VSZXN0O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/_baseRest.js\n");

/***/ }),

/***/ "./node_modules/lodash/_baseSetToString.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_baseSetToString.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var constant = __webpack_require__(/*! ./constant */ \"./node_modules/lodash/constant.js\"),\n    defineProperty = __webpack_require__(/*! ./_defineProperty */ \"./node_modules/lodash/_defineProperty.js\"),\n    identity = __webpack_require__(/*! ./identity */ \"./node_modules/lodash/identity.js\");\n\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar baseSetToString = !defineProperty ? identity : function(func, string) {\n  return defineProperty(func, 'toString', {\n    'configurable': true,\n    'enumerable': false,\n    'value': constant(string),\n    'writable': true\n  });\n};\n\nmodule.exports = baseSetToString;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVNldFRvU3RyaW5nLmpzP2E0NTQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZUFBZSxtQkFBTyxDQUFDLHFEQUFZO0FBQ25DLHFCQUFxQixtQkFBTyxDQUFDLG1FQUFtQjtBQUNoRCxlQUFlLG1CQUFPLENBQUMscURBQVk7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQixhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlU2V0VG9TdHJpbmcuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29uc3RhbnQgPSByZXF1aXJlKCcuL2NvbnN0YW50JyksXG4gICAgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19kZWZpbmVQcm9wZXJ0eScpLFxuICAgIGlkZW50aXR5ID0gcmVxdWlyZSgnLi9pZGVudGl0eScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzZXRUb1N0cmluZ2Agd2l0aG91dCBzdXBwb3J0IGZvciBob3QgbG9vcCBzaG9ydGluZy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gKi9cbnZhciBiYXNlU2V0VG9TdHJpbmcgPSAhZGVmaW5lUHJvcGVydHkgPyBpZGVudGl0eSA6IGZ1bmN0aW9uKGZ1bmMsIHN0cmluZykge1xuICByZXR1cm4gZGVmaW5lUHJvcGVydHkoZnVuYywgJ3RvU3RyaW5nJywge1xuICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICdlbnVtZXJhYmxlJzogZmFsc2UsXG4gICAgJ3ZhbHVlJzogY29uc3RhbnQoc3RyaW5nKSxcbiAgICAnd3JpdGFibGUnOiB0cnVlXG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlU2V0VG9TdHJpbmc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_baseSetToString.js\n");

/***/ }),

/***/ "./node_modules/lodash/_cloneArrayBuffer.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/_cloneArrayBuffer.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Uint8Array = __webpack_require__(/*! ./_Uint8Array */ \"./node_modules/lodash/_Uint8Array.js\");\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\nmodule.exports = cloneArrayBuffer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2xvbmVBcnJheUJ1ZmZlci5qcz9mOGFmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQixtQkFBTyxDQUFDLDJEQUFlOztBQUV4QztBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsWUFBWTtBQUN2QixhQUFhLFlBQVk7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2xvbmVBcnJheUJ1ZmZlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBVaW50OEFycmF5ID0gcmVxdWlyZSgnLi9fVWludDhBcnJheScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgYXJyYXlCdWZmZXJgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBhcnJheUJ1ZmZlciBUaGUgYXJyYXkgYnVmZmVyIHRvIGNsb25lLlxuICogQHJldHVybnMge0FycmF5QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYXJyYXkgYnVmZmVyLlxuICovXG5mdW5jdGlvbiBjbG9uZUFycmF5QnVmZmVyKGFycmF5QnVmZmVyKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgYXJyYXlCdWZmZXIuY29uc3RydWN0b3IoYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCk7XG4gIG5ldyBVaW50OEFycmF5KHJlc3VsdCkuc2V0KG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVBcnJheUJ1ZmZlcjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_cloneArrayBuffer.js\n");

/***/ }),

/***/ "./node_modules/lodash/_cloneBuffer.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_cloneBuffer.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {var root = __webpack_require__(/*! ./_root */ \"./node_modules/lodash/_root.js\");\n\n/** Detect free variable `exports`. */\nvar freeExports =  true && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var length = buffer.length,\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n  buffer.copy(result);\n  return result;\n}\n\nmodule.exports = cloneBuffer;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../next/dist/compiled/webpack/module.js */ \"./node_modules/next/dist/compiled/webpack/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2xvbmVCdWZmZXIuanM/ZTUzOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx5REFBVyxtQkFBTyxDQUFDLCtDQUFTOztBQUU1QjtBQUNBLGtCQUFrQixLQUEwQjs7QUFFNUM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLFFBQVE7QUFDbkIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nsb25lQnVmZmVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IHJvb3QuQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgIGFsbG9jVW5zYWZlID0gQnVmZmVyID8gQnVmZmVyLmFsbG9jVW5zYWZlIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiAgYGJ1ZmZlcmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXIgVGhlIGJ1ZmZlciB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYnVmZmVyLlxuICovXG5mdW5jdGlvbiBjbG9uZUJ1ZmZlcihidWZmZXIsIGlzRGVlcCkge1xuICBpZiAoaXNEZWVwKSB7XG4gICAgcmV0dXJuIGJ1ZmZlci5zbGljZSgpO1xuICB9XG4gIHZhciBsZW5ndGggPSBidWZmZXIubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gYWxsb2NVbnNhZmUgPyBhbGxvY1Vuc2FmZShsZW5ndGgpIDogbmV3IGJ1ZmZlci5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gIGJ1ZmZlci5jb3B5KHJlc3VsdCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVCdWZmZXI7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_cloneBuffer.js\n");

/***/ }),

/***/ "./node_modules/lodash/_cloneTypedArray.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_cloneTypedArray.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var cloneArrayBuffer = __webpack_require__(/*! ./_cloneArrayBuffer */ \"./node_modules/lodash/_cloneArrayBuffer.js\");\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\nmodule.exports = cloneTypedArray;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2xvbmVUeXBlZEFycmF5LmpzP2M4ZmUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsdUJBQXVCLG1CQUFPLENBQUMsdUVBQXFCOztBQUVwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLFFBQVE7QUFDbkIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jbG9uZVR5cGVkQXJyYXkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY2xvbmVBcnJheUJ1ZmZlciA9IHJlcXVpcmUoJy4vX2Nsb25lQXJyYXlCdWZmZXInKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHR5cGVkQXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gdHlwZWRBcnJheSBUaGUgdHlwZWQgYXJyYXkgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHR5cGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBjbG9uZVR5cGVkQXJyYXkodHlwZWRBcnJheSwgaXNEZWVwKSB7XG4gIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKHR5cGVkQXJyYXkuYnVmZmVyKSA6IHR5cGVkQXJyYXkuYnVmZmVyO1xuICByZXR1cm4gbmV3IHR5cGVkQXJyYXkuY29uc3RydWN0b3IoYnVmZmVyLCB0eXBlZEFycmF5LmJ5dGVPZmZzZXQsIHR5cGVkQXJyYXkubGVuZ3RoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZVR5cGVkQXJyYXk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_cloneTypedArray.js\n");

/***/ }),

/***/ "./node_modules/lodash/_copyArray.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_copyArray.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\nmodule.exports = copyArray;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY29weUFycmF5LmpzPzQzNTkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE1BQU07QUFDakIsV0FBVyxNQUFNO0FBQ2pCLGFBQWEsTUFBTTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3B5QXJyYXkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcGllcyB0aGUgdmFsdWVzIG9mIGBzb3VyY2VgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgZnJvbS5cbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheT1bXV0gVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIHRvLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlBcnJheShzb3VyY2UsIGFycmF5KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcblxuICBhcnJheSB8fCAoYXJyYXkgPSBBcnJheShsZW5ndGgpKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtpbmRleF0gPSBzb3VyY2VbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb3B5QXJyYXk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_copyArray.js\n");

/***/ }),

/***/ "./node_modules/lodash/_copyObject.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_copyObject.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var assignValue = __webpack_require__(/*! ./_assignValue */ \"./node_modules/lodash/_assignValue.js\"),\n    baseAssignValue = __webpack_require__(/*! ./_baseAssignValue */ \"./node_modules/lodash/_baseAssignValue.js\");\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  var isNew = !object;\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    if (newValue === undefined) {\n      newValue = source[key];\n    }\n    if (isNew) {\n      baseAssignValue(object, key, newValue);\n    } else {\n      assignValue(object, key, newValue);\n    }\n  }\n  return object;\n}\n\nmodule.exports = copyObject;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY29weU9iamVjdC5qcz84ZWViIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGtCQUFrQixtQkFBTyxDQUFDLDZEQUFnQjtBQUMxQyxzQkFBc0IsbUJBQU8sQ0FBQyxxRUFBb0I7O0FBRWxEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsTUFBTTtBQUNqQixXQUFXLE9BQU8sV0FBVztBQUM3QixXQUFXLFNBQVM7QUFDcEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qjs7QUFFeEI7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3B5T2JqZWN0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFzc2lnblZhbHVlID0gcmVxdWlyZSgnLi9fYXNzaWduVmFsdWUnKSxcbiAgICBiYXNlQXNzaWduVmFsdWUgPSByZXF1aXJlKCcuL19iYXNlQXNzaWduVmFsdWUnKTtcblxuLyoqXG4gKiBDb3BpZXMgcHJvcGVydGllcyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tLlxuICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzIHRvIGNvcHkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb3BpZWQgdmFsdWVzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weU9iamVjdChzb3VyY2UsIHByb3BzLCBvYmplY3QsIGN1c3RvbWl6ZXIpIHtcbiAgdmFyIGlzTmV3ID0gIW9iamVjdDtcbiAgb2JqZWN0IHx8IChvYmplY3QgPSB7fSk7XG5cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuXG4gICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgPyBjdXN0b21pemVyKG9iamVjdFtrZXldLCBzb3VyY2Vba2V5XSwga2V5LCBvYmplY3QsIHNvdXJjZSlcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG5ld1ZhbHVlID0gc291cmNlW2tleV07XG4gICAgfVxuICAgIGlmIChpc05ldykge1xuICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBvYmplY3Q7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29weU9iamVjdDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_copyObject.js\n");

/***/ }),

/***/ "./node_modules/lodash/_createAssigner.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_createAssigner.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseRest = __webpack_require__(/*! ./_baseRest */ \"./node_modules/lodash/_baseRest.js\"),\n    isIterateeCall = __webpack_require__(/*! ./_isIterateeCall */ \"./node_modules/lodash/_isIterateeCall.js\");\n\n/**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */\nfunction createAssigner(assigner) {\n  return baseRest(function(object, sources) {\n    var index = -1,\n        length = sources.length,\n        customizer = length > 1 ? sources[length - 1] : undefined,\n        guard = length > 2 ? sources[2] : undefined;\n\n    customizer = (assigner.length > 3 && typeof customizer == 'function')\n      ? (length--, customizer)\n      : undefined;\n\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      customizer = length < 3 ? undefined : customizer;\n      length = 1;\n    }\n    object = Object(object);\n    while (++index < length) {\n      var source = sources[index];\n      if (source) {\n        assigner(object, source, index, customizer);\n      }\n    }\n    return object;\n  });\n}\n\nmodule.exports = createAssigner;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlQXNzaWduZXIuanM/MmVjMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxlQUFlLG1CQUFPLENBQUMsdURBQWE7QUFDcEMscUJBQXFCLG1CQUFPLENBQUMsbUVBQW1COztBQUVoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQixhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NyZWF0ZUFzc2lnbmVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGJhc2VSZXN0ID0gcmVxdWlyZSgnLi9fYmFzZVJlc3QnKSxcbiAgICBpc0l0ZXJhdGVlQ2FsbCA9IHJlcXVpcmUoJy4vX2lzSXRlcmF0ZWVDYWxsJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uYXNzaWduYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gYXNzaWduZXIgVGhlIGZ1bmN0aW9uIHRvIGFzc2lnbiB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhc3NpZ25lciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQXNzaWduZXIoYXNzaWduZXIpIHtcbiAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgc291cmNlcykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBzb3VyY2VzLmxlbmd0aCxcbiAgICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA+IDEgPyBzb3VyY2VzW2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkLFxuICAgICAgICBndWFyZCA9IGxlbmd0aCA+IDIgPyBzb3VyY2VzWzJdIDogdW5kZWZpbmVkO1xuXG4gICAgY3VzdG9taXplciA9IChhc3NpZ25lci5sZW5ndGggPiAzICYmIHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicpXG4gICAgICA/IChsZW5ndGgtLSwgY3VzdG9taXplcilcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHNvdXJjZXNbMF0sIHNvdXJjZXNbMV0sIGd1YXJkKSkge1xuICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiBjdXN0b21pemVyO1xuICAgICAgbGVuZ3RoID0gMTtcbiAgICB9XG4gICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgYXNzaWduZXIob2JqZWN0LCBzb3VyY2UsIGluZGV4LCBjdXN0b21pemVyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQXNzaWduZXI7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_createAssigner.js\n");

/***/ }),

/***/ "./node_modules/lodash/_createBaseEach.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_createBaseEach.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var isArrayLike = __webpack_require__(/*! ./isArrayLike */ \"./node_modules/lodash/isArrayLike.js\");\n\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseEach(eachFunc, fromRight) {\n  return function(collection, iteratee) {\n    if (collection == null) {\n      return collection;\n    }\n    if (!isArrayLike(collection)) {\n      return eachFunc(collection, iteratee);\n    }\n    var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n    return collection;\n  };\n}\n\nmodule.exports = createBaseEach;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlQmFzZUVhY2guanM/OTUwYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxrQkFBa0IsbUJBQU8sQ0FBQywyREFBZTs7QUFFekM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEIsV0FBVyxRQUFRO0FBQ25CLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NyZWF0ZUJhc2VFYWNoLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBgYmFzZUVhY2hgIG9yIGBiYXNlRWFjaFJpZ2h0YCBmdW5jdGlvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBhIGNvbGxlY3Rpb24uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VFYWNoKGVhY2hGdW5jLCBmcm9tUmlnaHQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgfVxuICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgIHJldHVybiBlYWNoRnVuYyhjb2xsZWN0aW9uLCBpdGVyYXRlZSk7XG4gICAgfVxuICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aCxcbiAgICAgICAgaW5kZXggPSBmcm9tUmlnaHQgPyBsZW5ndGggOiAtMSxcbiAgICAgICAgaXRlcmFibGUgPSBPYmplY3QoY29sbGVjdGlvbik7XG5cbiAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2luZGV4XSwgaW5kZXgsIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUJhc2VFYWNoO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/_createBaseEach.js\n");

/***/ }),

/***/ "./node_modules/lodash/_createBaseFor.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_createBaseFor.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\nmodule.exports = createBaseFor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlQmFzZUZvci5qcz85OWNkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jcmVhdGVCYXNlRm9yLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVzIGEgYmFzZSBmdW5jdGlvbiBmb3IgbWV0aG9kcyBsaWtlIGBfLmZvckluYCBhbmQgYF8uZm9yT3duYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVCYXNlRm9yKGZyb21SaWdodCkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSwga2V5c0Z1bmMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgaXRlcmFibGUgPSBPYmplY3Qob2JqZWN0KSxcbiAgICAgICAgcHJvcHMgPSBrZXlzRnVuYyhvYmplY3QpLFxuICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIHZhciBrZXkgPSBwcm9wc1tmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XTtcbiAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Q7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQmFzZUZvcjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_createBaseFor.js\n");

/***/ }),

/***/ "./node_modules/lodash/_defineProperty.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_defineProperty.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var getNative = __webpack_require__(/*! ./_getNative */ \"./node_modules/lodash/_getNative.js\");\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\nmodule.exports = defineProperty;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZGVmaW5lUHJvcGVydHkuanM/M2I0YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxnQkFBZ0IsbUJBQU8sQ0FBQyx5REFBYzs7QUFFdEM7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsR0FBRztBQUNILENBQUM7O0FBRUQiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19kZWZpbmVQcm9wZXJ0eS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKTtcblxudmFyIGRlZmluZVByb3BlcnR5ID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIHZhciBmdW5jID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2RlZmluZVByb3BlcnR5Jyk7XG4gICAgZnVuYyh7fSwgJycsIHt9KTtcbiAgICByZXR1cm4gZnVuYztcbiAgfSBjYXRjaCAoZSkge31cbn0oKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lUHJvcGVydHk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_defineProperty.js\n");

/***/ }),

/***/ "./node_modules/lodash/_getPrototype.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_getPrototype.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var overArg = __webpack_require__(/*! ./_overArg */ \"./node_modules/lodash/_overArg.js\");\n\n/** Built-in value references. */\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\n\nmodule.exports = getPrototype;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0UHJvdG90eXBlLmpzPzJkY2IiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYyxtQkFBTyxDQUFDLHFEQUFZOztBQUVsQztBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0UHJvdG90eXBlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIG92ZXJBcmcgPSByZXF1aXJlKCcuL19vdmVyQXJnJyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIGdldFByb3RvdHlwZSA9IG92ZXJBcmcoT2JqZWN0LmdldFByb3RvdHlwZU9mLCBPYmplY3QpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFByb3RvdHlwZTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_getPrototype.js\n");

/***/ }),

/***/ "./node_modules/lodash/_initCloneObject.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_initCloneObject.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseCreate = __webpack_require__(/*! ./_baseCreate */ \"./node_modules/lodash/_baseCreate.js\"),\n    getPrototype = __webpack_require__(/*! ./_getPrototype */ \"./node_modules/lodash/_getPrototype.js\"),\n    isPrototype = __webpack_require__(/*! ./_isPrototype */ \"./node_modules/lodash/_isPrototype.js\");\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\nmodule.exports = initCloneObject;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faW5pdENsb25lT2JqZWN0LmpzP2ZhMjEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCLG1CQUFPLENBQUMsMkRBQWU7QUFDeEMsbUJBQW1CLG1CQUFPLENBQUMsK0RBQWlCO0FBQzVDLGtCQUFrQixtQkFBTyxDQUFDLDZEQUFnQjs7QUFFMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2luaXRDbG9uZU9iamVjdC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBiYXNlQ3JlYXRlID0gcmVxdWlyZSgnLi9fYmFzZUNyZWF0ZScpLFxuICAgIGdldFByb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2dldFByb3RvdHlwZScpLFxuICAgIGlzUHJvdG90eXBlID0gcmVxdWlyZSgnLi9faXNQcm90b3R5cGUnKTtcblxuLyoqXG4gKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICovXG5mdW5jdGlvbiBpbml0Q2xvbmVPYmplY3Qob2JqZWN0KSB7XG4gIHJldHVybiAodHlwZW9mIG9iamVjdC5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmICFpc1Byb3RvdHlwZShvYmplY3QpKVxuICAgID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSlcbiAgICA6IHt9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluaXRDbG9uZU9iamVjdDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_initCloneObject.js\n");

/***/ }),

/***/ "./node_modules/lodash/_isIterateeCall.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_isIterateeCall.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var eq = __webpack_require__(/*! ./eq */ \"./node_modules/lodash/eq.js\"),\n    isArrayLike = __webpack_require__(/*! ./isArrayLike */ \"./node_modules/lodash/isArrayLike.js\"),\n    isIndex = __webpack_require__(/*! ./_isIndex */ \"./node_modules/lodash/_isIndex.js\"),\n    isObject = __webpack_require__(/*! ./isObject */ \"./node_modules/lodash/isObject.js\");\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\nmodule.exports = isIterateeCall;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNJdGVyYXRlZUNhbGwuanM/OWFmZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFTLG1CQUFPLENBQUMseUNBQU07QUFDdkIsa0JBQWtCLG1CQUFPLENBQUMsMkRBQWU7QUFDekMsY0FBYyxtQkFBTyxDQUFDLHFEQUFZO0FBQ2xDLGVBQWUsbUJBQU8sQ0FBQyxxREFBWTs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixXQUFXLEVBQUU7QUFDYixXQUFXLEVBQUU7QUFDYixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNJdGVyYXRlZUNhbGwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZXEgPSByZXF1aXJlKCcuL2VxJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyksXG4gICAgaXNJbmRleCA9IHJlcXVpcmUoJy4vX2lzSW5kZXgnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGdpdmVuIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgdmFsdWUgYXJndW1lbnQuXG4gKiBAcGFyYW0geyp9IGluZGV4IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgaW5kZXggb3Iga2V5IGFyZ3VtZW50LlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBvYmplY3QgYXJndW1lbnQuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJdGVyYXRlZUNhbGwodmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB0eXBlID0gdHlwZW9mIGluZGV4O1xuICBpZiAodHlwZSA9PSAnbnVtYmVyJ1xuICAgICAgICA/IChpc0FycmF5TGlrZShvYmplY3QpICYmIGlzSW5kZXgoaW5kZXgsIG9iamVjdC5sZW5ndGgpKVxuICAgICAgICA6ICh0eXBlID09ICdzdHJpbmcnICYmIGluZGV4IGluIG9iamVjdClcbiAgICAgICkge1xuICAgIHJldHVybiBlcShvYmplY3RbaW5kZXhdLCB2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzSXRlcmF0ZWVDYWxsO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/_isIterateeCall.js\n");

/***/ }),

/***/ "./node_modules/lodash/_nativeKeysIn.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_nativeKeysIn.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction nativeKeysIn(object) {\n  var result = [];\n  if (object != null) {\n    for (var key in Object(object)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = nativeKeysIn;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbmF0aXZlS2V5c0luLmpzP2VjOGMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsTUFBTTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX25hdGl2ZUtleXNJbi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlXG4gKiBbYE9iamVjdC5rZXlzYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBleGNlcHQgdGhhdCBpdCBpbmNsdWRlcyBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBuYXRpdmVLZXlzSW4ob2JqZWN0KSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgaWYgKG9iamVjdCAhPSBudWxsKSB7XG4gICAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdGl2ZUtleXNJbjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_nativeKeysIn.js\n");

/***/ }),

/***/ "./node_modules/lodash/_overRest.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_overRest.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var apply = __webpack_require__(/*! ./_apply */ \"./node_modules/lodash/_apply.js\");\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\nmodule.exports = overRest;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fb3ZlclJlc3QuanM/MjI4NiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLG1CQUFPLENBQUMsaURBQVU7O0FBRTlCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsU0FBUztBQUNwQixhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vdmVyUmVzdC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBhcHBseSA9IHJlcXVpcmUoJy4vX2FwcGx5Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVNYXggPSBNYXRoLm1heDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VSZXN0YCB3aGljaCB0cmFuc2Zvcm1zIHRoZSByZXN0IGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSByZXN0IGFycmF5IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyUmVzdChmdW5jLCBzdGFydCwgdHJhbnNmb3JtKSB7XG4gIHN0YXJ0ID0gbmF0aXZlTWF4KHN0YXJ0ID09PSB1bmRlZmluZWQgPyAoZnVuYy5sZW5ndGggLSAxKSA6IHN0YXJ0LCAwKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgoYXJncy5sZW5ndGggLSBzdGFydCwgMCksXG4gICAgICAgIGFycmF5ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBhcnJheVtpbmRleF0gPSBhcmdzW3N0YXJ0ICsgaW5kZXhdO1xuICAgIH1cbiAgICBpbmRleCA9IC0xO1xuICAgIHZhciBvdGhlckFyZ3MgPSBBcnJheShzdGFydCArIDEpO1xuICAgIHdoaWxlICgrK2luZGV4IDwgc3RhcnQpIHtcbiAgICAgIG90aGVyQXJnc1tpbmRleF0gPSBhcmdzW2luZGV4XTtcbiAgICB9XG4gICAgb3RoZXJBcmdzW3N0YXJ0XSA9IHRyYW5zZm9ybShhcnJheSk7XG4gICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIG90aGVyQXJncyk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb3ZlclJlc3Q7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_overRest.js\n");

/***/ }),

/***/ "./node_modules/lodash/_safeGet.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_safeGet.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Gets the value at `key`, unless `key` is \"__proto__\" or \"constructor\".\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction safeGet(object, key) {\n  if (key === 'constructor' && typeof object[key] === 'function') {\n    return;\n  }\n\n  if (key == '__proto__') {\n    return;\n  }\n\n  return object[key];\n}\n\nmodule.exports = safeGet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2FmZUdldC5qcz84YWRiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhLEVBQUU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2FmZUdldC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAsIHVubGVzcyBga2V5YCBpcyBcIl9fcHJvdG9fX1wiIG9yIFwiY29uc3RydWN0b3JcIi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHNhZmVHZXQob2JqZWN0LCBrZXkpIHtcbiAgaWYgKGtleSA9PT0gJ2NvbnN0cnVjdG9yJyAmJiB0eXBlb2Ygb2JqZWN0W2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoa2V5ID09ICdfX3Byb3RvX18nKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcmV0dXJuIG9iamVjdFtrZXldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNhZmVHZXQ7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_safeGet.js\n");

/***/ }),

/***/ "./node_modules/lodash/_setToString.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_setToString.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseSetToString = __webpack_require__(/*! ./_baseSetToString */ \"./node_modules/lodash/_baseSetToString.js\"),\n    shortOut = __webpack_require__(/*! ./_shortOut */ \"./node_modules/lodash/_shortOut.js\");\n\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar setToString = shortOut(baseSetToString);\n\nmodule.exports = setToString;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2V0VG9TdHJpbmcuanM/YzFjOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxzQkFBc0IsbUJBQU8sQ0FBQyxxRUFBb0I7QUFDbEQsZUFBZSxtQkFBTyxDQUFDLHVEQUFhOztBQUVwQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQixXQUFXLFNBQVM7QUFDcEIsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zZXRUb1N0cmluZy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBiYXNlU2V0VG9TdHJpbmcgPSByZXF1aXJlKCcuL19iYXNlU2V0VG9TdHJpbmcnKSxcbiAgICBzaG9ydE91dCA9IHJlcXVpcmUoJy4vX3Nob3J0T3V0Jyk7XG5cbi8qKlxuICogU2V0cyB0aGUgYHRvU3RyaW5nYCBtZXRob2Qgb2YgYGZ1bmNgIHRvIHJldHVybiBgc3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gKi9cbnZhciBzZXRUb1N0cmluZyA9IHNob3J0T3V0KGJhc2VTZXRUb1N0cmluZyk7XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0VG9TdHJpbmc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_setToString.js\n");

/***/ }),

/***/ "./node_modules/lodash/_shortOut.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_shortOut.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/** Used to detect hot functions by number of calls within a span of milliseconds. */\nvar HOT_COUNT = 800,\n    HOT_SPAN = 16;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeNow = Date.now;\n\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */\nfunction shortOut(func) {\n  var count = 0,\n      lastCalled = 0;\n\n  return function() {\n    var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return arguments[0];\n      }\n    } else {\n      count = 0;\n    }\n    return func.apply(undefined, arguments);\n  };\n}\n\nmodule.exports = shortOut;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2hvcnRPdXQuanM/ZjNjMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEIsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zaG9ydE91dC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBVc2VkIHRvIGRldGVjdCBob3QgZnVuY3Rpb25zIGJ5IG51bWJlciBvZiBjYWxscyB3aXRoaW4gYSBzcGFuIG9mIG1pbGxpc2Vjb25kcy4gKi9cbnZhciBIT1RfQ09VTlQgPSA4MDAsXG4gICAgSE9UX1NQQU4gPSAxNjtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU5vdyA9IERhdGUubm93O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0J2xsIHNob3J0IG91dCBhbmQgaW52b2tlIGBpZGVudGl0eWAgaW5zdGVhZFxuICogb2YgYGZ1bmNgIHdoZW4gaXQncyBjYWxsZWQgYEhPVF9DT1VOVGAgb3IgbW9yZSB0aW1lcyBpbiBgSE9UX1NQQU5gXG4gKiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc2hvcnRhYmxlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBzaG9ydE91dChmdW5jKSB7XG4gIHZhciBjb3VudCA9IDAsXG4gICAgICBsYXN0Q2FsbGVkID0gMDtcblxuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0YW1wID0gbmF0aXZlTm93KCksXG4gICAgICAgIHJlbWFpbmluZyA9IEhPVF9TUEFOIC0gKHN0YW1wIC0gbGFzdENhbGxlZCk7XG5cbiAgICBsYXN0Q2FsbGVkID0gc3RhbXA7XG4gICAgaWYgKHJlbWFpbmluZyA+IDApIHtcbiAgICAgIGlmICgrK2NvdW50ID49IEhPVF9DT1VOVCkge1xuICAgICAgICByZXR1cm4gYXJndW1lbnRzWzBdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb3VudCA9IDA7XG4gICAgfVxuICAgIHJldHVybiBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG9ydE91dDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_shortOut.js\n");

/***/ }),

/***/ "./node_modules/lodash/assign.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/assign.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var assignValue = __webpack_require__(/*! ./_assignValue */ \"./node_modules/lodash/_assignValue.js\"),\n    copyObject = __webpack_require__(/*! ./_copyObject */ \"./node_modules/lodash/_copyObject.js\"),\n    createAssigner = __webpack_require__(/*! ./_createAssigner */ \"./node_modules/lodash/_createAssigner.js\"),\n    isArrayLike = __webpack_require__(/*! ./isArrayLike */ \"./node_modules/lodash/isArrayLike.js\"),\n    isPrototype = __webpack_require__(/*! ./_isPrototype */ \"./node_modules/lodash/_isPrototype.js\"),\n    keys = __webpack_require__(/*! ./keys */ \"./node_modules/lodash/keys.js\");\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own enumerable string keyed properties of source objects to the\n * destination object. Source objects are applied from left to right.\n * Subsequent sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object` and is loosely based on\n * [`Object.assign`](https://mdn.io/Object/assign).\n *\n * @static\n * @memberOf _\n * @since 0.10.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.assignIn\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * function Bar() {\n *   this.c = 3;\n * }\n *\n * Foo.prototype.b = 2;\n * Bar.prototype.d = 4;\n *\n * _.assign({ 'a': 0 }, new Foo, new Bar);\n * // => { 'a': 1, 'c': 3 }\n */\nvar assign = createAssigner(function(object, source) {\n  if (isPrototype(source) || isArrayLike(source)) {\n    copyObject(source, keys(source), object);\n    return;\n  }\n  for (var key in source) {\n    if (hasOwnProperty.call(source, key)) {\n      assignValue(object, key, source[key]);\n    }\n  }\n});\n\nmodule.exports = assign;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9hc3NpZ24uanM/ZGNlNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxrQkFBa0IsbUJBQU8sQ0FBQyw2REFBZ0I7QUFDMUMsaUJBQWlCLG1CQUFPLENBQUMsMkRBQWU7QUFDeEMscUJBQXFCLG1CQUFPLENBQUMsbUVBQW1CO0FBQ2hELGtCQUFrQixtQkFBTyxDQUFDLDJEQUFlO0FBQ3pDLGtCQUFrQixtQkFBTyxDQUFDLDZEQUFnQjtBQUMxQyxXQUFXLG1CQUFPLENBQUMsNkNBQVE7O0FBRTNCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxVQUFVO0FBQ3JCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxTQUFTO0FBQ3RCLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gvYXNzaWduLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFzc2lnblZhbHVlID0gcmVxdWlyZSgnLi9fYXNzaWduVmFsdWUnKSxcbiAgICBjb3B5T2JqZWN0ID0gcmVxdWlyZSgnLi9fY29weU9iamVjdCcpLFxuICAgIGNyZWF0ZUFzc2lnbmVyID0gcmVxdWlyZSgnLi9fY3JlYXRlQXNzaWduZXInKSxcbiAgICBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKSxcbiAgICBpc1Byb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2lzUHJvdG90eXBlJyksXG4gICAga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEFzc2lnbnMgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdHMgdG8gdGhlXG4gKiBkZXN0aW5hdGlvbiBvYmplY3QuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC5cbiAqIFN1YnNlcXVlbnQgc291cmNlcyBvdmVyd3JpdGUgcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgc291cmNlcy5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YCBhbmQgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BPYmplY3QuYXNzaWduYF0oaHR0cHM6Ly9tZG4uaW8vT2JqZWN0L2Fzc2lnbikuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEwLjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqIEBzZWUgXy5hc3NpZ25JblxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiB9XG4gKlxuICogZnVuY3Rpb24gQmFyKCkge1xuICogICB0aGlzLmMgPSAzO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYiA9IDI7XG4gKiBCYXIucHJvdG90eXBlLmQgPSA0O1xuICpcbiAqIF8uYXNzaWduKHsgJ2EnOiAwIH0sIG5ldyBGb28sIG5ldyBCYXIpO1xuICogLy8gPT4geyAnYSc6IDEsICdjJzogMyB9XG4gKi9cbnZhciBhc3NpZ24gPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSkge1xuICBpZiAoaXNQcm90b3R5cGUoc291cmNlKSB8fCBpc0FycmF5TGlrZShzb3VyY2UpKSB7XG4gICAgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0KTtcbiAgICByZXR1cm47XG4gIH1cbiAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICB9XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFzc2lnbjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/assign.js\n");

/***/ }),

/***/ "./node_modules/lodash/constant.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/constant.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant(value) {\n  return function() {\n    return value;\n  };\n}\n\nmodule.exports = constant;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9jb25zdGFudC5qcz83MmYwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2IsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQSx3Q0FBd0MsU0FBUztBQUNqRDtBQUNBO0FBQ0EsV0FBVyxTQUFTLEdBQUcsU0FBUztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL2NvbnN0YW50LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGB2YWx1ZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjQuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJldHVybiBmcm9tIHRoZSBuZXcgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb25zdGFudCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uY29uc3RhbnQoeyAnYSc6IDEgfSkpO1xuICpcbiAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICogLy8gPT4gW3sgJ2EnOiAxIH0sIHsgJ2EnOiAxIH1dXG4gKlxuICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGNvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29uc3RhbnQ7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/constant.js\n");

/***/ }),

/***/ "./node_modules/lodash/isArrayLikeObject.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/isArrayLikeObject.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var isArrayLike = __webpack_require__(/*! ./isArrayLike */ \"./node_modules/lodash/isArrayLike.js\"),\n    isObjectLike = __webpack_require__(/*! ./isObjectLike */ \"./node_modules/lodash/isObjectLike.js\");\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\nmodule.exports = isArrayLikeObject;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FycmF5TGlrZU9iamVjdC5qcz9kY2JlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGtCQUFrQixtQkFBTyxDQUFDLDJEQUFlO0FBQ3pDLG1CQUFtQixtQkFBTyxDQUFDLDZEQUFnQjs7QUFFM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJyYXlMaWtlT2JqZWN0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc0FycmF5TGlrZWAgZXhjZXB0IHRoYXQgaXQgYWxzbyBjaGVja3MgaWYgYHZhbHVlYFxuICogaXMgYW4gb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LWxpa2Ugb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGlzQXJyYXlMaWtlKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5TGlrZU9iamVjdDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/isArrayLikeObject.js\n");

/***/ }),

/***/ "./node_modules/lodash/isPlainObject.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/isPlainObject.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ \"./node_modules/lodash/_baseGetTag.js\"),\n    getPrototype = __webpack_require__(/*! ./_getPrototype */ \"./node_modules/lodash/_getPrototype.js\"),\n    isObjectLike = __webpack_require__(/*! ./isObjectLike */ \"./node_modules/lodash/isObjectLike.js\");\n\n/** `Object#toString` result references. */\nvar objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n    funcToString.call(Ctor) == objectCtorString;\n}\n\nmodule.exports = isPlainObject;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1BsYWluT2JqZWN0LmpzPzYwZWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCLG1CQUFPLENBQUMsMkRBQWU7QUFDeEMsbUJBQW1CLG1CQUFPLENBQUMsK0RBQWlCO0FBQzVDLG1CQUFtQixtQkFBTyxDQUFDLDZEQUFnQjs7QUFFM0M7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsaUJBQWlCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzUGxhaW5PYmplY3QuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBnZXRQcm90b3R5cGUgPSByZXF1aXJlKCcuL19nZXRQcm90b3R5cGUnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBpbmZlciB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IuICovXG52YXIgb2JqZWN0Q3RvclN0cmluZyA9IGZ1bmNUb1N0cmluZy5jYWxsKE9iamVjdCk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIHRoYXQgaXMsIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZVxuICogYE9iamVjdGAgY29uc3RydWN0b3Igb3Igb25lIHdpdGggYSBgW1tQcm90b3R5cGVdXWAgb2YgYG51bGxgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC44LjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqIH1cbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QobmV3IEZvbyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoeyAneCc6IDAsICd5JzogMCB9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpIHx8IGJhc2VHZXRUYWcodmFsdWUpICE9IG9iamVjdFRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGUodmFsdWUpO1xuICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICByZXR1cm4gdHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yIGluc3RhbmNlb2YgQ3RvciAmJlxuICAgIGZ1bmNUb1N0cmluZy5jYWxsKEN0b3IpID09IG9iamVjdEN0b3JTdHJpbmc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNQbGFpbk9iamVjdDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/isPlainObject.js\n");

/***/ }),

/***/ "./node_modules/lodash/keysIn.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/keysIn.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayLikeKeys = __webpack_require__(/*! ./_arrayLikeKeys */ \"./node_modules/lodash/_arrayLikeKeys.js\"),\n    baseKeysIn = __webpack_require__(/*! ./_baseKeysIn */ \"./node_modules/lodash/_baseKeysIn.js\"),\n    isArrayLike = __webpack_require__(/*! ./isArrayLike */ \"./node_modules/lodash/isArrayLike.js\");\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n}\n\nmodule.exports = keysIn;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9rZXlzSW4uanM/OTkzNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0IsbUJBQU8sQ0FBQyxpRUFBa0I7QUFDOUMsaUJBQWlCLG1CQUFPLENBQUMsMkRBQWU7QUFDeEMsa0JBQWtCLG1CQUFPLENBQUMsMkRBQWU7O0FBRXpDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhLE1BQU07QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2xvZGFzaC9rZXlzSW4uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXJyYXlMaWtlS2V5cyA9IHJlcXVpcmUoJy4vX2FycmF5TGlrZUtleXMnKSxcbiAgICBiYXNlS2V5c0luID0gcmVxdWlyZSgnLi9fYmFzZUtleXNJbicpLFxuICAgIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5rZXlzSW4obmV3IEZvbyk7XG4gKiAvLyA9PiBbJ2EnLCAnYicsICdjJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqL1xuZnVuY3Rpb24ga2V5c0luKG9iamVjdCkge1xuICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0LCB0cnVlKSA6IGJhc2VLZXlzSW4ob2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBrZXlzSW47XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/keysIn.js\n");

/***/ }),

/***/ "./node_modules/lodash/map.js":
/*!************************************!*\
  !*** ./node_modules/lodash/map.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayMap = __webpack_require__(/*! ./_arrayMap */ \"./node_modules/lodash/_arrayMap.js\"),\n    baseIteratee = __webpack_require__(/*! ./_baseIteratee */ \"./node_modules/lodash/_baseIteratee.js\"),\n    baseMap = __webpack_require__(/*! ./_baseMap */ \"./node_modules/lodash/_baseMap.js\"),\n    isArray = __webpack_require__(/*! ./isArray */ \"./node_modules/lodash/isArray.js\");\n\n/**\n * Creates an array of values by running each element in `collection` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n *\n * The guarded methods are:\n * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n * @example\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * _.map([4, 8], square);\n * // => [16, 64]\n *\n * _.map({ 'a': 4, 'b': 8 }, square);\n * // => [16, 64] (iteration order is not guaranteed)\n *\n * var users = [\n *   { 'user': 'barney' },\n *   { 'user': 'fred' }\n * ];\n *\n * // The `_.property` iteratee shorthand.\n * _.map(users, 'user');\n * // => ['barney', 'fred']\n */\nfunction map(collection, iteratee) {\n  var func = isArray(collection) ? arrayMap : baseMap;\n  return func(collection, baseIteratee(iteratee, 3));\n}\n\nmodule.exports = map;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9tYXAuanM/ZGQ2MSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxlQUFlLG1CQUFPLENBQUMsdURBQWE7QUFDcEMsbUJBQW1CLG1CQUFPLENBQUMsK0RBQWlCO0FBQzVDLGNBQWMsbUJBQU8sQ0FBQyxxREFBWTtBQUNsQyxjQUFjLG1CQUFPLENBQUMsbURBQVc7O0FBRWpDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsYUFBYTtBQUN4QixXQUFXLFNBQVM7QUFDcEIsYUFBYSxNQUFNO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsaUJBQWlCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLE1BQU0sbUJBQW1CO0FBQ3pCLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gvbWFwLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFycmF5TWFwID0gcmVxdWlyZSgnLi9fYXJyYXlNYXAnKSxcbiAgICBiYXNlSXRlcmF0ZWUgPSByZXF1aXJlKCcuL19iYXNlSXRlcmF0ZWUnKSxcbiAgICBiYXNlTWFwID0gcmVxdWlyZSgnLi9fYmFzZU1hcCcpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHZhbHVlcyBieSBydW5uaW5nIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAgdGhydVxuICogYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gKiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gKlxuICogTWFueSBsb2Rhc2ggbWV0aG9kcyBhcmUgZ3VhcmRlZCB0byB3b3JrIGFzIGl0ZXJhdGVlcyBmb3IgbWV0aG9kcyBsaWtlXG4gKiBgXy5ldmVyeWAsIGBfLmZpbHRlcmAsIGBfLm1hcGAsIGBfLm1hcFZhbHVlc2AsIGBfLnJlamVjdGAsIGFuZCBgXy5zb21lYC5cbiAqXG4gKiBUaGUgZ3VhcmRlZCBtZXRob2RzIGFyZTpcbiAqIGBhcnlgLCBgY2h1bmtgLCBgY3VycnlgLCBgY3VycnlSaWdodGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsIGBldmVyeWAsXG4gKiBgZmlsbGAsIGBpbnZlcnRgLCBgcGFyc2VJbnRgLCBgcmFuZG9tYCwgYHJhbmdlYCwgYHJhbmdlUmlnaHRgLCBgcmVwZWF0YCxcbiAqIGBzYW1wbGVTaXplYCwgYHNsaWNlYCwgYHNvbWVgLCBgc29ydEJ5YCwgYHNwbGl0YCwgYHRha2VgLCBgdGFrZVJpZ2h0YCxcbiAqIGB0ZW1wbGF0ZWAsIGB0cmltYCwgYHRyaW1FbmRgLCBgdHJpbVN0YXJ0YCwgYW5kIGB3b3Jkc2BcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gKiAgIHJldHVybiBuICogbjtcbiAqIH1cbiAqXG4gKiBfLm1hcChbNCwgOF0sIHNxdWFyZSk7XG4gKiAvLyA9PiBbMTYsIDY0XVxuICpcbiAqIF8ubWFwKHsgJ2EnOiA0LCAnYic6IDggfSwgc3F1YXJlKTtcbiAqIC8vID0+IFsxNiwgNjRdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKlxuICogdmFyIHVzZXJzID0gW1xuICogICB7ICd1c2VyJzogJ2Jhcm5leScgfSxcbiAqICAgeyAndXNlcic6ICdmcmVkJyB9XG4gKiBdO1xuICpcbiAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5tYXAodXNlcnMsICd1c2VyJyk7XG4gKiAvLyA9PiBbJ2Jhcm5leScsICdmcmVkJ11cbiAqL1xuZnVuY3Rpb24gbWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5TWFwIDogYmFzZU1hcDtcbiAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgYmFzZUl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/map.js\n");

/***/ }),

/***/ "./node_modules/lodash/max.js":
/*!************************************!*\
  !*** ./node_modules/lodash/max.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseExtremum = __webpack_require__(/*! ./_baseExtremum */ \"./node_modules/lodash/_baseExtremum.js\"),\n    baseGt = __webpack_require__(/*! ./_baseGt */ \"./node_modules/lodash/_baseGt.js\"),\n    identity = __webpack_require__(/*! ./identity */ \"./node_modules/lodash/identity.js\");\n\n/**\n * Computes the maximum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * _.max([4, 2, 8, 6]);\n * // => 8\n *\n * _.max([]);\n * // => undefined\n */\nfunction max(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseGt)\n    : undefined;\n}\n\nmodule.exports = max;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9tYXguanM/YWJkZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxtQkFBbUIsbUJBQU8sQ0FBQywrREFBaUI7QUFDNUMsYUFBYSxtQkFBTyxDQUFDLG1EQUFXO0FBQ2hDLGVBQWUsbUJBQU8sQ0FBQyxxREFBWTs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixhQUFhLEVBQUU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gvbWF4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGJhc2VFeHRyZW11bSA9IHJlcXVpcmUoJy4vX2Jhc2VFeHRyZW11bScpLFxuICAgIGJhc2VHdCA9IHJlcXVpcmUoJy4vX2Jhc2VHdCcpLFxuICAgIGlkZW50aXR5ID0gcmVxdWlyZSgnLi9pZGVudGl0eScpO1xuXG4vKipcbiAqIENvbXB1dGVzIHRoZSBtYXhpbXVtIHZhbHVlIG9mIGBhcnJheWAuIElmIGBhcnJheWAgaXMgZW1wdHkgb3IgZmFsc2V5LFxuICogYHVuZGVmaW5lZGAgaXMgcmV0dXJuZWQuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE1hdGhcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF4aW11bSB2YWx1ZS5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5tYXgoWzQsIDIsIDgsIDZdKTtcbiAqIC8vID0+IDhcbiAqXG4gKiBfLm1heChbXSk7XG4gKiAvLyA9PiB1bmRlZmluZWRcbiAqL1xuZnVuY3Rpb24gbWF4KGFycmF5KSB7XG4gIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBpZGVudGl0eSwgYmFzZUd0KVxuICAgIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1heDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/max.js\n");

/***/ }),

/***/ "./node_modules/lodash/merge.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/merge.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseMerge = __webpack_require__(/*! ./_baseMerge */ \"./node_modules/lodash/_baseMerge.js\"),\n    createAssigner = __webpack_require__(/*! ./_createAssigner */ \"./node_modules/lodash/_createAssigner.js\");\n\n/**\n * This method is like `_.assign` except that it recursively merges own and\n * inherited enumerable string keyed properties of source objects into the\n * destination object. Source properties that resolve to `undefined` are\n * skipped if a destination value exists. Array and plain object properties\n * are merged recursively. Other objects and value types are overridden by\n * assignment. Source objects are applied from left to right. Subsequent\n * sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 0.5.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var object = {\n *   'a': [{ 'b': 2 }, { 'd': 4 }]\n * };\n *\n * var other = {\n *   'a': [{ 'c': 3 }, { 'e': 5 }]\n * };\n *\n * _.merge(object, other);\n * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n */\nvar merge = createAssigner(function(object, source, srcIndex) {\n  baseMerge(object, source, srcIndex);\n});\n\nmodule.exports = merge;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9tZXJnZS5qcz80MjQ1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQixtQkFBTyxDQUFDLHlEQUFjO0FBQ3RDLHFCQUFxQixtQkFBTyxDQUFDLG1FQUFtQjs7QUFFaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsVUFBVTtBQUNyQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0EsWUFBWSxTQUFTLEdBQUcsU0FBUztBQUNqQztBQUNBO0FBQ0E7QUFDQSxZQUFZLFNBQVMsR0FBRyxTQUFTO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLFVBQVUsUUFBUSxpQkFBaUIsR0FBRyxpQkFBaUI7QUFDdkQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gvbWVyZ2UuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYmFzZU1lcmdlID0gcmVxdWlyZSgnLi9fYmFzZU1lcmdlJyksXG4gICAgY3JlYXRlQXNzaWduZXIgPSByZXF1aXJlKCcuL19jcmVhdGVBc3NpZ25lcicpO1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBtZXJnZXMgb3duIGFuZFxuICogaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdHMgaW50byB0aGVcbiAqIGRlc3RpbmF0aW9uIG9iamVjdC4gU291cmNlIHByb3BlcnRpZXMgdGhhdCByZXNvbHZlIHRvIGB1bmRlZmluZWRgIGFyZVxuICogc2tpcHBlZCBpZiBhIGRlc3RpbmF0aW9uIHZhbHVlIGV4aXN0cy4gQXJyYXkgYW5kIHBsYWluIG9iamVjdCBwcm9wZXJ0aWVzXG4gKiBhcmUgbWVyZ2VkIHJlY3Vyc2l2ZWx5LiBPdGhlciBvYmplY3RzIGFuZCB2YWx1ZSB0eXBlcyBhcmUgb3ZlcnJpZGRlbiBieVxuICogYXNzaWdubWVudC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LiBTdWJzZXF1ZW50XG4gKiBzb3VyY2VzIG92ZXJ3cml0ZSBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyBzb3VyY2VzLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC41LjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHtcbiAqICAgJ2EnOiBbeyAnYic6IDIgfSwgeyAnZCc6IDQgfV1cbiAqIH07XG4gKlxuICogdmFyIG90aGVyID0ge1xuICogICAnYSc6IFt7ICdjJzogMyB9LCB7ICdlJzogNSB9XVxuICogfTtcbiAqXG4gKiBfLm1lcmdlKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4geyAnYSc6IFt7ICdiJzogMiwgJ2MnOiAzIH0sIHsgJ2QnOiA0LCAnZSc6IDUgfV0gfVxuICovXG52YXIgbWVyZ2UgPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgpIHtcbiAgYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBtZXJnZTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/merge.js\n");

/***/ }),

/***/ "./node_modules/lodash/toPlainObject.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/toPlainObject.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var copyObject = __webpack_require__(/*! ./_copyObject */ \"./node_modules/lodash/_copyObject.js\"),\n    keysIn = __webpack_require__(/*! ./keysIn */ \"./node_modules/lodash/keysIn.js\");\n\n/**\n * Converts `value` to a plain object flattening inherited enumerable string\n * keyed properties of `value` to own properties of the plain object.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {Object} Returns the converted plain object.\n * @example\n *\n * function Foo() {\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.assign({ 'a': 1 }, new Foo);\n * // => { 'a': 1, 'b': 2 }\n *\n * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n * // => { 'a': 1, 'b': 2, 'c': 3 }\n */\nfunction toPlainObject(value) {\n  return copyObject(value, keysIn(value));\n}\n\nmodule.exports = toPlainObject;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90b1BsYWluT2JqZWN0LmpzPzhkZTIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCLG1CQUFPLENBQUMsMkRBQWU7QUFDeEMsYUFBYSxtQkFBTyxDQUFDLGlEQUFVOztBQUUvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2IsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFNBQVM7QUFDdEIsVUFBVTtBQUNWO0FBQ0EsYUFBYSxTQUFTO0FBQ3RCLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gvdG9QbGFpbk9iamVjdC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBjb3B5T2JqZWN0ID0gcmVxdWlyZSgnLi9fY29weU9iamVjdCcpLFxuICAgIGtleXNJbiA9IHJlcXVpcmUoJy4va2V5c0luJyk7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHBsYWluIG9iamVjdCBmbGF0dGVuaW5nIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZ1xuICoga2V5ZWQgcHJvcGVydGllcyBvZiBgdmFsdWVgIHRvIG93biBwcm9wZXJ0aWVzIG9mIHRoZSBwbGFpbiBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgcGxhaW4gb2JqZWN0LlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmFzc2lnbih7ICdhJzogMSB9LCBuZXcgRm9vKTtcbiAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICpcbiAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIF8udG9QbGFpbk9iamVjdChuZXcgRm9vKSk7XG4gKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfVxuICovXG5mdW5jdGlvbiB0b1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBjb3B5T2JqZWN0KHZhbHVlLCBrZXlzSW4odmFsdWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b1BsYWluT2JqZWN0O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/toPlainObject.js\n");

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js ***!
  \*************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _arrayWithHoles; });\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5V2l0aEhvbGVzLmpzPzRmZjYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFlO0FBQ2Y7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9uZXh0L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hcnJheVdpdGhIb2xlcy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js\n");

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js ***!
  \********************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _assertThisInitialized; });\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcz9mODJiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBZTtBQUNmO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL25leHQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\n");

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck.js ***!
  \*************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _classCallCheck; });\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrLmpzPzFmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2suanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\n");

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass.js ***!
  \**********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _createClass; });\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzLmpzPzUyNTIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0EsaUJBQWlCLGtCQUFrQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFZTtBQUNmO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL25leHQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass.js\n");

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/get.js":
/*!**************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/esm/get.js ***!
  \**************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _get; });\n/* harmony import */ var _babel_runtime_helpers_esm_superPropBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/superPropBase */ \"./node_modules/next/node_modules/@babel/runtime/helpers/esm/superPropBase.js\");\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = Object(_babel_runtime_helpers_esm_superPropBase__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2dldC5qcz80NDY3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFxRTtBQUN0RDtBQUNmO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxpQkFBaUIsd0ZBQWE7QUFDOUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZ2V0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN1cGVyUHJvcEJhc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3N1cGVyUHJvcEJhc2VcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHtcbiAgaWYgKHR5cGVvZiBSZWZsZWN0ICE9PSBcInVuZGVmaW5lZFwiICYmIFJlZmxlY3QuZ2V0KSB7XG4gICAgX2dldCA9IFJlZmxlY3QuZ2V0O1xuICB9IGVsc2Uge1xuICAgIF9nZXQgPSBmdW5jdGlvbiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHJlY2VpdmVyKSB7XG4gICAgICB2YXIgYmFzZSA9IHN1cGVyUHJvcEJhc2UodGFyZ2V0LCBwcm9wZXJ0eSk7XG4gICAgICBpZiAoIWJhc2UpIHJldHVybjtcbiAgICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihiYXNlLCBwcm9wZXJ0eSk7XG5cbiAgICAgIGlmIChkZXNjLmdldCkge1xuICAgICAgICByZXR1cm4gZGVzYy5nZXQuY2FsbChyZWNlaXZlcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkZXNjLnZhbHVlO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlciB8fCB0YXJnZXQpO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/node_modules/@babel/runtime/helpers/esm/get.js\n");

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js ***!
  \*************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _getPrototypeOf; });\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2dldFByb3RvdHlwZU9mLmpzPzg4N2IiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9uZXh0L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9nZXRQcm90b3R5cGVPZi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgfTtcbiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\n");

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/inherits.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/esm/inherits.js ***!
  \*******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _inherits; });\n/* harmony import */ var _babel_runtime_helpers_esm_setPrototypeOf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/setPrototypeOf */ \"./node_modules/next/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js\");\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object(_babel_runtime_helpers_esm_setPrototypeOf__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(subClass, superClass);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzLmpzP2VjYjIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQXVFO0FBQ3hEO0FBQ2Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxrQkFBa0IseUZBQWM7QUFDaEMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc2V0UHJvdG90eXBlT2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NldFByb3RvdHlwZU9mXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/node_modules/@babel/runtime/helpers/esm/inherits.js\n");

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js ***!
  \*******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _iterableToArrayLimit; });\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheUxpbWl0LmpzPzU3Y2YiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDZDQUE2QywrQkFBK0I7QUFDNUU7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaXRlcmFibGVUb0FycmF5TGltaXQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcInVuZGVmaW5lZFwiIHx8ICEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSkgcmV0dXJuO1xuICB2YXIgX2FyciA9IFtdO1xuICB2YXIgX24gPSB0cnVlO1xuICB2YXIgX2QgPSBmYWxzZTtcbiAgdmFyIF9lID0gdW5kZWZpbmVkO1xuXG4gIHRyeSB7XG4gICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkge1xuICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTtcblxuICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2QgPSB0cnVlO1xuICAgIF9lID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZCkgdGhyb3cgX2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9hcnI7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js\n");

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js ***!
  \**************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _nonIterableRest; });\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL25vbkl0ZXJhYmxlUmVzdC5qcz9mYmUwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBZTtBQUNmO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vbm9uSXRlcmFibGVSZXN0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js\n");

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js ***!
  \************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _possibleConstructorReturn; });\n/* harmony import */ var _babel_runtime_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/typeof */ \"./node_modules/next/node_modules/@babel/runtime/helpers/esm/typeof.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/assertThisInitialized */ \"./node_modules/next/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\");\n\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (Object(_babel_runtime_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(self);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4uanM/NTQ4YiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUF3RDtBQUM2QjtBQUN0RTtBQUNmLGVBQWUsaUZBQU87QUFDdEI7QUFDQTs7QUFFQSxTQUFTLGdHQUFxQjtBQUM5QiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9uZXh0L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF90eXBlb2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZlwiO1xuaW1wb3J0IGFzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gIGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7XG4gICAgcmV0dXJuIGNhbGw7XG4gIH1cblxuICByZXR1cm4gYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\n");

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js ***!
  \*************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _setPrototypeOf; });\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NldFByb3RvdHlwZU9mLmpzP2I3ODciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9uZXh0L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zZXRQcm90b3R5cGVPZi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js\n");

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray.js":
/*!************************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray.js ***!
  \************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _slicedToArray; });\n/* harmony import */ var _babel_runtime_helpers_esm_arrayWithHoles__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/arrayWithHoles */ \"./node_modules/next/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_iterableToArrayLimit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/iterableToArrayLimit */ \"./node_modules/next/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_unsupportedIterableToArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/unsupportedIterableToArray */ \"./node_modules/next/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_nonIterableRest__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/esm/nonIterableRest */ \"./node_modules/next/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js\");\n\n\n\n\nfunction _slicedToArray(arr, i) {\n  return Object(_babel_runtime_helpers_esm_arrayWithHoles__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(arr) || Object(_babel_runtime_helpers_esm_iterableToArrayLimit__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(arr, i) || Object(_babel_runtime_helpers_esm_unsupportedIterableToArray__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(arr, i) || Object(_babel_runtime_helpers_esm_nonIterableRest__WEBPACK_IMPORTED_MODULE_3__[\"default\"])();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXkuanM/YzZmOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBdUU7QUFDWTtBQUNZO0FBQ3RCO0FBQzFEO0FBQ2YsU0FBUyx5RkFBYyxTQUFTLCtGQUFvQixZQUFZLHFHQUEwQixZQUFZLDBGQUFlO0FBQ3JIIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL25leHQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXJyYXlXaXRoSG9sZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5V2l0aEhvbGVzXCI7XG5pbXBvcnQgaXRlcmFibGVUb0FycmF5TGltaXQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheUxpbWl0XCI7XG5pbXBvcnQgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5XCI7XG5pbXBvcnQgbm9uSXRlcmFibGVSZXN0IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9ub25JdGVyYWJsZVJlc3RcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkge1xuICByZXR1cm4gYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgbm9uSXRlcmFibGVSZXN0KCk7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\n");

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/superPropBase.js":
/*!************************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/esm/superPropBase.js ***!
  \************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _superPropBase; });\n/* harmony import */ var _babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/getPrototypeOf */ \"./node_modules/next/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\");\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(object);\n    if (object === null) break;\n  }\n\n  return object;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3N1cGVyUHJvcEJhc2UuanM/NDMzZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBdUU7QUFDeEQ7QUFDZjtBQUNBLGFBQWEseUZBQWM7QUFDM0I7QUFDQTs7QUFFQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL25leHQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3N1cGVyUHJvcEJhc2UuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZ2V0UHJvdG90eXBlT2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2dldFByb3RvdHlwZU9mXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfc3VwZXJQcm9wQmFzZShvYmplY3QsIHByb3BlcnR5KSB7XG4gIHdoaWxlICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpKSB7XG4gICAgb2JqZWN0ID0gZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTtcbiAgICBpZiAob2JqZWN0ID09PSBudWxsKSBicmVhaztcbiAgfVxuXG4gIHJldHVybiBvYmplY3Q7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/node_modules/@babel/runtime/helpers/esm/superPropBase.js\n");

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/typeof.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/esm/typeof.js ***!
  \*****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _typeof; });\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZi5qcz85ZTU1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBZTtBQUNmOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX3R5cGVvZihvYmopO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/node_modules/@babel/runtime/helpers/esm/typeof.js\n");

/***/ }),

/***/ "./node_modules/react-chartjs-2/dist/index.modern.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-chartjs-2/dist/index.modern.js ***!
  \***********************************************************/
/*! exports provided: default, Bar, Bubble, Chart, Doughnut, Line, Pie, PolarArea, Radar, Scatter, defaults */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Bar\", function() { return Bar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Bubble\", function() { return Bubble; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Chart\", function() { return Chart; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Doughnut\", function() { return Doughnut; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Line\", function() { return Line; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Pie\", function() { return Pie; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PolarArea\", function() { return PolarArea; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Radar\", function() { return Radar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Scatter\", function() { return Scatter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"defaults\", function() { return defaults; });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var chart_js_auto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! chart.js/auto */ \"./node_modules/chart.js/auto/auto.esm.js\");\n/* harmony import */ var lodash_merge__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/merge */ \"./node_modules/lodash/merge.js\");\n/* harmony import */ var lodash_merge__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_merge__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var lodash_assign__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/assign */ \"./node_modules/lodash/assign.js\");\n/* harmony import */ var lodash_assign__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash_assign__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var lodash_find__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash/find */ \"./node_modules/lodash/find.js\");\n/* harmony import */ var lodash_find__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash_find__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var chart_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! chart.js */ \"./node_modules/chart.js/dist/chart.esm.js\");\n\n\n\n\n\n\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar ChartComponent = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"forwardRef\"])(function (props, ref) {\n  var id = props.id,\n      className = props.className,\n      _props$height = props.height,\n      height = _props$height === void 0 ? 150 : _props$height,\n      _props$width = props.width,\n      width = _props$width === void 0 ? 300 : _props$width,\n      _props$redraw = props.redraw,\n      redraw = _props$redraw === void 0 ? false : _props$redraw,\n      type = props.type,\n      data = props.data,\n      _props$options = props.options,\n      options = _props$options === void 0 ? {} : _props$options,\n      _props$plugins = props.plugins,\n      plugins = _props$plugins === void 0 ? [] : _props$plugins,\n      getDatasetAtEvent = props.getDatasetAtEvent,\n      getElementAtEvent = props.getElementAtEvent,\n      getElementsAtEvent = props.getElementsAtEvent,\n      fallbackContent = props.fallbackContent,\n      rest = _objectWithoutPropertiesLoose(props, [\"id\", \"className\", \"height\", \"width\", \"redraw\", \"type\", \"data\", \"options\", \"plugins\", \"getDatasetAtEvent\", \"getElementAtEvent\", \"getElementsAtEvent\", \"fallbackContent\"]);\n\n  var canvas = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])(null);\n  var computedData = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useMemo\"])(function () {\n    if (typeof data === 'function') {\n      return canvas.current ? data(canvas.current) : {};\n    } else return lodash_merge__WEBPACK_IMPORTED_MODULE_2___default()({}, data);\n  }, [data, canvas.current]);\n\n  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useState\"])(),\n      chart = _useState[0],\n      setChart = _useState[1];\n\n  Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useImperativeHandle\"])(ref, function () {\n    return chart;\n  }, [chart]);\n\n  var renderChart = function renderChart() {\n    if (!canvas.current) return;\n    setChart(new chart_js_auto__WEBPACK_IMPORTED_MODULE_1__[\"default\"](canvas.current, {\n      type: type,\n      data: computedData,\n      options: options,\n      plugins: plugins\n    }));\n  };\n\n  var onClick = function onClick(e) {\n    if (!chart) return;\n    getDatasetAtEvent && getDatasetAtEvent(chart.getElementsAtEventForMode(e, 'dataset', {\n      intersect: true\n    }, false), e);\n    getElementAtEvent && getElementAtEvent(chart.getElementsAtEventForMode(e, 'nearest', {\n      intersect: true\n    }, false), e);\n    getElementsAtEvent && getElementsAtEvent(chart.getElementsAtEventForMode(e, 'index', {\n      intersect: true\n    }, false), e);\n  };\n\n  var updateChart = function updateChart() {\n    if (!chart) return;\n\n    if (options) {\n      chart.options = _extends({}, options);\n    }\n\n    if (!chart.config.data) {\n      chart.config.data = computedData;\n      chart.update();\n      return;\n    }\n\n    var _computedData$dataset = computedData.datasets,\n        newDataSets = _computedData$dataset === void 0 ? [] : _computedData$dataset,\n        newChartData = _objectWithoutPropertiesLoose(computedData, [\"datasets\"]);\n\n    var _chart$config$data$da = chart.config.data.datasets,\n        currentDataSets = _chart$config$data$da === void 0 ? [] : _chart$config$data$da;\n    lodash_assign__WEBPACK_IMPORTED_MODULE_3___default()(chart.config.data, newChartData);\n    chart.config.data.datasets = newDataSets.map(function (newDataSet) {\n      var currentDataSet = lodash_find__WEBPACK_IMPORTED_MODULE_4___default()(currentDataSets, function (d) {\n        return d.label === newDataSet.label && d.type === newDataSet.type;\n      });\n      if (!currentDataSet || !newDataSet.data) return newDataSet;\n\n      if (!currentDataSet.data) {\n        currentDataSet.data = [];\n      } else {\n        currentDataSet.data.length = newDataSet.data.length;\n      }\n\n      lodash_assign__WEBPACK_IMPORTED_MODULE_3___default()(currentDataSet.data, newDataSet.data);\n      return _extends({}, currentDataSet, newDataSet, {\n        data: currentDataSet.data\n      });\n    });\n    chart.update();\n  };\n\n  var destroyChart = function destroyChart() {\n    if (chart) chart.destroy();\n  };\n\n  Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useEffect\"])(function () {\n    renderChart();\n    return function () {\n      return destroyChart();\n    };\n  }, []);\n  Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useEffect\"])(function () {\n    if (redraw) {\n      destroyChart();\n      setTimeout(function () {\n        renderChart();\n      }, 0);\n    } else {\n      updateChart();\n    }\n  }, [props, computedData]);\n  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"canvas\", Object.assign({}, rest, {\n    height: height,\n    width: width,\n    ref: canvas,\n    id: id,\n    className: className,\n    onClick: onClick,\n    \"data-testid\": 'canvas',\n    role: 'img'\n  }), fallbackContent);\n});\n\nvar Line = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"forwardRef\"])(function (props, ref) {\n  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ChartComponent, Object.assign({}, props, {\n    type: 'line',\n    ref: ref,\n    options: props.options || {}\n  }));\n});\nvar Bar = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"forwardRef\"])(function (props, ref) {\n  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ChartComponent, Object.assign({}, props, {\n    type: 'bar',\n    ref: ref,\n    options: props.options || {}\n  }));\n});\nvar Radar = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"forwardRef\"])(function (props, ref) {\n  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ChartComponent, Object.assign({}, props, {\n    type: 'radar',\n    ref: ref,\n    options: props.options || {}\n  }));\n});\nvar Doughnut = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"forwardRef\"])(function (props, ref) {\n  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ChartComponent, Object.assign({}, props, {\n    type: 'doughnut',\n    ref: ref,\n    options: props.options || {}\n  }));\n});\nvar PolarArea = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"forwardRef\"])(function (props, ref) {\n  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ChartComponent, Object.assign({}, props, {\n    type: 'polarArea',\n    ref: ref,\n    options: props.options || {}\n  }));\n});\nvar Bubble = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"forwardRef\"])(function (props, ref) {\n  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ChartComponent, Object.assign({}, props, {\n    type: 'bubble',\n    ref: ref,\n    options: props.options || {}\n  }));\n});\nvar Pie = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"forwardRef\"])(function (props, ref) {\n  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ChartComponent, Object.assign({}, props, {\n    type: 'pie',\n    ref: ref,\n    options: props.options || {}\n  }));\n});\nvar Scatter = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"forwardRef\"])(function (props, ref) {\n  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ChartComponent, Object.assign({}, props, {\n    type: 'scatter',\n    ref: ref,\n    options: props.options || {}\n  }));\n});\nvar defaults = chart_js__WEBPACK_IMPORTED_MODULE_5__[\"defaults\"];\nvar Chart = chart_js__WEBPACK_IMPORTED_MODULE_5__[\"Chart\"];\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (ChartComponent);\n\n//# sourceMappingURL=index.modern.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNoYXJ0anMtMi9kaXN0L2luZGV4Lm1vZGVybi5qcz9hNDJhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFxRztBQUNqRTtBQUNIO0FBQ0U7QUFDSjtBQUNxQzs7QUFFcEU7QUFDQTtBQUNBLG1CQUFtQixzQkFBc0I7QUFDekM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGFBQWEsdUJBQXVCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEscUJBQXFCLHdEQUFVO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZUFBZSxvREFBTTtBQUNyQixxQkFBcUIscURBQU87QUFDNUI7QUFDQTtBQUNBLEtBQUssYUFBYSxtREFBSyxHQUFHO0FBQzFCLEdBQUc7O0FBRUgsa0JBQWtCLHNEQUFRO0FBQzFCO0FBQ0E7O0FBRUEsRUFBRSxpRUFBbUI7QUFDckI7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxpQkFBaUIscURBQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxpQ0FBaUM7QUFDakM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUksb0RBQU07QUFDVjtBQUNBLDJCQUEyQixrREFBSTtBQUMvQjtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUEsTUFBTSxvREFBTTtBQUNaLHdCQUF3QjtBQUN4QjtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsRUFBRSx1REFBUztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUUsdURBQVM7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7QUFDSCxTQUFTLDRDQUFLLHlDQUF5QztBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7O0FBRUQsV0FBVyx3REFBVTtBQUNyQixTQUFTLDRDQUFLLCtDQUErQztBQUM3RDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNELFVBQVUsd0RBQVU7QUFDcEIsU0FBUyw0Q0FBSywrQ0FBK0M7QUFDN0Q7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRCxZQUFZLHdEQUFVO0FBQ3RCLFNBQVMsNENBQUssK0NBQStDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0QsZUFBZSx3REFBVTtBQUN6QixTQUFTLDRDQUFLLCtDQUErQztBQUM3RDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNELGdCQUFnQix3REFBVTtBQUMxQixTQUFTLDRDQUFLLCtDQUErQztBQUM3RDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNELGFBQWEsd0RBQVU7QUFDdkIsU0FBUyw0Q0FBSywrQ0FBK0M7QUFDN0Q7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRCxVQUFVLHdEQUFVO0FBQ3BCLFNBQVMsNENBQUssK0NBQStDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0QsY0FBYyx3REFBVTtBQUN4QixTQUFTLDRDQUFLLCtDQUErQztBQUM3RDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNELGVBQWUsaURBQVU7QUFDekIsWUFBWSw4Q0FBTzs7QUFFSiw2RUFBYyxFQUFDO0FBQzBEO0FBQ3hGIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3JlYWN0LWNoYXJ0anMtMi9kaXN0L2luZGV4Lm1vZGVybi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBmb3J3YXJkUmVmLCB1c2VSZWYsIHVzZU1lbW8sIHVzZVN0YXRlLCB1c2VJbXBlcmF0aXZlSGFuZGxlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQ2hhcnQkMSBmcm9tICdjaGFydC5qcy9hdXRvJztcbmltcG9ydCBtZXJnZSBmcm9tICdsb2Rhc2gvbWVyZ2UnO1xuaW1wb3J0IGFzc2lnbiBmcm9tICdsb2Rhc2gvYXNzaWduJztcbmltcG9ydCBmaW5kIGZyb20gJ2xvZGFzaC9maW5kJztcbmltcG9ydCB7IGRlZmF1bHRzIGFzIGRlZmF1bHRzJDEsIENoYXJ0IGFzIENoYXJ0JDIgfSBmcm9tICdjaGFydC5qcyc7XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG52YXIgQ2hhcnRDb21wb25lbnQgPSBmb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gIHZhciBpZCA9IHByb3BzLmlkLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGhlaWdodCA9IHByb3BzLmhlaWdodCxcbiAgICAgIGhlaWdodCA9IF9wcm9wcyRoZWlnaHQgPT09IHZvaWQgMCA/IDE1MCA6IF9wcm9wcyRoZWlnaHQsXG4gICAgICBfcHJvcHMkd2lkdGggPSBwcm9wcy53aWR0aCxcbiAgICAgIHdpZHRoID0gX3Byb3BzJHdpZHRoID09PSB2b2lkIDAgPyAzMDAgOiBfcHJvcHMkd2lkdGgsXG4gICAgICBfcHJvcHMkcmVkcmF3ID0gcHJvcHMucmVkcmF3LFxuICAgICAgcmVkcmF3ID0gX3Byb3BzJHJlZHJhdyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkcmVkcmF3LFxuICAgICAgdHlwZSA9IHByb3BzLnR5cGUsXG4gICAgICBkYXRhID0gcHJvcHMuZGF0YSxcbiAgICAgIF9wcm9wcyRvcHRpb25zID0gcHJvcHMub3B0aW9ucyxcbiAgICAgIG9wdGlvbnMgPSBfcHJvcHMkb3B0aW9ucyA9PT0gdm9pZCAwID8ge30gOiBfcHJvcHMkb3B0aW9ucyxcbiAgICAgIF9wcm9wcyRwbHVnaW5zID0gcHJvcHMucGx1Z2lucyxcbiAgICAgIHBsdWdpbnMgPSBfcHJvcHMkcGx1Z2lucyA9PT0gdm9pZCAwID8gW10gOiBfcHJvcHMkcGx1Z2lucyxcbiAgICAgIGdldERhdGFzZXRBdEV2ZW50ID0gcHJvcHMuZ2V0RGF0YXNldEF0RXZlbnQsXG4gICAgICBnZXRFbGVtZW50QXRFdmVudCA9IHByb3BzLmdldEVsZW1lbnRBdEV2ZW50LFxuICAgICAgZ2V0RWxlbWVudHNBdEV2ZW50ID0gcHJvcHMuZ2V0RWxlbWVudHNBdEV2ZW50LFxuICAgICAgZmFsbGJhY2tDb250ZW50ID0gcHJvcHMuZmFsbGJhY2tDb250ZW50LFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBbXCJpZFwiLCBcImNsYXNzTmFtZVwiLCBcImhlaWdodFwiLCBcIndpZHRoXCIsIFwicmVkcmF3XCIsIFwidHlwZVwiLCBcImRhdGFcIiwgXCJvcHRpb25zXCIsIFwicGx1Z2luc1wiLCBcImdldERhdGFzZXRBdEV2ZW50XCIsIFwiZ2V0RWxlbWVudEF0RXZlbnRcIiwgXCJnZXRFbGVtZW50c0F0RXZlbnRcIiwgXCJmYWxsYmFja0NvbnRlbnRcIl0pO1xuXG4gIHZhciBjYW52YXMgPSB1c2VSZWYobnVsbCk7XG4gIHZhciBjb21wdXRlZERhdGEgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBjYW52YXMuY3VycmVudCA/IGRhdGEoY2FudmFzLmN1cnJlbnQpIDoge307XG4gICAgfSBlbHNlIHJldHVybiBtZXJnZSh7fSwgZGF0YSk7XG4gIH0sIFtkYXRhLCBjYW52YXMuY3VycmVudF0pO1xuXG4gIHZhciBfdXNlU3RhdGUgPSB1c2VTdGF0ZSgpLFxuICAgICAgY2hhcnQgPSBfdXNlU3RhdGVbMF0sXG4gICAgICBzZXRDaGFydCA9IF91c2VTdGF0ZVsxXTtcblxuICB1c2VJbXBlcmF0aXZlSGFuZGxlKHJlZiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjaGFydDtcbiAgfSwgW2NoYXJ0XSk7XG5cbiAgdmFyIHJlbmRlckNoYXJ0ID0gZnVuY3Rpb24gcmVuZGVyQ2hhcnQoKSB7XG4gICAgaWYgKCFjYW52YXMuY3VycmVudCkgcmV0dXJuO1xuICAgIHNldENoYXJ0KG5ldyBDaGFydCQxKGNhbnZhcy5jdXJyZW50LCB7XG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgZGF0YTogY29tcHV0ZWREYXRhLFxuICAgICAgb3B0aW9uczogb3B0aW9ucyxcbiAgICAgIHBsdWdpbnM6IHBsdWdpbnNcbiAgICB9KSk7XG4gIH07XG5cbiAgdmFyIG9uQ2xpY2sgPSBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgICBpZiAoIWNoYXJ0KSByZXR1cm47XG4gICAgZ2V0RGF0YXNldEF0RXZlbnQgJiYgZ2V0RGF0YXNldEF0RXZlbnQoY2hhcnQuZ2V0RWxlbWVudHNBdEV2ZW50Rm9yTW9kZShlLCAnZGF0YXNldCcsIHtcbiAgICAgIGludGVyc2VjdDogdHJ1ZVxuICAgIH0sIGZhbHNlKSwgZSk7XG4gICAgZ2V0RWxlbWVudEF0RXZlbnQgJiYgZ2V0RWxlbWVudEF0RXZlbnQoY2hhcnQuZ2V0RWxlbWVudHNBdEV2ZW50Rm9yTW9kZShlLCAnbmVhcmVzdCcsIHtcbiAgICAgIGludGVyc2VjdDogdHJ1ZVxuICAgIH0sIGZhbHNlKSwgZSk7XG4gICAgZ2V0RWxlbWVudHNBdEV2ZW50ICYmIGdldEVsZW1lbnRzQXRFdmVudChjaGFydC5nZXRFbGVtZW50c0F0RXZlbnRGb3JNb2RlKGUsICdpbmRleCcsIHtcbiAgICAgIGludGVyc2VjdDogdHJ1ZVxuICAgIH0sIGZhbHNlKSwgZSk7XG4gIH07XG5cbiAgdmFyIHVwZGF0ZUNoYXJ0ID0gZnVuY3Rpb24gdXBkYXRlQ2hhcnQoKSB7XG4gICAgaWYgKCFjaGFydCkgcmV0dXJuO1xuXG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgIGNoYXJ0Lm9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgaWYgKCFjaGFydC5jb25maWcuZGF0YSkge1xuICAgICAgY2hhcnQuY29uZmlnLmRhdGEgPSBjb21wdXRlZERhdGE7XG4gICAgICBjaGFydC51cGRhdGUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgX2NvbXB1dGVkRGF0YSRkYXRhc2V0ID0gY29tcHV0ZWREYXRhLmRhdGFzZXRzLFxuICAgICAgICBuZXdEYXRhU2V0cyA9IF9jb21wdXRlZERhdGEkZGF0YXNldCA9PT0gdm9pZCAwID8gW10gOiBfY29tcHV0ZWREYXRhJGRhdGFzZXQsXG4gICAgICAgIG5ld0NoYXJ0RGF0YSA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKGNvbXB1dGVkRGF0YSwgW1wiZGF0YXNldHNcIl0pO1xuXG4gICAgdmFyIF9jaGFydCRjb25maWckZGF0YSRkYSA9IGNoYXJ0LmNvbmZpZy5kYXRhLmRhdGFzZXRzLFxuICAgICAgICBjdXJyZW50RGF0YVNldHMgPSBfY2hhcnQkY29uZmlnJGRhdGEkZGEgPT09IHZvaWQgMCA/IFtdIDogX2NoYXJ0JGNvbmZpZyRkYXRhJGRhO1xuICAgIGFzc2lnbihjaGFydC5jb25maWcuZGF0YSwgbmV3Q2hhcnREYXRhKTtcbiAgICBjaGFydC5jb25maWcuZGF0YS5kYXRhc2V0cyA9IG5ld0RhdGFTZXRzLm1hcChmdW5jdGlvbiAobmV3RGF0YVNldCkge1xuICAgICAgdmFyIGN1cnJlbnREYXRhU2V0ID0gZmluZChjdXJyZW50RGF0YVNldHMsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgIHJldHVybiBkLmxhYmVsID09PSBuZXdEYXRhU2V0LmxhYmVsICYmIGQudHlwZSA9PT0gbmV3RGF0YVNldC50eXBlO1xuICAgICAgfSk7XG4gICAgICBpZiAoIWN1cnJlbnREYXRhU2V0IHx8ICFuZXdEYXRhU2V0LmRhdGEpIHJldHVybiBuZXdEYXRhU2V0O1xuXG4gICAgICBpZiAoIWN1cnJlbnREYXRhU2V0LmRhdGEpIHtcbiAgICAgICAgY3VycmVudERhdGFTZXQuZGF0YSA9IFtdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3VycmVudERhdGFTZXQuZGF0YS5sZW5ndGggPSBuZXdEYXRhU2V0LmRhdGEubGVuZ3RoO1xuICAgICAgfVxuXG4gICAgICBhc3NpZ24oY3VycmVudERhdGFTZXQuZGF0YSwgbmV3RGF0YVNldC5kYXRhKTtcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgY3VycmVudERhdGFTZXQsIG5ld0RhdGFTZXQsIHtcbiAgICAgICAgZGF0YTogY3VycmVudERhdGFTZXQuZGF0YVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgY2hhcnQudXBkYXRlKCk7XG4gIH07XG5cbiAgdmFyIGRlc3Ryb3lDaGFydCA9IGZ1bmN0aW9uIGRlc3Ryb3lDaGFydCgpIHtcbiAgICBpZiAoY2hhcnQpIGNoYXJ0LmRlc3Ryb3koKTtcbiAgfTtcblxuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJlbmRlckNoYXJ0KCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBkZXN0cm95Q2hhcnQoKTtcbiAgICB9O1xuICB9LCBbXSk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHJlZHJhdykge1xuICAgICAgZGVzdHJveUNoYXJ0KCk7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVuZGVyQ2hhcnQoKTtcbiAgICAgIH0sIDApO1xuICAgIH0gZWxzZSB7XG4gICAgICB1cGRhdGVDaGFydCgpO1xuICAgIH1cbiAgfSwgW3Byb3BzLCBjb21wdXRlZERhdGFdKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIiwgT2JqZWN0LmFzc2lnbih7fSwgcmVzdCwge1xuICAgIGhlaWdodDogaGVpZ2h0LFxuICAgIHdpZHRoOiB3aWR0aCxcbiAgICByZWY6IGNhbnZhcyxcbiAgICBpZDogaWQsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgb25DbGljazogb25DbGljayxcbiAgICBcImRhdGEtdGVzdGlkXCI6ICdjYW52YXMnLFxuICAgIHJvbGU6ICdpbWcnXG4gIH0pLCBmYWxsYmFja0NvbnRlbnQpO1xufSk7XG5cbnZhciBMaW5lID0gZm9yd2FyZFJlZihmdW5jdGlvbiAocHJvcHMsIHJlZikge1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDaGFydENvbXBvbmVudCwgT2JqZWN0LmFzc2lnbih7fSwgcHJvcHMsIHtcbiAgICB0eXBlOiAnbGluZScsXG4gICAgcmVmOiByZWYsXG4gICAgb3B0aW9uczogcHJvcHMub3B0aW9ucyB8fCB7fVxuICB9KSk7XG59KTtcbnZhciBCYXIgPSBmb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENoYXJ0Q29tcG9uZW50LCBPYmplY3QuYXNzaWduKHt9LCBwcm9wcywge1xuICAgIHR5cGU6ICdiYXInLFxuICAgIHJlZjogcmVmLFxuICAgIG9wdGlvbnM6IHByb3BzLm9wdGlvbnMgfHwge31cbiAgfSkpO1xufSk7XG52YXIgUmFkYXIgPSBmb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENoYXJ0Q29tcG9uZW50LCBPYmplY3QuYXNzaWduKHt9LCBwcm9wcywge1xuICAgIHR5cGU6ICdyYWRhcicsXG4gICAgcmVmOiByZWYsXG4gICAgb3B0aW9uczogcHJvcHMub3B0aW9ucyB8fCB7fVxuICB9KSk7XG59KTtcbnZhciBEb3VnaG51dCA9IGZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzLCByZWYpIHtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ2hhcnRDb21wb25lbnQsIE9iamVjdC5hc3NpZ24oe30sIHByb3BzLCB7XG4gICAgdHlwZTogJ2RvdWdobnV0JyxcbiAgICByZWY6IHJlZixcbiAgICBvcHRpb25zOiBwcm9wcy5vcHRpb25zIHx8IHt9XG4gIH0pKTtcbn0pO1xudmFyIFBvbGFyQXJlYSA9IGZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzLCByZWYpIHtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ2hhcnRDb21wb25lbnQsIE9iamVjdC5hc3NpZ24oe30sIHByb3BzLCB7XG4gICAgdHlwZTogJ3BvbGFyQXJlYScsXG4gICAgcmVmOiByZWYsXG4gICAgb3B0aW9uczogcHJvcHMub3B0aW9ucyB8fCB7fVxuICB9KSk7XG59KTtcbnZhciBCdWJibGUgPSBmb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENoYXJ0Q29tcG9uZW50LCBPYmplY3QuYXNzaWduKHt9LCBwcm9wcywge1xuICAgIHR5cGU6ICdidWJibGUnLFxuICAgIHJlZjogcmVmLFxuICAgIG9wdGlvbnM6IHByb3BzLm9wdGlvbnMgfHwge31cbiAgfSkpO1xufSk7XG52YXIgUGllID0gZm9yd2FyZFJlZihmdW5jdGlvbiAocHJvcHMsIHJlZikge1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDaGFydENvbXBvbmVudCwgT2JqZWN0LmFzc2lnbih7fSwgcHJvcHMsIHtcbiAgICB0eXBlOiAncGllJyxcbiAgICByZWY6IHJlZixcbiAgICBvcHRpb25zOiBwcm9wcy5vcHRpb25zIHx8IHt9XG4gIH0pKTtcbn0pO1xudmFyIFNjYXR0ZXIgPSBmb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENoYXJ0Q29tcG9uZW50LCBPYmplY3QuYXNzaWduKHt9LCBwcm9wcywge1xuICAgIHR5cGU6ICdzY2F0dGVyJyxcbiAgICByZWY6IHJlZixcbiAgICBvcHRpb25zOiBwcm9wcy5vcHRpb25zIHx8IHt9XG4gIH0pKTtcbn0pO1xudmFyIGRlZmF1bHRzID0gZGVmYXVsdHMkMTtcbnZhciBDaGFydCA9IENoYXJ0JDI7XG5cbmV4cG9ydCBkZWZhdWx0IENoYXJ0Q29tcG9uZW50O1xuZXhwb3J0IHsgQmFyLCBCdWJibGUsIENoYXJ0LCBEb3VnaG51dCwgTGluZSwgUGllLCBQb2xhckFyZWEsIFJhZGFyLCBTY2F0dGVyLCBkZWZhdWx0cyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubW9kZXJuLmpzLm1hcFxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-chartjs-2/dist/index.modern.js\n");

/***/ })

}]);