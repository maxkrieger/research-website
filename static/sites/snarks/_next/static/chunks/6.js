(window["webpackJsonp_N_E"] = window["webpackJsonp_N_E"] || []).push([[6],{

/***/ "./node_modules/scroll-behavior-polyfill/dist/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/scroll-behavior-polyfill/dist/index.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("(function () {\n    'use strict';\n\n    var UNSUPPORTED_ENVIRONMENT = typeof window === \"undefined\";\n\n    /**\n     * Is true if the browser natively supports the 'scroll-behavior' CSS-property.\n     * @type {boolean}\n     */\n    var SUPPORTS_SCROLL_BEHAVIOR = UNSUPPORTED_ENVIRONMENT ? false : \"scrollBehavior\" in document.documentElement.style;\n\n    \n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\n\n    function getScrollingElement() {\n        if (document.scrollingElement != null) {\n            return document.scrollingElement;\n        }\n        else {\n            return document.documentElement;\n        }\n    }\n\n    var STYLE_ATTRIBUTE_PROPERTY_NAME = \"scroll-behavior\";\n    var STYLE_ATTRIBUTE_PROPERTY_REGEXP = new RegExp(STYLE_ATTRIBUTE_PROPERTY_NAME + \":\\\\s*([^;]*)\");\n    /**\n     * Given an Element, this function appends the given ScrollBehavior CSS property value to the elements' 'style' attribute.\n     * If it doesnt already have one, it will add it.\n     * @param {Element} element\n     * @param {ScrollBehavior} behavior\n     */\n    function appendScrollBehaviorToStyleAttribute(element, behavior) {\n        var addition = STYLE_ATTRIBUTE_PROPERTY_NAME + \":\" + behavior;\n        var attributeValue = element.getAttribute(\"style\");\n        if (attributeValue == null || attributeValue === \"\") {\n            element.setAttribute(\"style\", addition);\n            return;\n        }\n        // The style attribute may already include a 'scroll-behavior:<something>' in which case that should be replaced\n        var existingValueForProperty = parseScrollBehaviorFromStyleAttribute(element);\n        if (existingValueForProperty != null) {\n            var replacementProperty = STYLE_ATTRIBUTE_PROPERTY_NAME + \":\" + existingValueForProperty;\n            // Replace the variant that ends with a semi-colon which it may\n            attributeValue = attributeValue.replace(replacementProperty + \";\", \"\");\n            // Replace the variant that *doesn't* end with a semi-colon\n            attributeValue = attributeValue.replace(replacementProperty, \"\");\n        }\n        // Now, append the behavior to the string.\n        element.setAttribute(\"style\", attributeValue.endsWith(\";\") ? \"\" + attributeValue + addition : \";\" + attributeValue + addition);\n    }\n    /**\n     * Given an Element, this function attempts to parse its 'style' attribute (if it has one)' to extract\n     * a value for the 'scroll-behavior' CSS property (if it is given within that style attribute)\n     * @param {Element} element\n     * @returns {ScrollBehavior?}\n     */\n    function parseScrollBehaviorFromStyleAttribute(element) {\n        var styleAttributeValue = element.getAttribute(\"style\");\n        if (styleAttributeValue != null && styleAttributeValue.includes(STYLE_ATTRIBUTE_PROPERTY_NAME)) {\n            var match = styleAttributeValue.match(STYLE_ATTRIBUTE_PROPERTY_REGEXP);\n            if (match != null) {\n                var _a = __read(match, 2), behavior = _a[1];\n                if (behavior != null && behavior !== \"\") {\n                    return behavior;\n                }\n            }\n        }\n        return undefined;\n    }\n\n    var styleDeclarationPropertyName = \"scrollBehavior\";\n    /**\n     * Determines the scroll behavior to use, depending on the given ScrollOptions and the position of the Element\n     * within the DOM\n     * @param {Element|HTMLElement|Window} inputTarget\n     * @param {ScrollOptions} [options]\n     * @returns {ScrollBehavior}\n     */\n    function getScrollBehavior(inputTarget, options) {\n        // If the given 'behavior' is 'smooth', apply smooth scrolling no matter what\n        if (options != null && options.behavior === \"smooth\")\n            return \"smooth\";\n        var target = \"style\" in inputTarget ? inputTarget : getScrollingElement();\n        var value;\n        if (\"style\" in target) {\n            // Check if scroll-behavior is set as a property on the CSSStyleDeclaration\n            var scrollBehaviorPropertyValue = target.style[styleDeclarationPropertyName];\n            // Return it if it is given and has a proper value\n            if (scrollBehaviorPropertyValue != null && scrollBehaviorPropertyValue !== \"\") {\n                value = scrollBehaviorPropertyValue;\n            }\n        }\n        if (value == null) {\n            var attributeValue = target.getAttribute(\"scroll-behavior\");\n            if (attributeValue != null && attributeValue !== \"\") {\n                value = attributeValue;\n            }\n        }\n        if (value == null) {\n            // Otherwise, check if it is set as an inline style\n            value = parseScrollBehaviorFromStyleAttribute(target);\n        }\n        if (value == null) {\n            // Take the computed style for the element and see if it contains a specific 'scroll-behavior' value\n            var computedStyle = getComputedStyle(target);\n            var computedStyleValue = computedStyle.getPropertyValue(\"scrollBehavior\");\n            if (computedStyleValue != null && computedStyleValue !== \"\") {\n                value = computedStyleValue;\n            }\n        }\n        // In all other cases, use the value from the CSSOM\n        return value;\n    }\n\n    \n\n    \n\n    var HALF = 0.5;\n    /**\n     * The easing function to use when applying the smooth scrolling\n     * @param {number} k\n     * @returns {number}\n     */\n    function ease(k) {\n        return HALF * (1 - Math.cos(Math.PI * k));\n    }\n\n    var NOOP = {\n        reset: function () { }\n    };\n    var map = typeof WeakMap === \"undefined\" ? undefined : new WeakMap();\n    function disableScrollSnap(scroller) {\n        // If scroll-behavior is natively supported, or if there is no native WeakMap support, there's no need for this fix\n        if (SUPPORTS_SCROLL_BEHAVIOR || map == null) {\n            return NOOP;\n        }\n        var scrollingElement = getScrollingElement();\n        var cachedScrollSnapValue;\n        var cachedScrollBehaviorStyleAttributeValue;\n        var secondaryScroller;\n        var secondaryScrollerCachedScrollSnapValue;\n        var secondaryScrollerCachedScrollBehaviorStyleAttributeValue;\n        var existingResult = map.get(scroller);\n        if (existingResult != null) {\n            cachedScrollSnapValue = existingResult.cachedScrollSnapValue;\n            cachedScrollBehaviorStyleAttributeValue = existingResult.cachedScrollBehaviorStyleAttributeValue;\n            secondaryScroller = existingResult.secondaryScroller;\n            secondaryScrollerCachedScrollSnapValue = existingResult.secondaryScrollerCachedScrollSnapValue;\n            secondaryScrollerCachedScrollBehaviorStyleAttributeValue = existingResult.secondaryScrollerCachedScrollBehaviorStyleAttributeValue;\n            existingResult.release();\n        }\n        else {\n            cachedScrollSnapValue = scroller.style.scrollSnapType === \"\" ? null : scroller.style.scrollSnapType;\n            cachedScrollBehaviorStyleAttributeValue = parseScrollBehaviorFromStyleAttribute(scroller);\n            secondaryScroller = scroller === scrollingElement && scrollingElement !== document.body ? document.body : undefined;\n            secondaryScrollerCachedScrollSnapValue =\n                secondaryScroller == null ? undefined : secondaryScroller.style.scrollSnapType === \"\" ? null : secondaryScroller.style.scrollSnapType;\n            secondaryScrollerCachedScrollBehaviorStyleAttributeValue =\n                secondaryScroller == null ? undefined : parseScrollBehaviorFromStyleAttribute(secondaryScroller);\n            var cachedComputedScrollSnapValue = getComputedStyle(scroller).getPropertyValue(\"scroll-snap-type\");\n            var secondaryScrollerCachedComputedScrollSnapValue = secondaryScroller == null ? undefined : getComputedStyle(secondaryScroller).getPropertyValue(\"scroll-snap-type\");\n            // If it just so happens that there actually isn't any scroll snapping going on, there's no point in performing any additional work here.\n            if (cachedComputedScrollSnapValue === \"none\" && secondaryScrollerCachedComputedScrollSnapValue === \"none\") {\n                return NOOP;\n            }\n        }\n        scroller.style.scrollSnapType = \"none\";\n        if (secondaryScroller !== undefined) {\n            secondaryScroller.style.scrollSnapType = \"none\";\n        }\n        if (cachedScrollBehaviorStyleAttributeValue !== undefined) {\n            appendScrollBehaviorToStyleAttribute(scroller, cachedScrollBehaviorStyleAttributeValue);\n        }\n        if (secondaryScroller !== undefined && secondaryScrollerCachedScrollBehaviorStyleAttributeValue !== undefined) {\n            appendScrollBehaviorToStyleAttribute(secondaryScroller, secondaryScrollerCachedScrollBehaviorStyleAttributeValue);\n        }\n        var hasReleased = false;\n        var eventTarget = scroller === scrollingElement ? window : scroller;\n        function release() {\n            eventTarget.removeEventListener(\"scroll\", resetHandler);\n            if (map != null) {\n                map[\"delete\"](scroller);\n            }\n            hasReleased = true;\n        }\n        function resetHandler() {\n            scroller.style.scrollSnapType = cachedScrollSnapValue;\n            if (secondaryScroller != null && secondaryScrollerCachedScrollSnapValue !== undefined) {\n                secondaryScroller.style.scrollSnapType = secondaryScrollerCachedScrollSnapValue;\n            }\n            if (cachedScrollBehaviorStyleAttributeValue !== undefined) {\n                appendScrollBehaviorToStyleAttribute(scroller, cachedScrollBehaviorStyleAttributeValue);\n            }\n            if (secondaryScroller !== undefined && secondaryScrollerCachedScrollBehaviorStyleAttributeValue !== undefined) {\n                appendScrollBehaviorToStyleAttribute(secondaryScroller, secondaryScrollerCachedScrollBehaviorStyleAttributeValue);\n            }\n            release();\n        }\n        function reset() {\n            setTimeout(function () {\n                if (hasReleased)\n                    return;\n                eventTarget.addEventListener(\"scroll\", resetHandler);\n            });\n        }\n        map.set(scroller, {\n            release: release,\n            cachedScrollSnapValue: cachedScrollSnapValue,\n            cachedScrollBehaviorStyleAttributeValue: cachedScrollBehaviorStyleAttributeValue,\n            secondaryScroller: secondaryScroller,\n            secondaryScrollerCachedScrollSnapValue: secondaryScrollerCachedScrollSnapValue,\n            secondaryScrollerCachedScrollBehaviorStyleAttributeValue: secondaryScrollerCachedScrollBehaviorStyleAttributeValue\n        });\n        return {\n            reset: reset\n        };\n    }\n\n    /**\n     * The duration of a smooth scroll\n     * @type {number}\n     */\n    var SCROLL_TIME = 15000;\n    /**\n     * Performs a smooth repositioning of the scroll\n     * @param {ISmoothScrollOptions} options\n     */\n    function smoothScroll(options) {\n        var startTime = options.startTime, startX = options.startX, startY = options.startY, endX = options.endX, endY = options.endY, method = options.method, scroller = options.scroller;\n        var timeLapsed = 0;\n        var distanceX = endX - startX;\n        var distanceY = endY - startY;\n        var speed = Math.max(Math.abs((distanceX / 1000) * SCROLL_TIME), Math.abs((distanceY / 1000) * SCROLL_TIME));\n        // Temporarily disables any scroll snapping that may be active since it fights for control over the scroller with this polyfill\n        var scrollSnapFix = disableScrollSnap(scroller);\n        requestAnimationFrame(function animate(timestamp) {\n            timeLapsed += timestamp - startTime;\n            var percentage = Math.max(0, Math.min(1, speed === 0 ? 0 : timeLapsed / speed));\n            var positionX = Math.floor(startX + distanceX * ease(percentage));\n            var positionY = Math.floor(startY + distanceY * ease(percentage));\n            method(positionX, positionY);\n            if (positionX !== endX || positionY !== endY) {\n                requestAnimationFrame(animate);\n            }\n            else {\n                if (scrollSnapFix != null) {\n                    scrollSnapFix.reset();\n                    scrollSnapFix = undefined;\n                }\n            }\n        });\n    }\n\n    /**\n     * Returns a High Resolution timestamp if possible, otherwise fallbacks to Date.now()\n     * @returns {number}\n     */\n    function now() {\n        if (\"performance\" in window)\n            return performance.now();\n        return Date.now();\n    }\n\n    \n\n    var ELEMENT_ORIGINAL_SCROLL = UNSUPPORTED_ENVIRONMENT ? undefined : Element.prototype.scroll;\n\n    var WINDOW_ORIGINAL_SCROLL = UNSUPPORTED_ENVIRONMENT ? undefined : window.scroll;\n\n    var ELEMENT_ORIGINAL_SCROLL_BY = UNSUPPORTED_ENVIRONMENT ? undefined : Element.prototype.scrollBy;\n\n    var WINDOW_ORIGINAL_SCROLL_BY = UNSUPPORTED_ENVIRONMENT ? undefined : window.scrollBy;\n\n    var ELEMENT_ORIGINAL_SCROLL_TO = UNSUPPORTED_ENVIRONMENT ? undefined : Element.prototype.scrollTo;\n\n    var WINDOW_ORIGINAL_SCROLL_TO = UNSUPPORTED_ENVIRONMENT ? undefined : window.scrollTo;\n\n    /**\n     * A fallback if Element.prototype.scroll is not defined\n     * @param {number} x\n     * @param {number} y\n     */\n    function elementPrototypeScrollFallback(x, y) {\n        this.__adjustingScrollPosition = true;\n        this.scrollLeft = x;\n        this.scrollTop = y;\n        delete this.__adjustingScrollPosition;\n    }\n    /**\n     * A fallback if Element.prototype.scrollTo is not defined\n     * @param {number} x\n     * @param {number} y\n     */\n    function elementPrototypeScrollToFallback(x, y) {\n        return elementPrototypeScrollFallback.call(this, x, y);\n    }\n    /**\n     * A fallback if Element.prototype.scrollBy is not defined\n     * @param {number} x\n     * @param {number} y\n     */\n    function elementPrototypeScrollByFallback(x, y) {\n        this.__adjustingScrollPosition = true;\n        this.scrollLeft += x;\n        this.scrollTop += y;\n        delete this.__adjustingScrollPosition;\n    }\n    /**\n     * Gets the original non-patched prototype method for the given kind\n     * @param {ScrollMethodName} kind\n     * @param {Element|Window} element\n     * @return {Function}\n     */\n    function getOriginalScrollMethodForKind(kind, element) {\n        switch (kind) {\n            case \"scroll\":\n                if (element instanceof Element) {\n                    if (ELEMENT_ORIGINAL_SCROLL != null) {\n                        return ELEMENT_ORIGINAL_SCROLL;\n                    }\n                    else {\n                        return elementPrototypeScrollFallback;\n                    }\n                }\n                else {\n                    return WINDOW_ORIGINAL_SCROLL;\n                }\n            case \"scrollBy\":\n                if (element instanceof Element) {\n                    if (ELEMENT_ORIGINAL_SCROLL_BY != null) {\n                        return ELEMENT_ORIGINAL_SCROLL_BY;\n                    }\n                    else {\n                        return elementPrototypeScrollByFallback;\n                    }\n                }\n                else {\n                    return WINDOW_ORIGINAL_SCROLL_BY;\n                }\n            case \"scrollTo\":\n                if (element instanceof Element) {\n                    if (ELEMENT_ORIGINAL_SCROLL_TO != null) {\n                        return ELEMENT_ORIGINAL_SCROLL_TO;\n                    }\n                    else {\n                        return elementPrototypeScrollToFallback;\n                    }\n                }\n                else {\n                    return WINDOW_ORIGINAL_SCROLL_TO;\n                }\n        }\n    }\n\n    /**\n     * Gets the Smooth Scroll Options to use for the step function\n     * @param {Element|Window} element\n     * @param {number} x\n     * @param {number} y\n     * @param {ScrollMethodName} kind\n     * @returns {ISmoothScrollOptions}\n     */\n    function getSmoothScrollOptions(element, x, y, kind) {\n        var startTime = now();\n        if (!(element instanceof Element)) {\n            // Use window as the scroll container\n            var scrollX_1 = window.scrollX, pageXOffset_1 = window.pageXOffset, scrollY_1 = window.scrollY, pageYOffset_1 = window.pageYOffset;\n            var startX = scrollX_1 == null || scrollX_1 === 0 ? pageXOffset_1 : scrollX_1;\n            var startY = scrollY_1 == null || scrollY_1 === 0 ? pageYOffset_1 : scrollY_1;\n            return {\n                startTime: startTime,\n                startX: startX,\n                startY: startY,\n                endX: Math.floor(kind === \"scrollBy\" ? startX + x : x),\n                endY: Math.floor(kind === \"scrollBy\" ? startY + y : y),\n                method: getOriginalScrollMethodForKind(\"scrollTo\", window).bind(window),\n                scroller: getScrollingElement()\n            };\n        }\n        else {\n            var scrollLeft = element.scrollLeft, scrollTop = element.scrollTop;\n            var startX = scrollLeft;\n            var startY = scrollTop;\n            return {\n                startTime: startTime,\n                startX: startX,\n                startY: startY,\n                endX: Math.floor(kind === \"scrollBy\" ? startX + x : x),\n                endY: Math.floor(kind === \"scrollBy\" ? startY + y : y),\n                method: getOriginalScrollMethodForKind(\"scrollTo\", element).bind(element),\n                scroller: element\n            };\n        }\n    }\n\n    /**\n     * Ensures that the given value is numeric\n     * @param {number} value\n     * @return {number}\n     */\n    function ensureNumeric(value) {\n        if (value == null)\n            return 0;\n        else if (typeof value === \"number\") {\n            return value;\n        }\n        else if (typeof value === \"string\") {\n            return parseFloat(value);\n        }\n        else {\n            return 0;\n        }\n    }\n\n    /**\n     * Returns true if the given value is some ScrollToOptions\n     * @param {number | ScrollToOptions} value\n     * @return {value is ScrollToOptions}\n     */\n    function isScrollToOptions(value) {\n        return value != null && typeof value === \"object\";\n    }\n\n    /**\n     * Handles a scroll method\n     * @param {Element|Window} element\n     * @param {ScrollMethodName} kind\n     * @param {number | ScrollToOptions} optionsOrX\n     * @param {number} y\n     */\n    function handleScrollMethod(element, kind, optionsOrX, y) {\n        onScrollWithOptions(getScrollToOptionsWithValidation(optionsOrX, y), element, kind);\n    }\n    /**\n     * Invoked when a 'ScrollToOptions' dict is provided to 'scroll()' as the first argument\n     * @param {ScrollToOptions} options\n     * @param {Element|Window} element\n     * @param {ScrollMethodName} kind\n     */\n    function onScrollWithOptions(options, element, kind) {\n        var behavior = getScrollBehavior(element, options);\n        // If the behavior is 'auto' apply instantaneous scrolling\n        if (behavior == null || behavior === \"auto\") {\n            getOriginalScrollMethodForKind(kind, element).call(element, options.left, options.top);\n        }\n        else {\n            smoothScroll(getSmoothScrollOptions(element, options.left, options.top, kind));\n        }\n    }\n    /**\n     * Normalizes the given scroll coordinates\n     * @param {number?} x\n     * @param {number?} y\n     * @return {Required<Pick<ScrollToOptions, \"top\" | \"left\">>}\n     */\n    function normalizeScrollCoordinates(x, y) {\n        return {\n            left: ensureNumeric(x),\n            top: ensureNumeric(y)\n        };\n    }\n    /**\n     * Gets ScrollToOptions based on the given arguments. Will throw if validation fails\n     * @param {number | ScrollToOptions} optionsOrX\n     * @param {number} y\n     * @return {Required<ScrollToOptions>}\n     */\n    function getScrollToOptionsWithValidation(optionsOrX, y) {\n        // If only one argument is given, and it isn't an options object, throw a TypeError\n        if (y === undefined && !isScrollToOptions(optionsOrX)) {\n            throw new TypeError(\"Failed to execute 'scroll' on 'Element': parameter 1 ('options') is not an object.\");\n        }\n        // Scroll based on the primitive values given as arguments\n        if (!isScrollToOptions(optionsOrX)) {\n            return __assign(__assign({}, normalizeScrollCoordinates(optionsOrX, y)), { behavior: \"auto\" });\n        }\n        // Scroll based on the received options object\n        else {\n            return __assign(__assign({}, normalizeScrollCoordinates(optionsOrX.left, optionsOrX.top)), { behavior: optionsOrX.behavior == null ? \"auto\" : optionsOrX.behavior });\n        }\n    }\n\n    /**\n     * Patches the 'scroll' method on the Element prototype\n     */\n    function patchElementScroll() {\n        Element.prototype.scroll = function (optionsOrX, y) {\n            handleScrollMethod(this, \"scroll\", optionsOrX, y);\n        };\n    }\n\n    /**\n     * Patches the 'scrollBy' method on the Element prototype\n     */\n    function patchElementScrollBy() {\n        Element.prototype.scrollBy = function (optionsOrX, y) {\n            handleScrollMethod(this, \"scrollBy\", optionsOrX, y);\n        };\n    }\n\n    /**\n     * Patches the 'scrollTo' method on the Element prototype\n     */\n    function patchElementScrollTo() {\n        Element.prototype.scrollTo = function (optionsOrX, y) {\n            handleScrollMethod(this, \"scrollTo\", optionsOrX, y);\n        };\n    }\n\n    /**\n     * Patches the 'scroll' method on the Window prototype\n     */\n    function patchWindowScroll() {\n        window.scroll = function (optionsOrX, y) {\n            handleScrollMethod(this, \"scroll\", optionsOrX, y);\n        };\n    }\n\n    /**\n     * Patches the 'scrollBy' method on the Window prototype\n     */\n    function patchWindowScrollBy() {\n        window.scrollBy = function (optionsOrX, y) {\n            handleScrollMethod(this, \"scrollBy\", optionsOrX, y);\n        };\n    }\n\n    /**\n     * Patches the 'scrollTo' method on the Window prototype\n     */\n    function patchWindowScrollTo() {\n        window.scrollTo = function (optionsOrX, y) {\n            handleScrollMethod(this, \"scrollTo\", optionsOrX, y);\n        };\n    }\n\n    // tslint:disable:no-any\n    /**\n     * Gets the parent of an element, taking into account DocumentFragments, ShadowRoots, as well as the root context (window)\n     * @param {EventTarget} currentElement\n     * @returns {EventTarget | null}\n     */\n    function getParent(currentElement) {\n        if (\"nodeType\" in currentElement && currentElement.nodeType === 1) {\n            return currentElement.parentNode;\n        }\n        if (\"ShadowRoot\" in window && currentElement instanceof window.ShadowRoot) {\n            return currentElement.host;\n        }\n        else if (currentElement === document) {\n            return window;\n        }\n        else if (currentElement instanceof Node)\n            return currentElement.parentNode;\n        return null;\n    }\n\n    /**\n     * Returns true if the given overflow property represents a scrollable overflow value\n     * @param {string | null} overflow\n     * @return {boolean}\n     */\n    function canOverflow(overflow) {\n        return overflow !== \"visible\" && overflow !== \"clip\";\n    }\n    /**\n     * Returns true if the given element is scrollable\n     * @param {Element} element\n     * @return {boolean}\n     */\n    function isScrollable(element) {\n        if (element.clientHeight < element.scrollHeight || element.clientWidth < element.scrollWidth) {\n            var style = getComputedStyle(element, null);\n            return canOverflow(style.overflowY) || canOverflow(style.overflowX);\n        }\n        return false;\n    }\n    /**\n     * Finds the nearest ancestor of an element that can scroll\n     * @param {Element} target\n     * @returns {Element|Window?}\n     */\n    function findNearestAncestorsWithScrollBehavior(target) {\n        var currentElement = target;\n        var scrollingElement = getScrollingElement();\n        while (currentElement != null) {\n            var behavior = getScrollBehavior(currentElement);\n            if (behavior != null && (currentElement === scrollingElement || isScrollable(currentElement))) {\n                return [currentElement, behavior];\n            }\n            var parent_1 = getParent(currentElement);\n            currentElement = parent_1;\n        }\n        // No such element could be found. Start over, but this time find the nearest ancestor that can simply scroll\n        currentElement = target;\n        while (currentElement != null) {\n            if (currentElement === scrollingElement || isScrollable(currentElement)) {\n                return [currentElement, \"auto\"];\n            }\n            var parent_2 = getParent(currentElement);\n            currentElement = parent_2;\n        }\n        // Default to the scrolling element\n        return [scrollingElement, \"auto\"];\n    }\n\n    // tslint:disable:no-any\n    /**\n     * Finds the nearest root from an element\n     * @param {Element} target\n     * @returns {Document|ShadowRoot}\n     */\n    function findNearestRoot(target) {\n        var currentElement = target;\n        while (currentElement != null) {\n            if (\"ShadowRoot\" in window && currentElement instanceof window.ShadowRoot) {\n                // Assume this is a ShadowRoot\n                return currentElement;\n            }\n            var parent_1 = getParent(currentElement);\n            if (parent_1 === currentElement) {\n                return document;\n            }\n            currentElement = parent_1;\n        }\n        return document;\n    }\n\n    /**\n     * Gets the origin of the given Location or HTMLAnchorElement if available in the runtime, and otherwise shims it. (it's a one-liner)\n     * @returns {string}\n     */\n    function getLocationOrigin(locationLike) {\n        if (locationLike === void 0) { locationLike = location; }\n        if (\"origin\" in locationLike && locationLike.origin != null) {\n            return locationLike.origin;\n        }\n        var port = locationLike.port != null && locationLike.port.length > 0 ? \":\" + locationLike.port : \"\";\n        if (locationLike.protocol === \"http:\" && port === \":80\") {\n            port = \"\";\n        }\n        else if (locationLike.protocol === \"https:\" && port === \":443\") {\n            port = \"\";\n        }\n        return locationLike.protocol + \"//\" + locationLike.hostname + port;\n    }\n\n    /**\n     * A Regular expression that matches id's of the form \"#[digit]\"\n     * @type {RegExp}\n     */\n    var ID_WITH_LEADING_DIGIT_REGEXP = /^#\\d/;\n    /**\n     * Catches anchor navigation to IDs within the same root and ensures that they can be smooth-scrolled\n     * if the scroll behavior is smooth in the first rooter within that context\n     */\n    function catchNavigation() {\n        // Listen for 'click' events globally\n        window.addEventListener(\"click\", function (e) {\n            // Only work with trusted events on HTMLAnchorElements\n            if (!e.isTrusted || !(e.target instanceof HTMLAnchorElement))\n                return;\n            var _a = e.target, pathname = _a.pathname, search = _a.search, hash = _a.hash;\n            var pointsToCurrentPage = getLocationOrigin(e.target) === getLocationOrigin(location) && pathname === location.pathname && search === location.search;\n            // Only work with HTMLAnchorElements that navigates to a specific ID on the current page\n            if (!pointsToCurrentPage || hash == null || hash.length < 1) {\n                return;\n            }\n            // Find the nearest root, whether it be a ShadowRoot or the document itself\n            var root = findNearestRoot(e.target);\n            // Attempt to match the selector from that root. querySelector' doesn't support IDs that start with a digit, so work around that limitation\n            var elementMatch = hash.match(ID_WITH_LEADING_DIGIT_REGEXP) != null ? root.getElementById(hash.slice(1)) : root.querySelector(hash);\n            // If no selector could be found, don't proceed\n            if (elementMatch == null)\n                return;\n            // Find the nearest ancestor that can be scrolled\n            var _b = __read(findNearestAncestorsWithScrollBehavior(elementMatch), 2), behavior = _b[1];\n            // If the behavior isn't smooth, don't proceed\n            if (behavior !== \"smooth\")\n                return;\n            // Otherwise, first prevent the default action.\n            e.preventDefault();\n            // Now, scroll to the element with that ID\n            elementMatch.scrollIntoView({\n                behavior: behavior\n            });\n        });\n    }\n\n    var ELEMENT_ORIGINAL_SCROLL_INTO_VIEW = UNSUPPORTED_ENVIRONMENT ? undefined : Element.prototype.scrollIntoView;\n\n    /**\n     * The majority of this file is based on https://github.com/stipsan/compute-scroll-into-view (MIT license),\n     * but has been rewritten to accept a scroller as an argument.\n     */\n    /**\n     * Find out which edge to align against when logical scroll position is \"nearest\"\n     * Interesting fact: \"nearest\" works similarly to \"if-needed\", if the element is fully visible it will not scroll it\n     *\n     * Legends:\n     * ┌────────┐ ┏ ━ ━ ━ ┓\n     * │ target │   frame\n     * └────────┘ ┗ ━ ━ ━ ┛\n     */\n    function alignNearest(scrollingEdgeStart, scrollingEdgeEnd, scrollingSize, scrollingBorderStart, scrollingBorderEnd, elementEdgeStart, elementEdgeEnd, elementSize) {\n        /**\n         * If element edge A and element edge B are both outside scrolling box edge A and scrolling box edge B\n         *\n         *          ┌──┐\n         *        ┏━│━━│━┓\n         *          │  │\n         *        ┃ │  │ ┃        do nothing\n         *          │  │\n         *        ┗━│━━│━┛\n         *          └──┘\n         *\n         *  If element edge C and element edge D are both outside scrolling box edge C and scrolling box edge D\n         *\n         *    ┏ ━ ━ ━ ━ ┓\n         *   ┌───────────┐\n         *   │┃         ┃│        do nothing\n         *   └───────────┘\n         *    ┗ ━ ━ ━ ━ ┛\n         */\n        if ((elementEdgeStart < scrollingEdgeStart && elementEdgeEnd > scrollingEdgeEnd) ||\n            (elementEdgeStart > scrollingEdgeStart && elementEdgeEnd < scrollingEdgeEnd)) {\n            return 0;\n        }\n        /**\n         * If element edge A is outside scrolling box edge A and element height is less than scrolling box height\n         *\n         *          ┌──┐\n         *        ┏━│━━│━┓         ┏━┌━━┐━┓\n         *          └──┘             │  │\n         *  from  ┃      ┃     to  ┃ └──┘ ┃\n         *\n         *        ┗━ ━━ ━┛         ┗━ ━━ ━┛\n         *\n         * If element edge B is outside scrolling box edge B and element height is greater than scrolling box height\n         *\n         *        ┏━ ━━ ━┓         ┏━┌━━┐━┓\n         *                           │  │\n         *  from  ┃ ┌──┐ ┃     to  ┃ │  │ ┃\n         *          │  │             │  │\n         *        ┗━│━━│━┛         ┗━│━━│━┛\n         *          │  │             └──┘\n         *          │  │\n         *          └──┘\n         *\n         * If element edge C is outside scrolling box edge C and element width is less than scrolling box width\n         *\n         *       from                 to\n         *    ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n         *  ┌───┐                 ┌───┐\n         *  │ ┃ │       ┃         ┃   │     ┃\n         *  └───┘                 └───┘\n         *    ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n         *\n         * If element edge D is outside scrolling box edge D and element width is greater than scrolling box width\n         *\n         *       from                 to\n         *    ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n         *        ┌───────────┐   ┌───────────┐\n         *    ┃   │     ┃     │   ┃         ┃ │\n         *        └───────────┘   └───────────┘\n         *    ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n         */\n        if ((elementEdgeStart <= scrollingEdgeStart && elementSize <= scrollingSize) ||\n            (elementEdgeEnd >= scrollingEdgeEnd && elementSize >= scrollingSize)) {\n            return elementEdgeStart - scrollingEdgeStart - scrollingBorderStart;\n        }\n        /**\n         * If element edge B is outside scrolling box edge B and element height is less than scrolling box height\n         *\n         *        ┏━ ━━ ━┓         ┏━ ━━ ━┓\n         *\n         *  from  ┃      ┃     to  ┃ ┌──┐ ┃\n         *          ┌──┐             │  │\n         *        ┗━│━━│━┛         ┗━└━━┘━┛\n         *          └──┘\n         *\n         * If element edge A is outside scrolling box edge A and element height is greater than scrolling box height\n         *\n         *          ┌──┐\n         *          │  │\n         *          │  │             ┌──┐\n         *        ┏━│━━│━┓         ┏━│━━│━┓\n         *          │  │             │  │\n         *  from  ┃ └──┘ ┃     to  ┃ │  │ ┃\n         *                           │  │\n         *        ┗━ ━━ ━┛         ┗━└━━┘━┛\n         *\n         * If element edge C is outside scrolling box edge C and element width is greater than scrolling box width\n         *\n         *           from                 to\n         *        ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n         *  ┌───────────┐           ┌───────────┐\n         *  │     ┃     │   ┃       │ ┃         ┃\n         *  └───────────┘           └───────────┘\n         *        ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n         *\n         * If element edge D is outside scrolling box edge D and element width is less than scrolling box width\n         *\n         *           from                 to\n         *        ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n         *                ┌───┐             ┌───┐\n         *        ┃       │ ┃ │       ┃     │   ┃\n         *                └───┘             └───┘\n         *        ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n         *\n         */\n        if ((elementEdgeEnd > scrollingEdgeEnd && elementSize < scrollingSize) || (elementEdgeStart < scrollingEdgeStart && elementSize > scrollingSize)) {\n            return elementEdgeEnd - scrollingEdgeEnd + scrollingBorderEnd;\n        }\n        return 0;\n    }\n    function computeScrollIntoView(target, scroller, options) {\n        var block = options.block, inline = options.inline;\n        // Used to handle the top most element that can be scrolled\n        var scrollingElement = getScrollingElement();\n        // Support pinch-zooming properly, making sure elements scroll into the visual viewport\n        // Browsers that don't support visualViewport will report the layout viewport dimensions on document.documentElement.clientWidth/Height\n        // and viewport dimensions on window.innerWidth/Height\n        // https://www.quirksmode.org/mobile/viewports2.html\n        // https://bokand.github.io/viewport/index.html\n        var viewportWidth = window.visualViewport != null ? visualViewport.width : innerWidth;\n        var viewportHeight = window.visualViewport != null ? visualViewport.height : innerHeight;\n        var viewportX = window.scrollX != null ? window.scrollX : window.pageXOffset;\n        var viewportY = window.scrollY != null ? window.scrollY : window.pageYOffset;\n        var _a = target.getBoundingClientRect(), targetHeight = _a.height, targetWidth = _a.width, targetTop = _a.top, targetRight = _a.right, targetBottom = _a.bottom, targetLeft = _a.left;\n        // These values mutate as we loop through and generate scroll coordinates\n        var targetBlock = block === \"start\" || block === \"nearest\" ? targetTop : block === \"end\" ? targetBottom : targetTop + targetHeight / 2; // block === 'center\n        var targetInline = inline === \"center\" ? targetLeft + targetWidth / 2 : inline === \"end\" ? targetRight : targetLeft; // inline === 'start || inline === 'nearest\n        var _b = scroller.getBoundingClientRect(), height = _b.height, width = _b.width, top = _b.top, right = _b.right, bottom = _b.bottom, left = _b.left;\n        var frameStyle = getComputedStyle(scroller);\n        var borderLeft = parseInt(frameStyle.borderLeftWidth, 10);\n        var borderTop = parseInt(frameStyle.borderTopWidth, 10);\n        var borderRight = parseInt(frameStyle.borderRightWidth, 10);\n        var borderBottom = parseInt(frameStyle.borderBottomWidth, 10);\n        var blockScroll = 0;\n        var inlineScroll = 0;\n        // The property existance checks for offset[Width|Height] is because only HTMLElement objects have them, but any Element might pass by here\n        // @TODO find out if the \"as HTMLElement\" overrides can be dropped\n        var scrollbarWidth = \"offsetWidth\" in scroller ? scroller.offsetWidth - scroller.clientWidth - borderLeft - borderRight : 0;\n        var scrollbarHeight = \"offsetHeight\" in scroller ? scroller.offsetHeight - scroller.clientHeight - borderTop - borderBottom : 0;\n        if (scrollingElement === scroller) {\n            // Handle viewport logic (document.documentElement or document.body)\n            if (block === \"start\") {\n                blockScroll = targetBlock;\n            }\n            else if (block === \"end\") {\n                blockScroll = targetBlock - viewportHeight;\n            }\n            else if (block === \"nearest\") {\n                blockScroll = alignNearest(viewportY, viewportY + viewportHeight, viewportHeight, borderTop, borderBottom, viewportY + targetBlock, viewportY + targetBlock + targetHeight, targetHeight);\n            }\n            else {\n                // block === 'center' is the default\n                blockScroll = targetBlock - viewportHeight / 2;\n            }\n            if (inline === \"start\") {\n                inlineScroll = targetInline;\n            }\n            else if (inline === \"center\") {\n                inlineScroll = targetInline - viewportWidth / 2;\n            }\n            else if (inline === \"end\") {\n                inlineScroll = targetInline - viewportWidth;\n            }\n            else {\n                // inline === 'nearest' is the default\n                inlineScroll = alignNearest(viewportX, viewportX + viewportWidth, viewportWidth, borderLeft, borderRight, viewportX + targetInline, viewportX + targetInline + targetWidth, targetWidth);\n            }\n            // Apply scroll position offsets and ensure they are within bounds\n            // @TODO add more test cases to cover this 100%\n            blockScroll = Math.max(0, blockScroll + viewportY);\n            inlineScroll = Math.max(0, inlineScroll + viewportX);\n        }\n        else {\n            // Handle each scrolling frame that might exist between the target and the viewport\n            if (block === \"start\") {\n                blockScroll = targetBlock - top - borderTop;\n            }\n            else if (block === \"end\") {\n                blockScroll = targetBlock - bottom + borderBottom + scrollbarHeight;\n            }\n            else if (block === \"nearest\") {\n                blockScroll = alignNearest(top, bottom, height, borderTop, borderBottom + scrollbarHeight, targetBlock, targetBlock + targetHeight, targetHeight);\n            }\n            else {\n                // block === 'center' is the default\n                blockScroll = targetBlock - (top + height / 2) + scrollbarHeight / 2;\n            }\n            if (inline === \"start\") {\n                inlineScroll = targetInline - left - borderLeft;\n            }\n            else if (inline === \"center\") {\n                inlineScroll = targetInline - (left + width / 2) + scrollbarWidth / 2;\n            }\n            else if (inline === \"end\") {\n                inlineScroll = targetInline - right + borderRight + scrollbarWidth;\n            }\n            else {\n                // inline === 'nearest' is the default\n                inlineScroll = alignNearest(left, right, width, borderLeft, borderRight + scrollbarWidth, targetInline, targetInline + targetWidth, targetWidth);\n            }\n            var scrollLeft = scroller.scrollLeft, scrollTop = scroller.scrollTop;\n            // Ensure scroll coordinates are not out of bounds while applying scroll offsets\n            blockScroll = Math.max(0, Math.min(scrollTop + blockScroll, scroller.scrollHeight - height + scrollbarHeight));\n            inlineScroll = Math.max(0, Math.min(scrollLeft + inlineScroll, scroller.scrollWidth - width + scrollbarWidth));\n        }\n        return {\n            top: blockScroll,\n            left: inlineScroll\n        };\n    }\n\n    /**\n     * Patches the 'scrollIntoView' method on the Element prototype\n     */\n    function patchElementScrollIntoView() {\n        Element.prototype.scrollIntoView = function (arg) {\n            var normalizedOptions = arg == null || arg === true\n                ? {\n                    block: \"start\",\n                    inline: \"nearest\"\n                }\n                : arg === false\n                    ? {\n                        block: \"end\",\n                        inline: \"nearest\"\n                    }\n                    : arg;\n            // Find the nearest ancestor that can be scrolled\n            var _a = __read(findNearestAncestorsWithScrollBehavior(this), 2), ancestorWithScroll = _a[0], ancestorWithScrollBehavior = _a[1];\n            var behavior = normalizedOptions.behavior != null ? normalizedOptions.behavior : ancestorWithScrollBehavior;\n            // If the behavior isn't smooth, simply invoke the original implementation and do no more\n            if (behavior !== \"smooth\") {\n                // Assert that 'scrollIntoView' is actually defined\n                if (ELEMENT_ORIGINAL_SCROLL_INTO_VIEW != null) {\n                    ELEMENT_ORIGINAL_SCROLL_INTO_VIEW.call(this, normalizedOptions);\n                }\n                // Otherwise, invoke 'scrollTo' instead and provide the scroll coordinates\n                else {\n                    var _b = computeScrollIntoView(this, ancestorWithScroll, normalizedOptions), top_1 = _b.top, left = _b.left;\n                    getOriginalScrollMethodForKind(\"scrollTo\", this).call(this, left, top_1);\n                }\n                return;\n            }\n            ancestorWithScroll.scrollTo(__assign({ behavior: behavior }, computeScrollIntoView(this, ancestorWithScroll, normalizedOptions)));\n        };\n        // On IE11, HTMLElement has its own declaration of scrollIntoView and does not inherit this from the prototype chain, so we'll need to patch that one too.\n        if (HTMLElement.prototype.scrollIntoView != null && HTMLElement.prototype.scrollIntoView !== Element.prototype.scrollIntoView) {\n            HTMLElement.prototype.scrollIntoView = Element.prototype.scrollIntoView;\n        }\n    }\n\n    var ELEMENT_ORIGINAL_SCROLL_TOP_SET_DESCRIPTOR = UNSUPPORTED_ENVIRONMENT\n        ? undefined\n        : Object.getOwnPropertyDescriptor(Element.prototype, \"scrollTop\").set;\n\n    /**\n     * Patches the 'scrollTop' property descriptor on the Element prototype\n     */\n    function patchElementScrollTop() {\n        Object.defineProperty(Element.prototype, \"scrollTop\", {\n            set: function (scrollTop) {\n                if (this.__adjustingScrollPosition) {\n                    return ELEMENT_ORIGINAL_SCROLL_TOP_SET_DESCRIPTOR.call(this, scrollTop);\n                }\n                handleScrollMethod(this, \"scrollTo\", this.scrollLeft, scrollTop);\n                return scrollTop;\n            }\n        });\n    }\n\n    var ELEMENT_ORIGINAL_SCROLL_LEFT_SET_DESCRIPTOR = UNSUPPORTED_ENVIRONMENT\n        ? undefined\n        : Object.getOwnPropertyDescriptor(Element.prototype, \"scrollLeft\").set;\n\n    /**\n     * Patches the 'scrollLeft' property descriptor on the Element prototype\n     */\n    function patchElementScrollLeft() {\n        Object.defineProperty(Element.prototype, \"scrollLeft\", {\n            set: function (scrollLeft) {\n                if (this.__adjustingScrollPosition) {\n                    return ELEMENT_ORIGINAL_SCROLL_LEFT_SET_DESCRIPTOR.call(this, scrollLeft);\n                }\n                handleScrollMethod(this, \"scrollTo\", scrollLeft, this.scrollTop);\n                return scrollLeft;\n            }\n        });\n    }\n\n    /**\n     * Applies the polyfill\n     */\n    function patch() {\n        // Element.prototype methods\n        patchElementScroll();\n        patchElementScrollBy();\n        patchElementScrollTo();\n        patchElementScrollIntoView();\n        // Element.prototype descriptors\n        patchElementScrollLeft();\n        patchElementScrollTop();\n        // window methods\n        patchWindowScroll();\n        patchWindowScrollBy();\n        patchWindowScrollTo();\n        // Navigation\n        catchNavigation();\n    }\n\n    /**\n     * Is true if the browser natively supports the Element.prototype.[scroll|scrollTo|scrollBy|scrollIntoView] methods\n     * @type {boolean}\n     */\n    var SUPPORTS_ELEMENT_PROTOTYPE_SCROLL_METHODS = UNSUPPORTED_ENVIRONMENT\n        ? false\n        : \"scroll\" in Element.prototype && \"scrollTo\" in Element.prototype && \"scrollBy\" in Element.prototype && \"scrollIntoView\" in Element.prototype;\n\n    if (!UNSUPPORTED_ENVIRONMENT && (!SUPPORTS_SCROLL_BEHAVIOR || !SUPPORTS_ELEMENT_PROTOTYPE_SCROLL_METHODS)) {\n        patch();\n    }\n\n}());\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/scroll-behavior-polyfill/dist/index.js\n");

/***/ })

}]);